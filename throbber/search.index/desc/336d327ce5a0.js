rd_("AdEuler\xe2\x80\x99s number (e)0000000CfTrait for comparisons corresponding to equivalence \xe2\x80\xa6CmDerive macro generating an impl of the trait <code>Eq</code>.10ClThe version of the call operator that takes an immutable \xe2\x80\xa60CmA string describing the specific operating system in use. \xe2\x80\xa6AjContains the success value00000000000AkArchimedes\xe2\x80\x99 constant (\xcf\x80)0000000CjA single-threaded reference-counting pointer. \xe2\x80\x98Rc\xe2\x80\x99 \xe2\x80\xa60CnFull system is the required shareability domain, reads and \xe2\x80\xa60A`An IPv4 address.AgAn IPv4 socket address.10A`An IPv6 address.AgAn IPv6 socket address.10BhCast between types, or rename an import.BcEquality for two <code>Arc</code>s.BiEquality for two <code>UniqueArc</code>s.BbEquality for two <code>Rc</code>s.BhEquality for two <code>UniqueRc</code>s.EfTests for <code>self</code> and <code>other</code> values to be equal, and is used \xe2\x80\xa6DiDetermines if the elements of this <code>Iterator</code> are equal to \xe2\x80\xa60BcCompares raw pointers for equality.fPanicsBmCompares two spans to see if they\xe2\x80\x99re equal.43287BhEquality for two <code>OnceLock</code>s.276BnOwned and borrowed Unix-like file descriptors.CjFunction pointers, like <code>fn(usize) -&gt; bool</code>.AoA function or function pointer.1BcFilesystem manipulation operations.DfUnix-specific extensions to primitives in the <code>std::fs</code> \xe2\x80\xa6DiWindows-specific extensions to primitives in the <code>std::fs</code> \xe2\x80\xa6DgLinux-specific extensions to primitives in the <code>std::fs</code> \xe2\x80\xa6DfWASI-specific extensions to primitives in the <code>std::fs</code> \xe2\x80\xa6CdDarwin-specific extension traits to <code>fs</code>.Dd\xe2\x80\x98Greater than or equal to\xe2\x80\x99 comparison for two <code>Arc</code>s.Dk\xe2\x80\x98Greater than or equal to\xe2\x80\x99 comparison for two <code>UniqueArc</code>\xe2\x80\xa6Dc\xe2\x80\x98Greater than or equal to\xe2\x80\x99 comparison for two <code>Rc</code>s.Dj\xe2\x80\x98Greater than or equal to\xe2\x80\x99 comparison for two <code>UniqueRc</code>\xe2\x80\xa6EhTests greater than or equal to (for <code>self</code> and <code>other</code>) and is \xe2\x80\xa6D`Determines if the elements of this <code>Iterator</code> are \xe2\x80\xa60fPanics2165043CbGreater-than comparison for two <code>Arc</code>s.ChGreater-than comparison for two <code>UniqueArc</code>s.CaGreater-than comparison for two <code>Rc</code>s.CgGreater-than comparison for two <code>UniqueRc</code>s.EhTests greater than (for <code>self</code> and <code>other</code>) and is used by the \xe2\x80\xa66650643521AnThe 8-bit signed integer type.DbRedundant constants module for the <code>i8</code> primitive type.10BfGets the thread\xe2\x80\x99s unique identifier.CnReturns the OS-assigned process identifier associated with \xe2\x80\xa60BfEvaluate a block if a condition holds.CfIterate over a series of values with <code>for</code>.CfTraits, helpers, and type definitions for core I/O \xe2\x80\xa60CcUnix-specific extensions to general I/O primitives.CfWindows-specific extensions to general I/O primitives.CcWASI-specific extensions to general I/O primitives.CkReturns the IP address associated with this socket address.00000D`Forwards to the method defined on the type <code>dyn Any</code>.DjReturns <code>true</code> if the inner type is the same as <code>T</code>.ClForwards to the method defined on the type <code>Any</code>.DbForwards to the method defined on the type <code>dyn Error</code>.02231200Da\xe2\x80\x98Less than or equal to\xe2\x80\x99 comparison for two <code>Arc</code>s.Dg\xe2\x80\x98Less than or equal to\xe2\x80\x99 comparison for two <code>UniqueArc</code>s.D`\xe2\x80\x98Less than or equal to\xe2\x80\x99 comparison for two <code>Rc</code>s.Df\xe2\x80\x98Less than or equal to\xe2\x80\x99 comparison for two <code>UniqueRc</code>s.EeTests less than or equal to (for <code>self</code> and <code>other</code>) and is \xe2\x80\xa6D`Determines if the elements of this <code>Iterator</code> are \xe2\x80\xa60fPanics2165043BlReturns the natural logarithm of the number.000CiProduces a vector where every element has the natural \xe2\x80\xa6BoLess-than comparison for two <code>Arc</code>s.CeLess-than comparison for two <code>UniqueArc</code>s.BnLess-than comparison for two <code>Rc</code>s.CdLess-than comparison for two <code>UniqueRc</code>s.FgTests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> \xe2\x80\xa68870843721BeInequality for two <code>Arc</code>s.BdInequality for two <code>Rc</code>s.BjInequality for two <code>UniqueRc</code>s.DjTests for <code>!=</code>. The default implementation is almost always \xe2\x80\xa6DjDetermines if the elements of this <code>Iterator</code> are not equal \xe2\x80\xa6010432CnReturns the <code>TypeId</code> of the generic type parameter.BaReturns the alignment for a type.10DnConverts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;T&gt;</code>.0ChReturns the option if it contains a value, otherwise \xe2\x80\xa6FeReturns <code>res</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> \xe2\x80\xa610AjOS-specific functionality.CiSingle-threaded reference-counting pointers. \xe2\x80\x98Rc\xe2\x80\x99 \xe2\x80\xa60B`The 8-bit unsigned integer type.DbRedundant constants module for the <code>u8</code> primitive type.10BfThe first version of the core prelude.CiThe first version of the prelude of The Rust Standard \xe2\x80\xa6ChUnwinding is just not possible given the ABI of this \xe2\x80\xa60BeThe addition operator <code>+</code>.0BbA trait to emulate dynamic typing.0CnA thread-safe reference-counting pointer. \xe2\x80\x98Arc\xe2\x80\x99 stands \xe2\x80\xa60CjA pointer type that uniquely owns a heap allocation of \xe2\x80\xa60AoA clone-on-write smart pointer.0BeThe division operator <code>/</code>.0CfThe range is bounded exclusively from above and is \xe2\x80\xa60CgSets the offset to the size of this object plus the \xe2\x80\xa6AhContains the error valueChThe associated error which can be returned from parsing.1101101111111BbNumber of elements in this vector.0EmThe highest valid code point a <code>char</code> can have, <code>&#39;\\u{10FFFF}&#39;</code>.BfLargest finite <code>f16</code> value.BfLargest finite <code>f32</code> value.BfLargest finite <code>f64</code> value.BgLargest finite <code>f128</code> value.CmThe largest value that can be represented by this integer \xe2\x80\xa600000000000EoThe highest valid code point a <code>char</code> can have, <code>&#39;\\u{10FFFF}&#39;</code>\xe2\x80\xa6DiLargest finite <code>f32</code> value. Use <code>f32::MAX</code> instead.DiLargest finite <code>f64</code> value. Use <code>f64::MAX</code> instead.333333CkTrait version of the inherent <code>MIN</code> assoc const.444444CnThe largest value that can be represented by this non-zero \xe2\x80\xa600000000000CmReturns the largest value that can be represented by this \xe2\x80\xa600000000000000000000000BjThe character with the highest ASCII code.AeThe maximum duration.=<;:988888888888876588888888888813333333333332222222222222222222222220EdThe lowest valid code point a <code>char</code> can have, <code>&#39;\\0&#39;</code>.BgSmallest finite <code>f16</code> value.BgSmallest finite <code>f32</code> value.BgSmallest finite <code>f64</code> value.BhSmallest finite <code>f128</code> value.CnThe smallest value that can be represented by this integer \xe2\x80\xa600000000000DjSmallest finite <code>f32</code> value. Use <code>f32::MIN</code> instead.DjSmallest finite <code>f64</code> value. Use <code>f64::MIN</code> instead.222222<BcThe smallest possible alignment, 1.333333CkThe smallest value that can be represented by this non-zero00000000000CnReturns the smallest value that can be represented by this \xe2\x80\xa600000000000000000000000BiThe character with the lowest ASCII code.;:9876666666666665466666636666660222222222222111111111111111111111111DjAn iterator that maps the values of <code>iter</code> with <code>f</code>.0BkThe multiplication operator <code>*</code>.0AcNot a Number (NaN).000CfNot a Number (NaN). Use <code>f32::NAN</code> instead.CfNot a Number (NaN). Use <code>f64::NAN</code> instead.222210ClNaN (not a number): this value results from calculations \xe2\x80\xa60BkThe unary negation operator <code>-</code>.0CcThe unary logical negation operator <code>!</code>.0BmDisable collecting and displaying backtraces.BhTrait for types that form a total order.DfDerive macro generating an impl of the trait <code>Ord</code>. The \xe2\x80\xa610AeThe golden ratio (\xcf\x86)0000000BjA pointer which pins its pointee in place.0DjWraps a borrowed reference to a value in a <code>RefCell</code> box. A \xe2\x80\xa60BfThe remainder operator <code>%</code>.0CdA double-ended iterator with the direction inverted.0DoThe left shift operator <code>&lt;&lt;</code>. Note that because this trait \xe2\x80\xa60E`The right shift operator <code>&gt;&gt;</code>. Note that because this trait \xe2\x80\xa60BhThe subtraction operator <code>-</code>.0CnTrait to represent types that can be created by summing up \xe2\x80\xa60AmThe full circle constant (\xcf\x84)0000000CkThe <code>?</code> operator and <code>try {}</code> blocks.0GgPrefix using Windows\xe2\x80\x99 <em><strong>U</strong>niform <strong>N</strong>aming <strong>C</strong>onvention</em>, e.g. \xe2\x80\xa6EaA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short \xe2\x80\xa60CaAn iterator that iterates two other iterators \xe2\x80\xa60CaComputes the absolute value of <code>self</code>.000000000CjProduces a vector where every element has the absolute \xe2\x80\xa6CgLanewise absolute value, implemented in Rust. Every \xe2\x80\xa6DfComputes the absolute value of self. See <code>i64::abs</code> for \xe2\x80\xa6DfComputes the absolute value of self. See <code>i32::abs</code> for \xe2\x80\xa6DeComputes the absolute value of self. See <code>i8::abs</code> for \xe2\x80\xa6DgComputes the absolute value of self. See <code>i128::abs</code> for \xe2\x80\xa6DfComputes the absolute value of self. See <code>i16::abs</code> for \xe2\x80\xa6DhComputes the absolute value of self. See <code>isize::abs</code> for \xe2\x80\xa6DjSaturating absolute value. Computes <code>self.abs()</code>, returning \xe2\x80\xa600000DhComputes the absolute value of <code>self</code>, wrapping around at \xe2\x80\xa600000::::::::::9898347256111111000000BeAdds an unsigned offset to a pointer.0BfPerforms the <code>+</code> operation.C`Adds an offset to a pointer (convenience for \xe2\x80\xa62210fPanics0CkTests if every element of the iterator matches a predicate.0CiReturns true if all elements are set, or false otherwise.10FbReturns <code>None</code> if the option is <code>None</code>, otherwise returns <code>optb</code>.FeReturns <code>res</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> \xe2\x80\xa6E`Combine the assumptions of <code>self</code> and <code>other_assumptions</code>.210C`Utilities for dynamic typing or type reflection.CiTests if any element of the iterator matches a predicate.0CgReturns true if any element is set, or false otherwise.210AhAdvance to the next arg.0BhAdds an argument to pass to the program.CoPlatform-specific intrinsics for the <code>arm</code> platform.A`Inline assembly.BdGenerates the breakpoint instruction0ClEvaluates boolean combinations of configuration flags at \xe2\x80\xa60BeComparison for two <code>Arc</code>s.BkComparison for two <code>UniqueArc</code>s.BdComparison for two <code>Rc</code>s.BjComparison for two <code>UniqueRc</code>s.BlUtilities for comparing and ordering values.EnThis method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.DiLexicographically compares the elements of this <code>Iterator</code> \xe2\x80\xa60BjTraits for comparing and ordering vectors.fPanics432187065BmComputes the cosine of a number (in radians).000CkProduces a vector where every element has the cosine of \xe2\x80\xa6CjPrints and returns the value of a given expression for \xe2\x80\xa6CaReturns the ID of the device containing the file.DmReturns the <code>st_dev</code> field of the internal <code>filestat_t</code>E`Same as <code>self / other.get()</code>, but because <code>other</code> is a \xe2\x80\xa600000BfPerforms the <code>/</code> operation.1111110Ch<code>dyn</code> is a prefix of a trait object\xe2\x80\x99s type.mEAX register.0mEBX register.0mECX register.0mEDX register.0CaReturns the upper bound of the range (inclusive).BiThe upper bound of the range (exclusive).0BhThe upper bound of the range (inclusive)101BiThe upper bound of the range (inclusive).2CkCreates an empty span pointing to directly after this span.433232313CaInspects an environment variable at compile time.CkInspection and manipulation of the process\xe2\x80\x99s environment.1CgInserts or updates an explicit environment variable \xe2\x80\xa6oError function.000DnConverts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;E&gt;</code>.0CjReturns <code>e^(self)</code>, (the exponential function).000CmProduces a vector where every element has the exponential \xe2\x80\xa6CmReturns a reference to the extension data for the current \xe2\x80\xa6CnSets the value for the extension data on <code>Context</code>.10CnA 16-bit floating-point type (specifically, the \xe2\x80\x9cbinary16\xe2\x80\xa6DfConstants for the <code>f16</code> half-precision floating point type.10CnA 32-bit floating-point type (specifically, the \xe2\x80\x9cbinary32\xe2\x80\xa6DhConstants for the <code>f32</code> single-precision floating point type.10CnA 64-bit floating-point type (specifically, the \xe2\x80\x9cbinary64\xe2\x80\xa6DhConstants for the <code>f64</code> double-precision floating point type.10BbUtilities related to FFI bindings.BiPlatform-specific types, as defined by C.1DgUnix-specific extensions to primitives in the <code>std::ffi</code> \xe2\x80\xa6DjWindows-specific extensions to primitives in the <code>std::ffi</code> \xe2\x80\xa6DgWASI-specific extensions to primitives in the <code>std::ffi</code> \xe2\x80\xa6CkUtilities for formatting and printing <code>String</code>s.BlFormats the value using the given formatter.00000000BnUtilities for formatting and printing strings.CfFormat signed integers in the two\xe2\x80\x99s-complement form.0000000000000000000BfFormat unsigned integers in the radix.000000000000000000011110000333333333EeA <code>Simd&lt;T, N&gt;</code> has a debug format like the one for <code>[T]</code>:52222222222222222222211111111111111111111222211114444444440DaShows a human-readable description of the <code>ErrorKind</code>.CnFormat the program and arguments of a Command for display. \xe2\x80\xa6EcIteration with <code>in</code>, trait implementation with <code>impl</code>, or \xe2\x80\xa6CnReturns a shared reference to the output at this location, \xe2\x80\xa6CgProvides a reference to the element at the given index.BkGets a reference to the value in the entry.CjReturns a reference to the value corresponding to the key.BlReturns a reference to this entry\xe2\x80\x99s value.2CiGets a reference to the value that would be used when \xe2\x80\xa6CjReturns a reference to the element in the set, if any, \xe2\x80\xa6CnReturns a reference to an element or subslice depending on \xe2\x80\xa6BgReturns a subslice of <code>str</code>.DkGet mutable access to the contents of a shared <code>UnsafePinned</code>\xe2\x80\xa69C`Returns the contained value as a primitive type.CnReturns a reference to the value if initialized. Otherwise \xe2\x80\xa6BkGets the reference to the underlying value.BfReturns a copy of the contained value.BlGets a mutable pointer to the wrapped value.0765>32132100;CmReturns a reference to the value in the set, if any, that \xe2\x80\xa6<9>==;=:;=:5BoReturns the group ID of the owner of this file.CnThe GID part of the peer credential. This is the effective \xe2\x80\xa6DcSimilar to <code>uid</code>, but sets the group ID of the child \xe2\x80\xa6AoThe 16-bit signed integer type.DcRedundant constants module for the <code>i16</code> primitive type.10AoThe 32-bit signed integer type.DcRedundant constants module for the <code>i32</code> primitive type.10AoThe 64-bit signed integer type.DcRedundant constants module for the <code>i64</code> primitive type.10AiReturns the inode number.EhReturns the underlying <code>d_ino</code> field in the contained <code>dirent</code> \xe2\x80\xa6DmReturns the <code>st_ino</code> field of the internal <code>filestat_t</code>DlReturns the underlying <code>d_ino</code> field of the <code>dirent_t</code>CiInter-quartile range: the difference between the 25th \xe2\x80\xa6CcAdds the key part of a new entry to the map output.BjReturns a reference to this entry\xe2\x80\x99s key.CgGets a reference to the key that would be used when \xe2\x80\xa6BiGets a reference to the key in the entry.33201210CfReturns the number of elements in the vector, also \xe2\x80\xa6BfReturns the length of the binary heap.CbReturns the length of the <code>LinkedList</code>.BlReturns the number of elements in the deque.BjReturns the number of elements in the map.BjReturns the number of elements in the set.EgReturns the length of this <code>String</code>, in bytes, not <code>char</code>s or \xe2\x80\xa6BbReturns the length of a raw slice.0BlReturns the number of elements in the slice.BhReturns the length of <code>self</code>.CcReturns the exact remaining length of the iterator.0BkReturns the length of a non-null raw slice.CcReturns the number of elements in this SIMD vector.CdReturns the length of the filled part of the buffer.6654BnReturns the length of this <code>OsStr</code>.432BnReturns the number of messages in the channel.0?9;>:;:=<ClReturns the size of the file, in bytes, this metadata is \xe2\x80\xa63BaReturns the number of used bytes.AkBind a value to a variable.CjReturns the logarithm of the number with respect to an \xe2\x80\xa6000CkProduces a vector where every element has the logarithm \xe2\x80\xa60EhReturns an array of the same size as <code>self</code>, with function <code>f</code> \xe2\x80\xa6ClTakes a closure and creates an iterator which calls that \xe2\x80\xa60FaMaps a <code>Bound&lt;T&gt;</code> to a <code>Bound&lt;U&gt;</code> by applying a function to \xe2\x80\xa6FdMaps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a \xe2\x80\xa6FdMaps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;U, E&gt;</code> by applying a function \xe2\x80\xa6DbMakes a new <code>Ref</code> for a component of the borrowed data.DiMakes a new <code>RefMut</code> for a component of the borrowed data, \xe2\x80\xa6EoMaps a <code>Poll&lt;T&gt;</code> to <code>Poll&lt;U&gt;</code> by applying a function to a \xe2\x80\xa676543DiMakes a <code>MappedMutexGuard</code> for a component of the borrowed \xe2\x80\xa60DeMakes a <code>MappedRwLockReadGuard</code> for a component of the \xe2\x80\xa6DfMakes a <code>MappedRwLockWriteGuard</code> for a component of the \xe2\x80\xa610221010543CeReturns the maximum of the two numbers, ignoring NaN.000BoCompares and returns the maximum of two values.0BkReturns the maximum element of an iterator.02222110AmMaximum value of the samples.BhBasic functions for dealing with memory.0CeReturns the minimum of the two numbers, ignoring NaN.000BoCompares and returns the minimum of two values.0BkReturns the minimum element of an iterator.02222110AmMinimum value of the samples.BlRustc internal tooling for hand-writing MIR.B`Macro for generating custom MIR.10AkOrganize code into modules.BfPerforms the <code>*</code> operation.0BjA mutable variable, reference, or pointer.BlPerforms the unary <code>-</code> operation.0BkNetworking primitives for IP communication.C`Networking primitives for TCP/UDP communication.BgUnix-specific networking functionality.BhLinux-specific networking functionality.EeConstructs a <code>Layout</code> suitable for holding a value of type <code>T</code>.CiCreates a new C-compatible string from a container of \xe2\x80\xa6DbCreates a new formatter with given <code>FormattingOptions</code>.EfConstruct a new <code>FormatterBuilder</code> with the supplied <code>Write</code> \xe2\x80\xa6BkConstructs a new <code>Arc&lt;T&gt;</code>.DoConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. \xe2\x80\xa6BeCreates a new <code>UniqueArc</code>.CbConstructs a new, empty <code>Vec&lt;T&gt;</code>.DbCreates a <code>ByteStr</code> slice from anything that can be \xe2\x80\xa6DiMoves a type to the heap with its <code>Metadata</code> stored in the \xe2\x80\xa6DdAllocates memory on the heap and then places <code>x</code> into it.CgCreates an empty <code>BinaryHeap</code> as a max-heap.BiCreates an empty <code>LinkedList</code>.AgCreates an empty deque.BiMakes a new, empty <code>BTreeMap</code>.BiMakes a new, empty <code>BTreeSet</code>.BjConstructs a new <code>Rc&lt;T&gt;</code>.;BdCreates a new <code>UniqueRc</code>.BhCreates a new empty <code>String</code>.EeConstructs a <code>Layout</code> suitable for holding a value of type <code>T</code>.CiCreates a new iterator over the given <code>array</code>.DbCreates a new formatter with given <code>FormattingOptions</code>.AlInitializes internal buffer.EfConstruct a new <code>FormatterBuilder</code> with the supplied <code>Write</code> \xe2\x80\xa6CkCreates a new BuildHasherDefault for Hasher <code>H</code>.DhCreates a new <code>SipHasher</code> with the two initial keys set to 0.CaConstructs a new instance of the variance marker.00000ChCreates a new inclusive range. Equivalent to writing \xe2\x80\xa6DjConstructs a new instance of <code>UnsafePinned</code> which will wrap \xe2\x80\xa6EaConstructs a new <code>Pin&lt;Ptr&gt;</code> around a pointer to some data of \xe2\x80\xa6DcCreates a new <code>NonNull</code> if <code>ptr</code> is non-null.FeCreates an <code>Alignment</code> from a <code>usize</code>, or returns <code>None</code> if it\xe2\x80\x99\xe2\x80\xa6BiWrap a value in an <code>Exclusive</code>BfCreates a new <code>AtomicBool</code>.BeCreates a new <code>AtomicPtr</code>.AmCreates a new atomic integer.000000000DbCreates a <code>ByteStr</code> slice from anything that can be \xe2\x80\xa6CbCreates a non-zero if the given value is not zero.C`Create a new instance of <code>DropGuard</code>.BdWrap a value to be manually dropped.DnCreates a new <code>MaybeUninit&lt;T&gt;</code> initialized with the given \xe2\x80\xa6ChCreates a new lazy value with the given initializing \xe2\x80\xa6BaCreates a new uninitialized cell.CkCreates a new <code>Cell</code> containing the given value.DaCreates a new <code>RefCell</code> containing <code>value</code>.DhConstructs a new instance of <code>UnsafeCell</code> which will wrap \xe2\x80\xa6DgConstructs a new instance of <code>SyncUnsafeCell</code> which will \xe2\x80\xa6CfCreates a new IPv4 address from four eight-bit octets.CfCreates a new IPv6 address from eight 16-bit segments.CnCreates a new socket address from an IP address and a port \xe2\x80\xa6DhCreates a new socket address from an <code>IPv4</code> address and a \xe2\x80\xa6DeCreates a new socket address from an <code>IPv6</code> address, a \xe2\x80\xa6DjCreates a new <code>Duration</code> from the specified number of whole \xe2\x80\xa6EdCreates a new <code>Waker</code> from the provided <code>data</code> pointer and \xe2\x80\xa6EeCreates a new <code>LocalWaker</code> from the provided <code>data</code> pointer \xe2\x80\xa6EgCreates a new <code>RawWaker</code> from the provided <code>data</code> pointer and \xe2\x80\xa6FbCreates a new <code>RawWakerVTable</code> from the provided <code>clone</code>, <code>wake</code>,EdCreates a new diagnostic with the given <code>level</code> and <code>message</code>.DdReturns an empty <code>TokenStream</code> containing no token trees.DgCreates a new <code>Group</code> with the given delimiter and token \xe2\x80\xa6DjCreates a new <code>Punct</code> from the given character and spacing. \xe2\x80\xa6EfCreates a new <code>Ident</code> with the given <code>string</code> as well as the \xe2\x80\xa6EeConstructs a <code>Layout</code> suitable for holding a value of type <code>T</code>.CiCreates a new iterator over the given <code>array</code>.CiCreates a new C-compatible string from a container of \xe2\x80\xa6BmConstructs a new empty <code>OsString</code>.BiCoerces into an <code>OsStr</code> slice.DbCreates a new formatter with given <code>FormattingOptions</code>.EfConstruct a new <code>FormatterBuilder</code> with the supplied <code>Write</code> \xe2\x80\xa6CkCreates a new BuildHasherDefault for Hasher <code>H</code>.DhCreates a new <code>SipHasher</code> with the two initial keys set to 0.CaConstructs a new instance of the variance marker.00000ChCreates a new inclusive range. Equivalent to writing \xe2\x80\xa6BhAllocates an empty <code>PathBuf</code>.CkDirectly wraps a string slice as a <code>Path</code> slice.DjConstructs a new instance of <code>UnsafePinned</code> which will wrap \xe2\x80\xa6EaConstructs a new <code>Pin&lt;Ptr&gt;</code> around a pointer to some data of \xe2\x80\xa6DcCreates a new <code>NonNull</code> if <code>ptr</code> is non-null.FeCreates an <code>Alignment</code> from a <code>usize</code>, or returns <code>None</code> if it\xe2\x80\x99\xe2\x80\xa6BkConstructs a new <code>Arc&lt;T&gt;</code>.DoConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. \xe2\x80\xa6BeCreates a new <code>UniqueArc</code>.CiCreates a new condition variable which is ready to be \xe2\x80\xa6CgCreates a new mutex in an unlocked state ready for use.BfCreates a new <code>Once</code> value.DlCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.CjCreates a new barrier that can block a given number of \xe2\x80\xa6ChCreates a new lazy value with the given initializing \xe2\x80\xa6BaCreates a new uninitialized cell.ClCreates a new re-entrant lock in an unlocked state ready \xe2\x80\xa6BiWrap a value in an <code>Exclusive</code>BfCreates a new <code>AtomicBool</code>.BeCreates a new <code>AtomicPtr</code>.AmCreates a new atomic integer.000000000BcCreates a <code>PoisonError</code>.<;9CkGenerates the base configuration for spawning a thread, \xe2\x80\xa6CbConstructs a new, empty <code>Vec&lt;T&gt;</code>.DbCreates a <code>ByteStr</code> slice from anything that can be \xe2\x80\xa6:9CkCreates a new <code>Cell</code> containing the given value.DaCreates a new <code>RefCell</code> containing <code>value</code>.DhConstructs a new instance of <code>UnsafeCell</code> which will wrap \xe2\x80\xa6DgConstructs a new instance of <code>SyncUnsafeCell</code> which will \xe2\x80\xa6C`Create a new instance of <code>DropGuard</code>.BdWrap a value to be manually dropped.DnCreates a new <code>MaybeUninit&lt;T&gt;</code> initialized with the given \xe2\x80\xa6DiMoves a type to the heap with its <code>Metadata</code> stored in the \xe2\x80\xa6DdAllocates memory on the heap and then places <code>x</code> into it.BjConstructs a new <code>Rc&lt;T&gt;</code>.DoConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. \xe2\x80\xa6BdCreates a new <code>UniqueRc</code>.BhCreates a new empty <code>String</code>.BfCreates an empty <code>HashMap</code>.CgCreates an empty <code>BinaryHeap</code> as a max-heap.BfCreates an empty <code>HashSet</code>.BiMakes a new, empty <code>BTreeMap</code>.BiMakes a new, empty <code>BTreeSet</code>.BiCreates an empty <code>LinkedList</code>.AgCreates an empty deque.DfConstructs a new <code>RandomState</code> that is initialized with \xe2\x80\xa6BiCreates a new <code>DefaultHasher</code>.CfCreates a new <code>Report</code> from an input error.CkCreates a blank new set of options ready for configuration.CgCreates a new <code>FileTimes</code> with no times set.CkCreates a new set of options with default mode/security \xe2\x80\xa6EaCreates a new <code>BufReader&lt;R&gt;</code> with a default buffer capacity. \xe2\x80\xa6EaCreates a new <code>BufWriter&lt;W&gt;</code> with a default buffer capacity. \xe2\x80\xa6BfCreates a new <code>LineWriter</code>.CnCreates a new I/O error from a known kind of error as well \xe2\x80\xa6ClCreates a new <code>IoSliceMut</code> wrapping a byte slice.CiCreates a new cursor wrapping the provided underlying \xe2\x80\xa6CiCreates a new <code>IoSlice</code> wrapping a byte slice.CfCreates a new IPv4 address from four eight-bit octets.CfCreates a new IPv6 address from eight 16-bit segments.CnCreates a new socket address from an IP address and a port \xe2\x80\xa6DhCreates a new socket address from an <code>IPv4</code> address and a \xe2\x80\xa6DeCreates a new socket address from an <code>IPv6</code> address, a \xe2\x80\xa6CbCreates a non-zero if the given value is not zero.BaCreates a Unix credential struct.C`Creates an ancillary data with the given buffer.DkConstructs a new <code>Command</code> for launching the program at path \xe2\x80\xa6DjCreates a new <code>Duration</code> from the specified number of whole \xe2\x80\xa6EdCreates a new <code>Waker</code> from the provided <code>data</code> pointer and \xe2\x80\xa6EeCreates a new <code>LocalWaker</code> from the provided <code>data</code> pointer \xe2\x80\xa6EgCreates a new <code>RawWaker</code> from the provided <code>data</code> pointer and \xe2\x80\xa6FbCreates a new <code>RawWakerVTable</code> from the provided <code>clone</code>, <code>wake</code>,BiConstructs a new summary of a sample set.BjGenerates the <code>NOP</code> instruction0BlPerforms the unary <code>!</code> operation.0BnReturns an instant corresponding to \xe2\x80\x9cnow\xe2\x80\x9d.CcReturns the system time corresponding to \xe2\x80\x9cnow\xe2\x80\x9d.CeReturns the <code>n</code>th element of the iterator.00CiNumeric traits and functions for the built-in numeric \xe2\x80\xa6BiTraits for vectors with numeric elements.BfAdditional functionality for numerics.1AgOverloadable operators.0ClTakes a string slice and emits it to the internal buffer \xe2\x80\xa600CoHelper module for exporting the <code>pattern_type</code> macro0CfThe PID part of the peer credential. This field is \xe2\x80\xa6GaConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>\xe2\x80\xa6GaConstructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>\xe2\x80\xa6G`Constructs a new <code>Pin&lt;Rc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>\xe2\x80\xa6BlTypes that pin data to a location in memory.DoConstructs a Pin&lt;&amp;mut T&gt;, by pinning a <code>value: T</code> locally.10432ChRemoves the peeked value from the vector and returns it.CmRemoves the last element from a vector and returns it, or \xe2\x80\xa6CnRemoves the greatest item from the binary heap and returns \xe2\x80\xa6CfRemoves the peeked value from the heap and returns it.CiRemoves the last character from the string buffer and \xe2\x80\xa6ChTruncates <code>self</code> to <code>self.parent</code>.54132DiRaises self to the power of <code>exp</code>, using exponentiation by \xe2\x80\xa600000000000000000000000000000000000000000000000000000000000000000000000BlManually manage memory through raw pointers.AoTraits for vectors of pointers.10AoMake an item visible to others.CkCompatibility module for C platform-specific types. Use \xe2\x80\xa6CiUnix-specific primitives available on all unix platforms.AlWindows-specific primitives.BdLinux-specific raw type definitions.BjBind by reference during pattern matching.DgThis operation satisfies <code>n % d == n - (n / d) * d</code>, and \xe2\x80\xa600000BfPerforms the <code>%</code> operation.1111110BcReverses an iterator\xe2\x80\x99s direction.00ClAssigns a new value to the memory location pointed to by \xe2\x80\xa6BhSets the value of the specified element.CkInitializes the contents of the cell to <code>value</code>.AiSets the contained value.3200100BhSets or initializes the contained value.021BmPerforms the <code>&lt;&lt;</code> operation.0BmPerforms the <code>&gt;&gt;</code> operation.0BkComputes the sine of a number (in radians).000CmProduces a vector where every element has the sine of the \xe2\x80\xa6AiThe Rust Standard LibraryCbUtilities for the <code>str</code> primitive type.nString slices.AdString manipulation.12FkReturns the difference of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>\xe2\x80\xa6BlSubtracts an unsigned offset from a pointer.0BfPerforms the <code>-</code> operation.CgSubtracts an offset from a pointer (convenience for \xe2\x80\xa62210DmReturns the difference of <code>self</code> and <code>rhs</code> as a new \xe2\x80\xa64CnReturns the amount of time elapsed from another instant to \xe2\x80\xa6DjTakes an iterator and generates <code>Self</code> from the elements by \xe2\x80\xa6BaSums the elements of an iterator.0EeTakes each element in the <code>Iterator</code>: if it is a <code>None</code>, no \xe2\x80\xa6EeTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no \xe2\x80\xa63210AcSum of the samples.BnComputes the tangent of a number (in radians).000BiUnwraps a result or propagates its error.0DaGets the value of the <code>IP_TTL</code> option for this socket.00BaThe 16-bit unsigned integer type.DcRedundant constants module for the <code>u16</code> primitive type.10BaThe 32-bit unsigned integer type.DcRedundant constants module for the <code>u32</code> primitive type.10BaThe 64-bit unsigned integer type.DcRedundant constants module for the <code>u64</code> primitive type.10BnReturns the user ID of the owner of this file.CnThe UID part of the peer credential. This is the effective \xe2\x80\xa6ClSets the child process\xe2\x80\x99s user ID. This translates to a \xe2\x80\xa6ClImport or rename items from other crates or modules, use \xe2\x80\xa6ChRetrieve an environment variable and add it to build \xe2\x80\xa6DfFetches the environment variable <code>key</code> from the current \xe2\x80\xa6CgVariance of the samples: bias-corrected mean of the \xe2\x80\xa6ChA contiguous growable array type with heap-allocated \xe2\x80\xa6CdCreates a <code>Vec</code> containing the arguments.10BjGenerates the <code>WFI</code> instruction0CoPlatform-specific intrinsics for the <code>x86</code> platform.FjReturns <code>Some</code> if exactly one of <code>self</code>, <code>optb</code> is <code>Some</code>, \xe2\x80\xa60CbConverts the arguments to iterators and zips them.Ci\xe2\x80\x98Zips up\xe2\x80\x99 two iterators into a single iterator of \xe2\x80\xa60ChZips <code>self</code> with another <code>Option</code>.ChPlace upper/lower halves of the source register into \xe2\x80\xa6321CkA string describing the architecture of the CPU that is \xe2\x80\xa6CkAn iterator over the arguments of a process, yielding a \xe2\x80\xa6ClA trait to borrow the file descriptor from an underlying \xe2\x80\xa6BfThe size of this integer type in bits.00000000000BoThe size of this non-zero integer type in bits.00000000000BnReturns the size of this integer type in bits.00000000000000000000000BdThe size of an IPv4 address in bits.BdThe size of an IPv6 address in bits.44444444444410333333333333222222222222222222222222fU+00070BlBit representation of this SIMD vector type.00DkBoth the reading and the writing portions of the <code>TcpStream</code> \xe2\x80\xa6BfRepresentation of a borrowed C string.000A`Call a function.0BlA SIMD vector with a different element type.00000000AjA mutable memory location.0CiOne of the 128 Unicode characters from U+0000 through \xe2\x80\xa60CjTypes whose values can be duplicated simply by copying \xe2\x80\xa6CoDerive macro generating an impl of the trait <code>Copy</code>.10C`Prefix <code>C:</code> for the given disk drive.CfExpresses that every byte of the haystack has been \xe2\x80\xa600AmDrop the contents of a place.BbCustom code within the destructor.10CeAn object providing access to an open file on the \xe2\x80\xa6CmUsed to do value-to-value conversions while consuming the \xe2\x80\xa6DcDerive macro generating an impl of the trait <code>From</code>. \xe2\x80\xa610CaPrints a backtrace with all possible information.DjThe data could not be sent on the <code>sync_channel</code> because it \xe2\x80\xa6DjAn iterator that yields <code>None</code> forever after the underlying \xe2\x80\xa60A`A hashable type.CoDerive macro generating an impl of the trait <code>Hash</code>.10oA help message.CnA value-to-value conversion that consumes the input value. \xe2\x80\xa60BmThe type of the elements being iterated over.0BoThe element type of the slice being matched on.C`The type of items yielded by the async iterator.BlThe type of the item yielded by the iterator3310AhImmutable slice iteratorCkAn iterator over the elements of a <code>BinaryHeap</code>.CkAn iterator over the elements of a <code>LinkedList</code>.CiAn iterator over the elements of a <code>VecDeque</code>.ChAn iterator over the entries of a <code>BTreeMap</code>.CfAn iterator over the items of a <code>BTreeSet</code>.DgAn iterator over a reference to the <code>Some</code> variant of an \xe2\x80\xa6EeAn iterator over a reference to the <code>Ok</code> variant of a <code>Result</code>.71FbAn iterator over the <code>Component</code>s of a <code>Path</code>, as <code>OsStr</code> slices.18EcAn iterator over messages on a <code>Receiver</code>, created by <code>iter</code>.0CgAn iterator over the entries of a <code>HashMap</code>.96587CeAn iterator over the items of a <code>HashSet</code>.CkReturned iterator over socket addresses which this type \xe2\x80\xa6BgHelper trait for <code>[T]::join</code>0kJSON outputCeAn iterator over the keys of a <code>BTreeMap</code>.CdAn iterator over the keys of a <code>HashMap</code>.1eln(2)0000000C`Indication that contents should be left-aligned.00ChAn ordering where a compared value is less than another.0DhA SIMD vector mask for <code>N</code> elements of width specified by \xe2\x80\xa6CiThe mask element type corresponding to this element type.BjThe mask type returned by each comparison.CfMask type used for manipulating this SIMD vector type.0003213000010000iNo value.Dk<code>\xe2\x88\x85 ... \xe2\x88\x85</code> An invisible delimiter, that may, for example, \xe2\x80\xa61gA note.AlU+0000 (The default variant)0C`An iterator that yields an element exactly once.0CmA low-level synchronization primitive for one-time global \xe2\x80\xa60AfRun only ignored tests0BmA slice of a path (akin to <code>str</code>).BcRepresents the <code>+</code> flag.00ClIndicates whether a value is available or if the current \xe2\x80\xa60DcThe <code>Read</code> trait allows for reading bytes from a source.DfThe reading portion of the <code>TcpStream</code> should be shut down.CiAn iterator to maintain state while iterating another \xe2\x80\xa60DkThe <code>Seek</code> trait provides a cursor which can be moved within \xe2\x80\xa6CgTypes that can be transferred across thread boundaries.0EdThe signedness of a <code>Formatter</code> (or of a <code>FormattingOptions</code>).00DjA SIMD vector with the shape of <code>[T; N]</code> but the operations \xe2\x80\xa600BlA writer which will move data into the void.DiAn iterator that skips over <code>n</code> elements of <code>iter</code>.0BbSome value of type <code>T</code>.0CgA region of source code, along with macro expansion \xe2\x80\xa6DmObjects that have a notion of <em>successor</em> and <em>predecessor</em> \xe2\x80\xa6000CjTypes for which it is safe to share references between \xe2\x80\xa60DkAn iterator that only iterates over the first <code>n</code> iterations \xe2\x80\xa60CfReader adapter which limits the bytes read from an \xe2\x80\xa6CgPointers to types implementing this trait alias are \xe2\x80\xa60ClAn iterator over a snapshot of the environment variables \xe2\x80\xa6CcThe implementation of waking a task on an executor.0Eh<code>Weak</code> is a version of <code>Arc</code> that holds a non-owning reference \xe2\x80\xa6Eg<code>Weak</code> is a version of <code>Rc</code> that holds a non-owning reference \xe2\x80\xa610EcImplement <code>FromResidual&lt;Yeet&lt;T&gt;&gt;</code> on your type to enable \xe2\x80\xa60AhA duration of zero time.0nValue was ZeroAjPositive or negative zero.10CjComputes the arccosine of a number. Return value is in \xe2\x80\xa6000CjAdds packed 8-bit signed numbers, discarding overflow bits0BnGets the \xe2\x80\x9caddress\xe2\x80\x9d portion of the pointer.0BlReturns the address of the function pointer.11111011111BbSIMD and vendor intrinsics module.0AgSet executable argumentClReturns the arguments that this program was started with \xe2\x80\xa6BoAdds multiple arguments to pass to the program.ChComputes the arcsine of a number. Return value is in \xe2\x80\xa6000CkComputes the arctangent of a number. Return value is in \xe2\x80\xa6000DnReturns the <code>st_atim</code> field of the internal <code>filestat_t</code>DiProvides a reference to the back element, or <code>None</code> if the \xe2\x80\xa6CnProvides a reference to the back element of the cursor\xe2\x80\x99s \xe2\x80\xa6011100BmThe BFloat16 type used in AVX-512 intrinsics.0DeCreates a new <code>TcpListener</code> which will be bound to the \xe2\x80\xa6BlCreates a UDP socket from the given address.CgCreates a Unix datagram socket bound to the given path.DfCreates a new <code>UnixListener</code> bound to the specified socket.AaThe boolean type.0EeThe <code>ByteStr</code> and <code>ByteString</code> types and trait implementations.ChThe <code>ByteStr</code> type and trait implementations.1AlPerforms the call operation.0BcCasts to a pointer of another type.00CfConverts the mask to a mask of any other element size.11CfPerforms elementwise conversion of this vector\xe2\x80\x99s \xe2\x80\xa60022210002222000BbReturns the cube root of a number.FbExperimental version of <code>cbrt</code> in <code>core</code>. See <code>f32::cbrt</code> for \xe2\x80\xa6FbExperimental version of <code>cbrt</code> in <code>core</code>. See <code>f64::cbrt</code> for \xe2\x80\xa62222DhReturns the smallest integer greater than or equal to <code>self</code>.0FbExperimental version of <code>ceil</code> in <code>core</code>. See <code>f32::ceil</code> for \xe2\x80\xa6FbExperimental version of <code>ceil</code> in <code>core</code>. See <code>f64::ceil</code> for \xe2\x80\xa62222CnReturns the smallest integer greater than or equal to each \xe2\x80\xa60AmShareable mutable containers.0AaA character type.CcUtilities for the <code>char</code> primitive type.10CmCount the number of leading zero bits of the packed 8-bit \xe2\x80\xa60BmReturns the exit code of the process, if any.CaReports the exit code, if applicable, from an \xe2\x80\xa6DgThis is an accidentally-stable alias to <code>ptr::copy</code>; use \xe2\x80\xa6FiCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The \xe2\x80\xa6AgBitwise-copies a value.210CmCopies the contents of one file to another. This function \xe2\x80\xa6CeCopies the entire contents of a reader into a writer.AeThe Rust Core LibraryAkHyperbolic cosine function.000DnReturns the <code>st_ctim</code> field of the internal <code>filestat_t</code>CkReturns the number of leading unset bits (zeroes) in an \xe2\x80\xa60ClReturns the number of trailing unset bits (zeroes) in an \xe2\x80\xa60DjGets the <code>data</code> pointer used to create this <code>Waker</code>.DoGets the <code>data</code> pointer used to create this <code>LocalWaker</code>.10BhGenerates the memory barrier instruction0AkDrops the <code>Arc</code>.BdDrops the <code>Weak</code> pointer.BdRemoves heap elements in heap order.AjDrops the <code>Rc</code>.2BlExecutes the async destructor for this type.BfExecutes the destructor for this type.AdDisposes of a value.BcManually drops the contained value.327610465AkDeletes the attribute list.DkWhat expression to evaluate when an <code>if</code> condition evaluates \xe2\x80\xa6AdEmit the diagnostic.BoA type that can be any one of several variants.CmInserts or updates multiple explicit environment variable \xe2\x80\xa6AmComplementary error function.000DjPerforms all the required setup by this <code>Command</code>, followed \xe2\x80\xa6CjTerminates the current process with the specified exit \xe2\x80\xa6AnReturns <code>2^(self)</code>.000CmProduces a vector where every element has the exponential \xe2\x80\xa6CgA 128-bit floating-point type (specifically, the \xe2\x80\x9c\xe2\x80\xa6DjConstants for the <code>f128</code> quadruple-precision floating point \xe2\x80\xa610CaExpands to the file name in which it was invoked.ClReturns the name of the source file from which the panic \xe2\x80\xa6CnThe path to the source file in which this span occurs, for \xe2\x80\xa621CnReturns the character used as \xe2\x80\x98fill\xe2\x80\x99 whenever there is \xe2\x80\xa6AhSets the fill character.DdFills <code>self</code> with elements by cloning <code>value</code>.21021CiReturns the byte index of the first character of this \xe2\x80\xa6CkSearches for an element of an iterator that satisfies a \xe2\x80\xa6010CjFolds every element into an accumulator by applying an \xe2\x80\xa600BmFree previously dynamically allocated memory.AoReturns the argument unchanged.000DlConverts a &amp;CStr into a <code>CString</code> by copying the contents \xe2\x80\xa6EoConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>CString</code>, by copying the \xe2\x80\xa6EgConverts a Vec&lt;NonZero&lt;u8&gt;&gt; into a <code>CString</code> without copying \xe2\x80\xa63DmConverts a Box&lt;CStr&gt; into a <code>CString</code> without copying or \xe2\x80\xa64444444444444444444444444444444444444444444444444444444444444444444444444444EaAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.5CnConverts an atomically reference-counted string slice into \xe2\x80\xa6CjCreates an atomically reference-counted pointer from a \xe2\x80\xa6DjAllocates a reference-counted slice and moves <code>v</code>\xe2\x80\x99s items \xe2\x80\xa6EnConverts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> \xe2\x80\xa6FbConverts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents \xe2\x80\xa6EmConverts a <code>&amp;mut CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the \xe2\x80\xa6CkMove a boxed object to a new, reference-counted allocation.7CgAllocates a reference-counted slice and fills it by \xe2\x80\xa60DcConverts a <code>[T; N]</code> into an <code>Arc&lt;[T]&gt;</code>.CkConverts a <code>T</code> into an <code>Arc&lt;T&gt;</code>:??????DhAllocates a <code>Vec&lt;u8&gt;</code> and fills it with a UTF-8 string.EaAllocates a <code>Vec&lt;T&gt;</code> and moves <code>s</code>\xe2\x80\x99s items into it.ChConverts a boxed slice into a vector by transferring \xe2\x80\xa6EbConverts the given <code>String</code> to a vector <code>Vec</code> that holds \xe2\x80\xa6CeConverts a <code>CString</code> into a Vec&lt;u8&gt;.EgAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>\xe2\x80\x99s items.00DgTurn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.DmConverts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.AoReturns the argument unchanged.3BnConverts a clone-on-write slice into a vector.11FiConverts a <code>&amp;</code><code>CString</code> into a borrowed <code>Cow</code> without copying or \xe2\x80\xa6EfCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to an \xe2\x80\xa6DiConverts a string slice into a <code>Borrowed</code> variant. No heap \xe2\x80\xa6DnConverts a <code>String</code> into an <code>Owned</code> variant. No heap \xe2\x80\xa65EdConverts a <code>CStr</code> into a borrowed <code>Cow</code> without copying or \xe2\x80\xa6FaCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to <code>Vec</code>.EeConverts a <code>CString</code> into an owned <code>Cow</code> without copying or \xe2\x80\xa6EgCreates an <code>Owned</code> variant of <code>Cow</code> from an owned instance of \xe2\x80\xa6EeConverts a <code>String</code> reference into a <code>Borrowed</code> variant. No \xe2\x80\xa6DiCreates a <code>Borrowed</code> variant of <code>Cow</code> from a slice.;DgConverts a <code>&amp;mut str</code> into a <code>Box&lt;str&gt;</code>DmConverts a <code>CString</code> into a Box&lt;CStr&gt; without copying or \xe2\x80\xa6EaConverts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>DdConverts a <code>String</code> into a box of dyn <code>Error</code>.DcConverts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>EaConverts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>DgConverts a <code>&amp;mut [T]</code> into a <code>Box&lt;[T]&gt;</code>DaConverts a <code>str</code> into a box of dyn <code>Error</code>.FiConverts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.DcConverts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>EdConverts the given <code>String</code> to a boxed <code>str</code> slice that is \xe2\x80\xa6CjConverts a <code>T</code> into a <code>Box&lt;T&gt;</code>DaConverts a <code>Cow</code> into a box of dyn <code>Error</code>.FgConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the \xe2\x80\xa6FbConverts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents \xe2\x80\xa6FiConverts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.DaConverts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>DkConverts a type of <code>Error</code> into a box of dyn <code>Error</code>.EmConverts a <code>&amp;mut CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the \xe2\x80\xa6FcConverts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn \xe2\x80\xa6FlConverts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.AoReturns the argument unchanged.BeConverts a vector into a boxed slice.DjConverts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>2DgAlways evaluates to <code>TryReserveErrorKind::CapacityOverflow</code>.33DmConverts a <code>Vec&lt;T&gt;</code> into a <code>BinaryHeap&lt;T&gt;</code>.4444444DgConverts a <code>[T; N]</code> into a <code>LinkedList&lt;T&gt;</code>.5555555555DeConverts a <code>[T; N]</code> into a <code>VecDeque&lt;T&gt;</code>.DgTurn a <code>Vec&lt;T&gt;</code> into a <code>VecDeque&lt;T&gt;</code>.77777DmConverts a <code>[(K, V); N]</code> into a <code>BTreeMap&lt;K, V&gt;</code>.8888888888888888888DeConverts a <code>[T; N]</code> into a <code>BTreeSet&lt;T&gt;</code>.999999999999CmCreates a reference-counted pointer from a clone-on-write \xe2\x80\xa6CdMove a boxed object to a new, reference counted, \xe2\x80\xa6DgConverts a generic type <code>T</code> into an <code>Rc&lt;T&gt;</code>DbConverts a <code>[T; N]</code> into an <code>Rc&lt;[T]&gt;</code>.EmConverts a <code>CString</code> into an Rc&lt;CStr&gt; by moving the <code>CString</code> \xe2\x80\xa6CgAllocates a reference-counted slice and fills it by \xe2\x80\xa60DhAllocates a reference-counted string slice and copies <code>v</code> \xe2\x80\xa600ElConverts a <code>&amp;mut CStr</code> into a <code>Rc&lt;CStr&gt;</code>, by copying the \xe2\x80\xa6AoReturns the argument unchanged.FaConverts a <code>&amp;CStr</code> into a <code>Rc&lt;CStr&gt;</code>, by copying the contents \xe2\x80\xa6DjAllocates a reference-counted slice and moves <code>v</code>\xe2\x80\x99s items \xe2\x80\xa6CiConverts a reference-counted string slice into a byte \xe2\x80\xa6333EcConverts the given boxed <code>str</code> slice to a <code>String</code>. It is \xe2\x80\xa64ClConverts a clone-on-write string to an owned instance of \xe2\x80\xa6CoAllocates an owned <code>String</code> from a single character.CoConverts a <code>&amp;String</code> into a <code>String</code>.D`Converts a <code>&amp;mut str</code> into a <code>String</code>.ClConverts a <code>&amp;str</code> into a <code>String</code>.999DgUnstable module containing the unstable <code>From</code> derive macro.::CdConverts a <code>u8</code> into a <code>char</code>.;;;;;;;;;;ChConverts <code>i8</code> to <code>f16</code> losslessly.EgConverts a <code>bool</code> to <code>f16</code> losslessly. The resulting value is \xe2\x80\xa6ChConverts <code>u8</code> to <code>f16</code> losslessly.ChConverts <code>i8</code> to <code>f32</code> losslessly.CiConverts <code>i16</code> to <code>f32</code> losslessly.EgConverts a <code>bool</code> to <code>f32</code> losslessly. The resulting value is \xe2\x80\xa6ChConverts <code>u8</code> to <code>f32</code> losslessly.CiConverts <code>u16</code> to <code>f32</code> losslessly.AoReturns the argument unchanged.0CiConverts <code>i32</code> to <code>f64</code> losslessly.EgConverts a <code>bool</code> to <code>f64</code> losslessly. The resulting value is \xe2\x80\xa6CiConverts <code>f32</code> to <code>f64</code> losslessly.CiConverts <code>f16</code> to <code>f64</code> losslessly.CiConverts <code>u32</code> to <code>f64</code> losslessly.ChConverts <code>i8</code> to <code>f64</code> losslessly.CiConverts <code>i16</code> to <code>f64</code> losslessly.CiConverts <code>u16</code> to <code>f64</code> losslessly.ChConverts <code>u8</code> to <code>f64</code> losslessly.EhConverts a <code>bool</code> to <code>f128</code> losslessly. The resulting value is \xe2\x80\xa6CjConverts <code>u32</code> to <code>f128</code> losslessly.CiConverts <code>u8</code> to <code>f128</code> losslessly.CjConverts <code>f64</code> to <code>f128</code> losslessly.CjConverts <code>i32</code> to <code>f128</code> losslessly.CjConverts <code>f32</code> to <code>f128</code> losslessly.CiConverts <code>i8</code> to <code>f128</code> losslessly.CjConverts <code>f16</code> to <code>f128</code> losslessly.CjConverts <code>u16</code> to <code>f128</code> losslessly.AoReturns the argument unchanged.CjConverts <code>i16</code> to <code>f128</code> losslessly.1FeConverts a <code>bool</code> to <code>i8</code> losslessly. The resulting value is <code>0</code> \xe2\x80\xa62ChConverts <code>u8</code> to <code>i16</code> losslessly.ChConverts <code>i8</code> to <code>i16</code> losslessly.FeConverts a <code>bool</code> to <code>i16</code> losslessly. The resulting value is <code>0</code>\xe2\x80\xa6CiConverts <code>i16</code> to <code>i32</code> losslessly.FeConverts a <code>bool</code> to <code>i32</code> losslessly. The resulting value is <code>0</code>\xe2\x80\xa6CiConverts <code>u16</code> to <code>i32</code> losslessly.ChConverts <code>u8</code> to <code>i32</code> losslessly.9ChConverts <code>i8</code> to <code>i32</code> losslessly.CiConverts <code>u32</code> to <code>i64</code> losslessly.FeConverts a <code>bool</code> to <code>i64</code> losslessly. The resulting value is <code>0</code>\xe2\x80\xa6CiConverts <code>u16</code> to <code>i64</code> losslessly.ChConverts <code>u8</code> to <code>i64</code> losslessly.>CiConverts <code>i32</code> to <code>i64</code> losslessly.CiConverts <code>i16</code> to <code>i64</code> losslessly.ChConverts <code>i8</code> to <code>i64</code> losslessly.AoReturns the argument unchanged.CjConverts <code>i32</code> to <code>i128</code> losslessly.CjConverts <code>u64</code> to <code>i128</code> losslessly.CiConverts <code>i8</code> to <code>i128</code> losslessly.CjConverts <code>u32</code> to <code>i128</code> losslessly.EhConverts a <code>bool</code> to <code>i128</code> losslessly. The resulting value is \xe2\x80\xa6CjConverts <code>i16</code> to <code>i128</code> losslessly.CjConverts <code>u16</code> to <code>i128</code> losslessly.CiConverts <code>u8</code> to <code>i128</code> losslessly.CjConverts <code>i64</code> to <code>i128</code> losslessly.9FeConverts a <code>bool</code> to <code>u8</code> losslessly. The resulting value is <code>0</code> \xe2\x80\xa6FeConverts a <code>bool</code> to <code>u16</code> losslessly. The resulting value is <code>0</code>\xe2\x80\xa6ChConverts <code>u8</code> to <code>u16</code> losslessly.<<DgUses <code>Ipv4Addr::to_bits</code> to convert an IPv4 address to a \xe2\x80\xa6CeConverts a <code>char</code> into a <code>u32</code>.ChConverts <code>u8</code> to <code>u32</code> losslessly.FeConverts a <code>bool</code> to <code>u32</code> losslessly. The resulting value is <code>0</code>\xe2\x80\xa6CiConverts <code>u16</code> to <code>u32</code> losslessly.ChConverts <code>u8</code> to <code>u64</code> losslessly.CeConverts a <code>char</code> into a <code>u64</code>.CiConverts <code>u32</code> to <code>u64</code> losslessly.AoReturns the argument unchanged.CiConverts <code>u16</code> to <code>u64</code> losslessly.FeConverts a <code>bool</code> to <code>u64</code> losslessly. The resulting value is <code>0</code>\xe2\x80\xa62DgUses <code>Ipv6Addr::to_bits</code> to convert an IPv6 address to a \xe2\x80\xa6CiConverts <code>u8</code> to <code>u128</code> losslessly.EhConverts a <code>bool</code> to <code>u128</code> losslessly. The resulting value is \xe2\x80\xa6CjConverts <code>u16</code> to <code>u128</code> losslessly.CjConverts <code>u32</code> to <code>u128</code> losslessly.CjConverts <code>u64</code> to <code>u128</code> losslessly.CfConverts a <code>char</code> into a <code>u128</code>.EfConverts a <code>bool</code> to <code>isize</code> losslessly. The resulting value \xe2\x80\xa6CjConverts <code>i8</code> to <code>isize</code> losslessly.CjConverts <code>u8</code> to <code>isize</code> losslessly.CkConverts <code>i16</code> to <code>isize</code> losslessly.=CjConverts <code>u8</code> to <code>usize</code> losslessly.CkConverts <code>u16</code> to <code>usize</code> losslessly.?EfConverts a <code>bool</code> to <code>usize</code> losslessly. The resulting value \xe2\x80\xa6AoReturns the argument unchanged.000000000000000000BjConverts to this type from the input type.11111111111111111111111111111111111111111111111111111111111111111111111111111111111111EeConverts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.CdMoves <code>val</code> into a new <code>Some</code>.ElConverts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>444444444DlCreates a new <code>UnsafePinned&lt;T&gt;</code> containing the given value.55DfConverts a <code>&amp;mut T</code> to a <code>NonNull&lt;T&gt;</code>.6DbConverts a <code>&amp;T</code> to a <code>NonNull&lt;T&gt;</code>.7777777777777777777777777777777777777777777777777777777777777777777777CmConverts a <code>bool</code> into an <code>AtomicBool</code>.8DgConverts a <code>*mut T</code> into an <code>AtomicPtr&lt;T&gt;</code>.99CjConverts an <code>i8</code> into an <code>AtomicI8</code>.:CjConverts an <code>u8</code> into an <code>AtomicU8</code>.;ClConverts an <code>i16</code> into an <code>AtomicI16</code>.ClConverts an <code>u16</code> into an <code>AtomicU16</code>.==ClConverts an <code>i32</code> into an <code>AtomicI32</code>.ClConverts an <code>u32</code> into an <code>AtomicU32</code>.??ClConverts an <code>i64</code> into an <code>AtomicI64</code>.AoReturns the argument unchanged.ClConverts an <code>u64</code> into an <code>AtomicU64</code>.D`Converts an <code>isize</code> into an <code>AtomicIsize</code>.2D`Converts an <code>usize</code> into an <code>AtomicUsize</code>.3ClConverts NonZero&lt;i8&gt; to NonZero&lt;i32&gt; losslessly.CmConverts NonZero&lt;u16&gt; to NonZero&lt;i64&gt; losslessly.CnConverts NonZero&lt;u32&gt; to NonZero&lt;i128&gt; losslessly.CmConverts NonZero&lt;u32&gt; to NonZero&lt;i64&gt; losslessly.CmConverts NonZero&lt;i16&gt; to NonZero&lt;i32&gt; losslessly.CmConverts NonZero&lt;i16&gt; to NonZero&lt;i64&gt; losslessly.CnConverts NonZero&lt;i16&gt; to NonZero&lt;i128&gt; losslessly.CoConverts NonZero&lt;i16&gt; to NonZero&lt;isize&gt; losslessly.CnConverts NonZero&lt;i8&gt; to NonZero&lt;isize&gt; losslessly.CmConverts NonZero&lt;i8&gt; to NonZero&lt;i128&gt; losslessly.ClConverts NonZero&lt;i8&gt; to NonZero&lt;i64&gt; losslessly.CnConverts NonZero&lt;u16&gt; to NonZero&lt;i128&gt; losslessly.ClConverts NonZero&lt;i8&gt; to NonZero&lt;i16&gt; losslessly.CnConverts NonZero&lt;u64&gt; to NonZero&lt;u128&gt; losslessly.CnConverts NonZero&lt;u32&gt; to NonZero&lt;u128&gt; losslessly.CmConverts NonZero&lt;u32&gt; to NonZero&lt;u64&gt; losslessly.CoConverts NonZero&lt;u16&gt; to NonZero&lt;usize&gt; losslessly.CnConverts NonZero&lt;u16&gt; to NonZero&lt;u128&gt; losslessly.CmConverts NonZero&lt;u16&gt; to NonZero&lt;u64&gt; losslessly.CmConverts NonZero&lt;u16&gt; to NonZero&lt;u32&gt; losslessly.CnConverts NonZero&lt;u64&gt; to NonZero&lt;i128&gt; losslessly.CmConverts NonZero&lt;u8&gt; to NonZero&lt;u128&gt; losslessly.ClConverts NonZero&lt;u8&gt; to NonZero&lt;u64&gt; losslessly.ClConverts NonZero&lt;u8&gt; to NonZero&lt;u32&gt; losslessly.ClConverts NonZero&lt;u8&gt; to NonZero&lt;u16&gt; losslessly.CmConverts NonZero&lt;i32&gt; to NonZero&lt;i64&gt; losslessly.CnConverts NonZero&lt;i32&gt; to NonZero&lt;i128&gt; losslessly.AoReturns the argument unchanged.CnConverts NonZero&lt;i64&gt; to NonZero&lt;i128&gt; losslessly.ClConverts NonZero&lt;u8&gt; to NonZero&lt;i16&gt; losslessly.ClConverts NonZero&lt;u8&gt; to NonZero&lt;i32&gt; losslessly.ClConverts NonZero&lt;u8&gt; to NonZero&lt;i64&gt; losslessly.CmConverts NonZero&lt;u8&gt; to NonZero&lt;i128&gt; losslessly.CnConverts NonZero&lt;u8&gt; to NonZero&lt;isize&gt; losslessly.CmConverts NonZero&lt;u16&gt; to NonZero&lt;i32&gt; losslessly.CnConverts NonZero&lt;u8&gt; to NonZero&lt;usize&gt; losslessly.888888888888888888EaCreates a new <code>OnceCell&lt;T&gt;</code> which already contains the given \xe2\x80\xa69DdCreates a new <code>Cell&lt;T&gt;</code> containing the given value.DgCreates a new <code>RefCell&lt;T&gt;</code> containing the given value.;;;DjCreates a new <code>UnsafeCell&lt;T&gt;</code> containing the given value.<DnCreates a new <code>SyncUnsafeCell&lt;T&gt;</code> containing the given value.=====DeCreates an <code>IpAddr::V6</code> from a sixteen element byte array.DfCreates an <code>IpAddr::V6</code> from an eight element 16-bit array.DbCreates an <code>IpAddr::V4</code> from a four element byte array.CeCopies this address to a new <code>IpAddr::V6</code>.CeCopies this address to a new <code>IpAddr::V4</code>.AoReturns the argument unchanged.0EgUses <code>Ipv4Addr::from_bits</code> to convert a host byte order <code>u32</code> \xe2\x80\xa6D`Creates an <code>Ipv4Addr</code> from a four element byte array.DcCreates an <code>Ipv6Addr</code> from a sixteen element byte array.DdCreates an <code>Ipv6Addr</code> from an eight element 16-bit array.4EhUses <code>Ipv6Addr::from_bits</code> to convert a host byte order <code>u128</code> \xe2\x80\xa655DhConverts a <code>SocketAddrV4</code> into a <code>SocketAddr::V4</code>.6EfConverts a tuple struct (Into&lt;<code>IpAddr</code>&gt;, <code>u16</code>) into a \xe2\x80\xa6DhConverts a <code>SocketAddrV6</code> into a <code>SocketAddr::V6</code>.88888888888888EeMoves the value into a <code>Poll::Ready</code> to make a <code>Poll&lt;T&gt;</code>.999CbCreates a ContextBuilder from an existing Context.::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::DgUnstable module containing the unstable <code>From</code> derive macro.;;CdConverts a <code>u8</code> into a <code>char</code>.<<<<<<<<<ChConverts <code>u8</code> to <code>f16</code> losslessly.=EgConverts a <code>bool</code> to <code>f16</code> losslessly. The resulting value is \xe2\x80\xa6ChConverts <code>i8</code> to <code>f16</code> losslessly.?CiConverts <code>u16</code> to <code>f32</code> losslessly.EgConverts a <code>bool</code> to <code>f32</code> losslessly. The resulting value is \xe2\x80\xa6ChConverts <code>i8</code> to <code>f32</code> losslessly.ChConverts <code>u8</code> to <code>f32</code> losslessly.CiConverts <code>i16</code> to <code>f32</code> losslessly.CiConverts <code>i32</code> to <code>f64</code> losslessly.AoReturns the argument unchanged.CiConverts <code>u16</code> to <code>f64</code> losslessly.EgConverts a <code>bool</code> to <code>f64</code> losslessly. The resulting value is \xe2\x80\xa6CiConverts <code>u32</code> to <code>f64</code> losslessly.CiConverts <code>f16</code> to <code>f64</code> losslessly.CiConverts <code>f32</code> to <code>f64</code> losslessly.ChConverts <code>u8</code> to <code>f64</code> losslessly.ChConverts <code>i8</code> to <code>f64</code> losslessly.CiConverts <code>i16</code> to <code>f64</code> losslessly.CiConverts <code>i8</code> to <code>f128</code> losslessly.9CjConverts <code>i32</code> to <code>f128</code> losslessly.CjConverts <code>i16</code> to <code>f128</code> losslessly.CiConverts <code>u8</code> to <code>f128</code> losslessly.CjConverts <code>f16</code> to <code>f128</code> losslessly.CjConverts <code>u32</code> to <code>f128</code> losslessly.CjConverts <code>f32</code> to <code>f128</code> losslessly.CjConverts <code>u16</code> to <code>f128</code> losslessly.CjConverts <code>f64</code> to <code>f128</code> losslessly.EhConverts a <code>bool</code> to <code>f128</code> losslessly. The resulting value is \xe2\x80\xa6AoReturns the argument unchanged.FeConverts a <code>bool</code> to <code>i8</code> losslessly. The resulting value is <code>0</code> \xe2\x80\xa6FeConverts a <code>bool</code> to <code>i16</code> losslessly. The resulting value is <code>0</code>\xe2\x80\xa6ChConverts <code>i8</code> to <code>i16</code> losslessly.3ChConverts <code>u8</code> to <code>i16</code> losslessly.FeConverts a <code>bool</code> to <code>i32</code> losslessly. The resulting value is <code>0</code>\xe2\x80\xa6ChConverts <code>u8</code> to <code>i32</code> losslessly.6ChConverts <code>i8</code> to <code>i32</code> losslessly.CiConverts <code>i16</code> to <code>i32</code> losslessly.CiConverts <code>u16</code> to <code>i32</code> losslessly.FeConverts a <code>bool</code> to <code>i64</code> losslessly. The resulting value is <code>0</code>\xe2\x80\xa6:ChConverts <code>i8</code> to <code>i64</code> losslessly.CiConverts <code>u32</code> to <code>i64</code> losslessly.CiConverts <code>i16</code> to <code>i64</code> losslessly.CiConverts <code>u16</code> to <code>i64</code> losslessly.CiConverts <code>i32</code> to <code>i64</code> losslessly.ChConverts <code>u8</code> to <code>i64</code> losslessly.CjConverts <code>i16</code> to <code>i128</code> losslessly.EhConverts a <code>bool</code> to <code>i128</code> losslessly. The resulting value is \xe2\x80\xa6CjConverts <code>i64</code> to <code>i128</code> losslessly.CjConverts <code>i32</code> to <code>i128</code> losslessly.AoReturns the argument unchanged.CiConverts <code>u8</code> to <code>i128</code> losslessly.CjConverts <code>u16</code> to <code>i128</code> losslessly.CiConverts <code>i8</code> to <code>i128</code> losslessly.CjConverts <code>u32</code> to <code>i128</code> losslessly.CjConverts <code>u64</code> to <code>i128</code> losslessly.FeConverts a <code>bool</code> to <code>u8</code> losslessly. The resulting value is <code>0</code> \xe2\x80\xa666ChConverts <code>u8</code> to <code>u16</code> losslessly.FeConverts a <code>bool</code> to <code>u16</code> losslessly. The resulting value is <code>0</code>\xe2\x80\xa6ChConverts <code>u8</code> to <code>u32</code> losslessly.CiConverts <code>u16</code> to <code>u32</code> losslessly.CeConverts a <code>char</code> into a <code>u32</code>.DgUses <code>Ipv4Addr::to_bits</code> to convert an IPv4 address to a \xe2\x80\xa6FeConverts a <code>bool</code> to <code>u32</code> losslessly. The resulting value is <code>0</code>\xe2\x80\xa6=CiConverts <code>u16</code> to <code>u64</code> losslessly.CiConverts <code>u32</code> to <code>u64</code> losslessly.FeConverts a <code>bool</code> to <code>u64</code> losslessly. The resulting value is <code>0</code>\xe2\x80\xa6ChConverts <code>u8</code> to <code>u64</code> losslessly.CeConverts a <code>char</code> into a <code>u64</code>.AoReturns the argument unchanged.CiConverts <code>u8</code> to <code>u128</code> losslessly.EhConverts a <code>bool</code> to <code>u128</code> losslessly. The resulting value is \xe2\x80\xa62CfConverts a <code>char</code> into a <code>u128</code>.CjConverts <code>u32</code> to <code>u128</code> losslessly.CjConverts <code>u16</code> to <code>u128</code> losslessly.CjConverts <code>u64</code> to <code>u128</code> losslessly.DgUses <code>Ipv6Addr::to_bits</code> to convert an IPv6 address to a \xe2\x80\xa6CjConverts <code>i8</code> to <code>isize</code> losslessly.EfConverts a <code>bool</code> to <code>isize</code> losslessly. The resulting value \xe2\x80\xa69CkConverts <code>i16</code> to <code>isize</code> losslessly.CjConverts <code>u8</code> to <code>isize</code> losslessly.;EfConverts a <code>bool</code> to <code>usize</code> losslessly. The resulting value \xe2\x80\xa6CkConverts <code>u16</code> to <code>usize</code> losslessly.CjConverts <code>u8</code> to <code>usize</code> losslessly.>>>>>>>>>>>>>>>>>>>>>BjConverts to this type from the input type.????????FbConverts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into an <code>OsString</code>, by copying the \xe2\x80\xa6AoReturns the argument unchanged.E`Converts a Box&lt;OsStr&gt; into an <code>OsString</code> without copying or \xe2\x80\xa6DaCopies any value implementing AsRef&lt;OsStr&gt; into a newly \xe2\x80\xa6CmConverts a <code>String</code> into an <code>OsString</code>.CmConverts a <code>PathBuf</code> into an <code>OsString</code>4EoConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>CString</code>, by copying the \xe2\x80\xa65DmConverts a Box&lt;CStr&gt; into a <code>CString</code> without copying or \xe2\x80\xa6EgConverts a Vec&lt;NonZero&lt;u8&gt;&gt; into a <code>CString</code> without copying \xe2\x80\xa6DlConverts a &amp;CStr into a <code>CString</code> by copying the contents \xe2\x80\xa68888888888888888888888888888888888888888888888888888888888888888888888888888888888888888EeConverts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.9CdMoves <code>val</code> into a new <code>Some</code>.ElConverts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>;;;;;;;;CjConverts a <code>String</code> into a <code>PathBuf</code>CnConverts an <code>OsString</code> into a <code>PathBuf</code>.DaConverts a borrowed <code>OsStr</code> to a <code>PathBuf</code>.CgConverts a Box&lt;Path&gt; into a <code>PathBuf</code>.CcConverts a clone-on-write pointer to an owned path.AoReturns the argument unchanged.000000000DlCreates a new <code>UnsafePinned&lt;T&gt;</code> containing the given value.G`Converts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not \xe2\x80\xa6222DfConverts a <code>&amp;mut T</code> to a <code>NonNull&lt;T&gt;</code>.DbConverts a <code>&amp;T</code> to a <code>NonNull&lt;T&gt;</code>.44444444444444444444444444444444444444444444444444444444444444444444EnConverts a <code>PathBuf</code> into an Arc&lt;Path&gt; by moving the <code>PathBuf</code> \xe2\x80\xa6DcConverts a <code>[T; N]</code> into an <code>Arc&lt;[T]&gt;</code>.EaAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.00EnConverts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> \xe2\x80\xa6CkMove a boxed object to a new, reference-counted allocation.FbConverts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents \xe2\x80\xa6DjAllocates a reference-counted slice and moves <code>v</code>\xe2\x80\x99s items \xe2\x80\xa6CnConverts an atomically reference-counted string slice into \xe2\x80\xa6CjCreates an atomically reference-counted pointer from a \xe2\x80\xa6CgAllocates a reference-counted slice and fills it by \xe2\x80\xa60>FdConverts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into \xe2\x80\xa6CjCopies the string into a newly allocated Arc&lt;OsStr&gt;.01EmConverts a <code>&amp;mut CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the \xe2\x80\xa6DlConverts an <code>OsString</code> into an Arc&lt;OsStr&gt; by moving the \xe2\x80\xa6CkConverts a <code>T</code> into an <code>Arc&lt;T&gt;</code>AoReturns the argument unchanged.000CkCreates a new mutex in an unlocked state ready for use. \xe2\x80\xa6111E`Creates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked. \xe2\x80\xa622222CoCreates a new cell with its contents set to <code>value</code>.333333333333CmConverts a <code>bool</code> into an <code>AtomicBool</code>.DgConverts a <code>*mut T</code> into an <code>AtomicPtr&lt;T&gt;</code>.555CjConverts an <code>i8</code> into an <code>AtomicI8</code>.CjConverts an <code>u8</code> into an <code>AtomicU8</code>.7ClConverts an <code>i16</code> into an <code>AtomicI16</code>.88ClConverts an <code>u16</code> into an <code>AtomicU16</code>.ClConverts an <code>i32</code> into an <code>AtomicI32</code>.:ClConverts an <code>u32</code> into an <code>AtomicU32</code>.;ClConverts an <code>i64</code> into an <code>AtomicI64</code>.<ClConverts an <code>u64</code> into an <code>AtomicU64</code>.==D`Converts an <code>isize</code> into an <code>AtomicIsize</code>.D`Converts an <code>usize</code> into an <code>AtomicUsize</code>.????????????????DcConverts a <code>RecvError</code> into a <code>TryRecvError</code>.AoReturns the argument unchanged.DgConverts a <code>RecvError</code> into a <code>RecvTimeoutError</code>.1EeConverts a <code>SendError&lt;T&gt;</code> into a <code>TrySendError&lt;T&gt;</code>.222CkCreates a new mutex in an unlocked state ready for use. \xe2\x80\xa6E`Creates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked. \xe2\x80\xa64444444444444444444DhAllocates a <code>Vec&lt;u8&gt;</code> and fills it with a UTF-8 string.DgTurn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.EgAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>\xe2\x80\x99s items.DmConverts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.CeConverts a <code>CString</code> into a Vec&lt;u8&gt;.EbConverts the given <code>String</code> to a vector <code>Vec</code> that holds \xe2\x80\xa6ChConverts a boxed slice into a vector by transferring \xe2\x80\xa64BnConverts a clone-on-write slice into a vector.55EaAllocates a <code>Vec&lt;T&gt;</code> and moves <code>s</code>\xe2\x80\x99s items into it.==========EaCreates a new <code>OnceCell&lt;T&gt;</code> which already contains the given \xe2\x80\xa6DdCreates a new <code>Cell&lt;T&gt;</code> containing the given value.??DgCreates a new <code>RefCell&lt;T&gt;</code> containing the given value.AoReturns the argument unchanged.0DjCreates a new <code>UnsafeCell&lt;T&gt;</code> containing the given value.1DnCreates a new <code>SyncUnsafeCell&lt;T&gt;</code> containing the given value.22222222222222FiConverts a <code>&amp;</code><code>CString</code> into a borrowed <code>Cow</code> without copying or \xe2\x80\xa6C`Moves the string into a <code>Cow::Owned</code>.DgCreates a clone-on-write pointer from a reference to <code>Path</code>.CnCreates a clone-on-write pointer from an owned instance of \xe2\x80\xa6DnConverts a <code>String</code> into an <code>Owned</code> variant. No heap \xe2\x80\xa6D`Converts the string reference into a <code>Cow::Borrowed</code>.ChCreates a clone-on-write pointer from a reference to \xe2\x80\xa6FaCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to <code>Vec</code>.EeConverts a <code>String</code> reference into a <code>Borrowed</code> variant. No \xe2\x80\xa6EfCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to an \xe2\x80\xa6EdConverts a <code>CStr</code> into a borrowed <code>Cow</code> without copying or \xe2\x80\xa6EeConverts a <code>CString</code> into an owned <code>Cow</code> without copying or \xe2\x80\xa6>DiConverts a string slice into a <code>Borrowed</code> variant. No heap \xe2\x80\xa67EgCreates an <code>Owned</code> variant of <code>Cow</code> from an owned instance of \xe2\x80\xa6DiCreates a <code>Borrowed</code> variant of <code>Cow</code> from a slice.AoReturns the argument unchanged.FgConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the \xe2\x80\xa6FiConverts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.DaConverts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>EaConverts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>BeConverts a vector into a boxed slice.EmConverts a <code>&amp;mut CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the \xe2\x80\xa6FbConverts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents \xe2\x80\xa67DgConverts a <code>&amp;mut str</code> into a <code>Box&lt;str&gt;</code>DcConverts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>CjCopies the string into a newly allocated Box&lt;OsStr&gt;.0DkConverts a type of <code>Error</code> into a box of dyn <code>Error</code>.EaConverts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>DmConverts a <code>CString</code> into a Box&lt;CStr&gt; without copying or \xe2\x80\xa6E`Converts an <code>OsString</code> into a Box&lt;OsStr&gt; without copying or \xe2\x80\xa6CgConverts a <code>PathBuf</code> into a Box&lt;Path&gt;.D`Creates a boxed <code>Path</code> from a clone-on-write pointer.CcCreates a boxed <code>Path</code> from a reference.0FcConverts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn \xe2\x80\xa6DjConverts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>DaConverts a <code>Cow</code> into a box of dyn <code>Error</code>.CjConverts a <code>T</code> into a <code>Box&lt;T&gt;</code>DcConverts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>DgConverts a <code>&amp;mut [T]</code> into a <code>Box&lt;[T]&gt;</code>FlConverts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.DdConverts a <code>String</code> into a box of dyn <code>Error</code>.FiConverts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.EdConverts the given <code>String</code> to a boxed <code>str</code> slice that is \xe2\x80\xa6DaConverts a <code>str</code> into a box of dyn <code>Error</code>.EhConverts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into a Box&lt;OsStr&gt;, by copying \xe2\x80\xa6DgConverts a generic type <code>T</code> into an <code>Rc&lt;T&gt;</code>CdMove a boxed object to a new, reference counted, \xe2\x80\xa6CgAllocates a reference-counted slice and fills it by \xe2\x80\xa6FeConverts a <code>Path</code> into an <code>Rc</code> by copying the <code>Path</code> data into a \xe2\x80\xa60CiConverts a reference-counted string slice into a byte \xe2\x80\xa6CmCreates a reference-counted pointer from a clone-on-write \xe2\x80\xa6EmConverts a <code>CString</code> into an Rc&lt;CStr&gt; by moving the <code>CString</code> \xe2\x80\xa6FaConverts a <code>&amp;CStr</code> into a <code>Rc&lt;CStr&gt;</code>, by copying the contents \xe2\x80\xa6CiCopies the string into a newly allocated Rc&lt;OsStr&gt;.0DkConverts an <code>OsString</code> into an Rc&lt;OsStr&gt; by moving the \xe2\x80\xa6DjAllocates a reference-counted slice and moves <code>v</code>\xe2\x80\x99s items \xe2\x80\xa6EmConverts a <code>PathBuf</code> into an Rc&lt;Path&gt; by moving the <code>PathBuf</code> \xe2\x80\xa69DhAllocates a reference-counted string slice and copies <code>v</code> \xe2\x80\xa600DbConverts a <code>[T; N]</code> into an <code>Rc&lt;[T]&gt;</code>.ElConverts a <code>&amp;mut CStr</code> into a <code>Rc&lt;CStr&gt;</code>, by copying the \xe2\x80\xa6AoReturns the argument unchanged.000CoAllocates an owned <code>String</code> from a single character.ClConverts a <code>&amp;str</code> into a <code>String</code>.CoConverts a <code>&amp;String</code> into a <code>String</code>.EcConverts the given boxed <code>str</code> slice to a <code>String</code>. It is \xe2\x80\xa6ClConverts a clone-on-write string to an owned instance of \xe2\x80\xa65D`Converts a <code>&amp;mut str</code> into a <code>String</code>.666666DlConverts a <code>[(K, V); N]</code> into a <code>HashMap&lt;K, V&gt;</code>.DmConverts a <code>Vec&lt;T&gt;</code> into a <code>BinaryHeap&lt;T&gt;</code>.8DdConverts a <code>[T; N]</code> into a <code>HashSet&lt;T&gt;</code>.9DmConverts a <code>[(K, V); N]</code> into a <code>BTreeMap&lt;K, V&gt;</code>.:DeConverts a <code>[T; N]</code> into a <code>BTreeSet&lt;T&gt;</code>.;;DgConverts a <code>[T; N]</code> into a <code>LinkedList&lt;T&gt;</code>.DeConverts a <code>[T; N]</code> into a <code>VecDeque&lt;T&gt;</code>.DgTurn a <code>Vec&lt;T&gt;</code> into a <code>VecDeque&lt;T&gt;</code>.>>>DgAlways evaluates to <code>TryReserveErrorKind::CapacityOverflow</code>.???????????????????????????????????????????????????????????????????????????DfReturns a <code>File</code> that takes ownership of the given file \xe2\x80\xa6DeReturns a <code>File</code> that takes ownership of the given handle.AoReturns the argument unchanged.00000000000000CnConverts an <code>ErrorKind</code> into an <code>Error</code>.CjConverts <code>TryReserveError</code> to an error with \xe2\x80\xa6DgConverts a <code>alloc::ffi::NulError</code> into a <code>Error</code>.333333333333333333333333333333DeCreates an <code>IpAddr::V6</code> from a sixteen element byte array.DfCreates an <code>IpAddr::V6</code> from an eight element 16-bit array.5CeCopies this address to a new <code>IpAddr::V6</code>.DbCreates an <code>IpAddr::V4</code> from a four element byte array.CeCopies this address to a new <code>IpAddr::V4</code>.D`Creates an <code>Ipv4Addr</code> from a four element byte array.9EgUses <code>Ipv4Addr::from_bits</code> to convert a host byte order <code>u32</code> \xe2\x80\xa6EhUses <code>Ipv6Addr::from_bits</code> to convert a host byte order <code>u128</code> \xe2\x80\xa6DcCreates an <code>Ipv6Addr</code> from a sixteen element byte array.DdCreates an <code>Ipv6Addr</code> from an eight element 16-bit array.====EfConverts a tuple struct (Into&lt;<code>IpAddr</code>&gt;, <code>u16</code>) into a \xe2\x80\xa6DhConverts a <code>SocketAddrV4</code> into a <code>SocketAddr::V4</code>.DhConverts a <code>SocketAddrV6</code> into a <code>SocketAddr::V6</code>.AoReturns the argument unchanged.0CmConverts NonZero&lt;u32&gt; to NonZero&lt;u64&gt; losslessly.CmConverts NonZero&lt;u8&gt; to NonZero&lt;i128&gt; losslessly.CnConverts NonZero&lt;u64&gt; to NonZero&lt;i128&gt; losslessly.CoConverts NonZero&lt;i16&gt; to NonZero&lt;isize&gt; losslessly.CmConverts NonZero&lt;i32&gt; to NonZero&lt;i64&gt; losslessly.CnConverts NonZero&lt;i32&gt; to NonZero&lt;i128&gt; losslessly.CnConverts NonZero&lt;i64&gt; to NonZero&lt;i128&gt; losslessly.ClConverts NonZero&lt;u8&gt; to NonZero&lt;i16&gt; losslessly.ClConverts NonZero&lt;u8&gt; to NonZero&lt;i32&gt; losslessly.9ClConverts NonZero&lt;u8&gt; to NonZero&lt;u16&gt; losslessly.ClConverts NonZero&lt;u8&gt; to NonZero&lt;u32&gt; losslessly.ClConverts NonZero&lt;u8&gt; to NonZero&lt;u64&gt; losslessly.CmConverts NonZero&lt;u8&gt; to NonZero&lt;u128&gt; losslessly.CnConverts NonZero&lt;u32&gt; to NonZero&lt;i128&gt; losslessly.CnConverts NonZero&lt;u8&gt; to NonZero&lt;usize&gt; losslessly.ClConverts NonZero&lt;u8&gt; to NonZero&lt;i64&gt; losslessly.CmConverts NonZero&lt;u16&gt; to NonZero&lt;u32&gt; losslessly.CmConverts NonZero&lt;u16&gt; to NonZero&lt;u64&gt; losslessly.CnConverts NonZero&lt;u16&gt; to NonZero&lt;u128&gt; losslessly.CmConverts NonZero&lt;u32&gt; to NonZero&lt;i64&gt; losslessly.CnConverts NonZero&lt;i16&gt; to NonZero&lt;i128&gt; losslessly.CnConverts NonZero&lt;u32&gt; to NonZero&lt;u128&gt; losslessly.CnConverts NonZero&lt;u64&gt; to NonZero&lt;u128&gt; losslessly.ClConverts NonZero&lt;i8&gt; to NonZero&lt;i16&gt; losslessly.ClConverts NonZero&lt;i8&gt; to NonZero&lt;i32&gt; losslessly.ClConverts NonZero&lt;i8&gt; to NonZero&lt;i64&gt; losslessly.CmConverts NonZero&lt;i8&gt; to NonZero&lt;i128&gt; losslessly.CnConverts NonZero&lt;i8&gt; to NonZero&lt;isize&gt; losslessly.CmConverts NonZero&lt;i16&gt; to NonZero&lt;i32&gt; losslessly.CmConverts NonZero&lt;i16&gt; to NonZero&lt;i64&gt; losslessly.CnConverts NonZero&lt;u16&gt; to NonZero&lt;i128&gt; losslessly.CmConverts NonZero&lt;u16&gt; to NonZero&lt;i64&gt; losslessly.CmConverts NonZero&lt;u16&gt; to NonZero&lt;i32&gt; losslessly.CnConverts NonZero&lt;u8&gt; to NonZero&lt;isize&gt; losslessly.CoConverts NonZero&lt;u16&gt; to NonZero&lt;usize&gt; losslessly.AoReturns the argument unchanged.00000000000000000000CmTakes ownership of a <code>ChildStdin</code>\xe2\x80\x99s file handle.1CnTakes ownership of a <code>ChildStderr</code>\xe2\x80\x99s file handle.CnTakes ownership of a <code>ChildStdout</code>\xe2\x80\x99s file handle.CkTakes ownership of a <code>Child</code>\xe2\x80\x99s process handle.DbTakes ownership of a <code>File</code>\xe2\x80\x99s underlying file handle.CiTakes ownership of a <code>TcpListener</code>\xe2\x80\x99s socket.CgTakes ownership of a <code>TcpStream</code>\xe2\x80\x99s socket.7DbTakes ownership of a <code>UdpSocket</code>\xe2\x80\x99s underlying socket.8888888888DfTakes ownership of a <code>File</code>\xe2\x80\x99s underlying file descriptor.DaTakes ownership of a <code>TcpListener</code>\xe2\x80\x99s socket file \xe2\x80\xa6DbTakes ownership of a <code>ChildStderr</code>\xe2\x80\x99s file descriptor.;DbTakes ownership of a <code>UnixDatagram</code>\xe2\x80\x99s socket file \xe2\x80\xa6D`Takes ownership of a <code>UdpSocket</code>\xe2\x80\x99s file descriptor.DaTakes ownership of a <code>ChildStdin</code>\xe2\x80\x99s file descriptor.DbTakes ownership of a <code>ChildStdout</code>\xe2\x80\x99s file descriptor.DhTakes ownership of a <code>UnixStream</code>\xe2\x80\x99s socket file descriptor.DbTakes ownership of a <code>UnixListener</code>\xe2\x80\x99s socket file \xe2\x80\xa6DgTakes ownership of a <code>TcpStream</code>\xe2\x80\x99s socket file descriptor.AoReturns the argument unchanged.000000CgConverts a <code>File</code> into a <code>Stdio</code>.CnConverts a <code>ChildStdout</code> into a <code>Stdio</code>.BlRedirect command stdout/stderr to our stdoutBlRedirect command stdout/stderr to our stderrCmConverts a <code>ChildStdin</code> into a <code>Stdio</code>.CnConverts a <code>ChildStderr</code> into a <code>Stdio</code>.DiTakes ownership of a handle and returns a <code>Stdio</code> that can \xe2\x80\xa67DiTakes ownership of a file descriptor and returns a <code>Stdio</code> \xe2\x80\xa688888CoConstructs an <code>ExitCode</code> from an arbitrary u8 value.9999999CjUse a <code>Wake</code>-able type as a <code>Waker</code>.CoUse a <code>Wake</code>-able type as a <code>LocalWaker</code>.;EeMoves the value into a <code>Poll::Ready</code> to make a <code>Poll&lt;T&gt;</code>.<<CmUse a <code>Wake</code>-able type as a <code>RawWaker</code>.0=CbCreates a ContextBuilder from an existing Context.>>>>>>>>>>>>>>>>>>>>>>>D`Reads the floating-point rounding mode register <code>frm</code>0DaCreates an iterator which ends after the first <code>None</code>.00BdAttempts to extend the memory block.00AhGeneric hashing support.CdFeeds this value into the given <code>Hasher</code>.AcHash a raw pointer.210DeAdds a new child diagnostic message to <code>self</code> with the \xe2\x80\xa6EeCreates a new <code>Diagnostic</code> with the given <code>message</code> at the spanCmHints to compiler that affects how code should be emitted \xe2\x80\xa60B`The 128-bit signed integer type.DdRedundant constants module for the <code>i128</code> primitive type.10CgA SIMD vector with one element of type <code>i8</code>.00ChA SIMD vector with two elements of type <code>i8</code>.00CiA SIMD vector with four elements of type <code>i8</code>.00CjA SIMD vector with eight elements of type <code>i8</code>.00CcGenerates the instruction-fetch barrier instruction0CjReturns the logarithm of the number with respect to an \xe2\x80\xa600000000000000000000000CjImplementations of functionality for a type, or a type \xe2\x80\xa6BaCalls <code>U::from(self)</code>.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CjConverts this type into the (usually inferred) input type.11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111CmReturns an iterator visiting all values in the underlying \xe2\x80\xa6AlProvides a forward iterator.BaReturns a front-to-back iterator.CkGets an iterator over the entries of the map, sorted by \xe2\x80\xa6DjGets an iterator that visits the elements in the <code>BTreeSet</code> \xe2\x80\xa6AnComposable external iteration.BcReturns an iterator over the slice.CmCreates a new closure that returns an iterator where each \xe2\x80\xa6CfReturns an iterator over the possibly contained value.0ChCreates an iterator over the elements within this range.004321ClProduces an iterator over the path\xe2\x80\x99s components viewed \xe2\x80\xa62CmReturns an iterator that will block waiting for messages, \xe2\x80\xa60222CiAn iterator visiting all key-value pairs in arbitrary \xe2\x80\xa6<CmAn iterator visiting all elements in arbitrary order. The \xe2\x80\xa6:9<;CfCallback for benchmark functions to run in their body.BhImplementation of <code>[T]::join</code>ClPolls multiple futures simultaneously, returning a tuple \xe2\x80\xa6DiCreates a new span encompassing <code>self</code> and <code>other</code>.EeFlattens a slice of <code>T</code> into a single value <code>Self::Output</code>, \xe2\x80\xa62EkCreates an owned <code>PathBuf</code> with <code>path</code> adjoined to <code>self</code>.4BjWaits for the associated thread to finish.0CkGets an iterator over the keys of the map, in sorted order.CiAn iterator visiting all keys in arbitrary order. The \xe2\x80\xa61BaForces the child process to exit.CnForces the child process to exit. If the child has already \xe2\x80\xa6CbDetails about the allocation that caused the errorCiOutputs the detailed cause of parsing an integer failing.AoReturns the parsed prefix data.2D`Returns the corresponding <code>ErrorKind</code> for this error.2CkReturns a reference to the last element in the set, if any.DhReturns the last element of the slice, or <code>None</code> if it is \xe2\x80\xa6CbConsumes the iterator, returning the last element.0102DjConsumes and leaks the <code>Vec</code>, returning a mutable reference \xe2\x80\xa6DkConsumes and leaks the <code>Box</code>, returning a mutable reference, \xe2\x80\xa6DcConsumes and leaks the <code>String</code>, returning a mutable \xe2\x80\xa6CaConverts into a reference to the underlying data.CiConverts into a mutable reference to the underlying data.DeConsumes and leaks the <code>OsString</code>, returning a mutable \xe2\x80\xa6DdConsumes and leaks the <code>PathBuf</code>, returning a mutable \xe2\x80\xa663254CcExpands to the line number on which it was invoked.ChReturns the line number from which the panic originated.CjThe one-indexed line of the source file where the span \xe2\x80\xa621AdCreates a hard link.AlLoads a value from the bool.AoLoads a value from the pointer.BfLoads a value from the atomic integer.000000000210000000000CmAcquires a mutex, blocking the current thread until it is \xe2\x80\xa6CnAcquires the lock, blocking the current thread until it is \xe2\x80\xa61CkAcquire an exclusive lock on the file. Blocks until the \xe2\x80\xa6CmLocks this handle to the standard input stream, returning \xe2\x80\xa6CnLocks this handle to the standard output stream, returning \xe2\x80\xa6CmLocks this handle to the standard error stream, returning \xe2\x80\xa6BnReturns the base-2 logarithm of the alignment.BkReturns the base 2 logarithm of the number.0001ChProduces a vector where every element has the base-2 \xe2\x80\xa6AbLoop indefinitely.Dd128-bit wide set of four <code>f32</code> values, LoongArch-specificDe256-bit wide set of eight <code>f32</code> values, LoongArch-specificCbMasks out bits of the pointer according to a mask.0CeReturns a bit mask that can be used to match this \xe2\x80\xa6110ClExperimental implementations of floating point functions \xe2\x80\xa60ClArithmetic mean (average) of the samples: sum divided by \xe2\x80\xa6D`Platform-specific intrinsics for the <code>mips</code> platform.B`Returns the mode permission bitsChSets the mode bits that a new file will be created with.BhReturns the rights applied to this file.CmSets the mode to create new directories with. This option \xe2\x80\xa6BkCapture a closure\xe2\x80\x99s environment by value.CkMulti-producer, multi-consumer FIFO queue communication \xe2\x80\xa6ClMulti-producer, single-consumer FIFO queue communication \xe2\x80\xa6DnReturns the <code>st_mtim</code> field of the internal <code>filestat_t</code>CjNames the thread-to-be. Currently the name is used for \xe2\x80\xa6AiGets the thread\xe2\x80\x99s name.CfPerforms the next search step starting from the front.CnAdvances the cursor to the next gap, returning the key and \xe2\x80\xa600CnAdvances the cursor to the next gap, returning the element \xe2\x80\xa6CgAdvances the cursor to the next gap, returning the  \xe2\x80\xa61CaAdvances the iterator and returns the next value.AaOverflow Behavior5105444323DhReturns a reference to a <code>Waker</code> that does nothing when used.DkReturns a reference to a <code>LocalWaker</code> that does nothing when \xe2\x80\xa610DeAdds a new child diagnostic message to <code>self</code> with the \xe2\x80\xa6EeCreates a new <code>Diagnostic</code> with the given <code>message</code> at the spanAkCreates a null raw pointer.0CjThis stream will be ignored. This is the equivalent of \xe2\x80\xa6ChCreates an iterator that yields an element exactly once.0BjAttempts to open a file in read-only mode.EbOpens a file at <code>path</code> with the options specified by <code>self</code>.BmCreates an unnamed pair of connected sockets.0CjBlocks unless or until the current thread\xe2\x80\x99s token is \xe2\x80\xa6AhTrack a file explicitly.BaCross-platform path manipulation.CeReturns the full path to the file that this entry \xe2\x80\xa6DiReturns the greatest item in the binary heap, or <code>None</code> if \xe2\x80\xa6CmReturns a reference to the next() value without advancing \xe2\x80\xa601BkAttempt to look ahead <code>n</code> bytes.CjReceives data on the socket from the remote address to \xe2\x80\xa6CjReceives single datagram on the socket from the remote \xe2\x80\xa611AjCreates an anonymous pipe.CdAttempts to resolve the future to a final value, \xe2\x80\xa60CgReturns the port number associated with this socket \xe2\x80\xa600000BjRaises a number to a floating point power.000BdRaises a number to an integer power.0FbExperimental version of <code>powi</code> in <code>core</code>. See <code>f32::powi</code> for \xe2\x80\xa6FbExperimental version of <code>powi</code> in <code>core</code>. See <code>f64::powi</code> for \xe2\x80\xa62222CnAdvances the cursor to the previous gap, returning the key \xe2\x80\xa600CjAdvances the cursor to the previous gap, returning the \xe2\x80\xa600111000BoAppends an element to the back of a collection.BdPushes an item onto the binary heap.DkAppends the given <code>char</code> to the end of this <code>String</code>.CcExtends the string with the given &amp;OsStr slice.CaExtends <code>self</code> with <code>path</code>.423CjReturns the device ID of this file (if it is a special \xe2\x80\xa6DiReads the value from <code>self</code> without moving it. This leaves \xe2\x80\xa60DhReads the value from <code>src</code> without moving it. This leaves the11101DhLocks this <code>RwLock</code> with shared read access, blocking the \xe2\x80\xa60DgFill <code>buf</code> with the contents of the \xe2\x80\x9cfront\xe2\x80\x9d slice as \xe2\x80\xa6ChReads the entire contents of a file into a bytes vector.AoReads some bytes from the file.B`Sets the option for read access.CgPull some bytes from this source into the specified \xe2\x80\xa6ClAttempts to wait for a value on this receiver, returning \xe2\x80\xa60CmReceives a single datagram message on the socket from the \xe2\x80\xa6AnReceives data from the socket.DeAn iterator adapter which, like <code>fold</code>, holds internal \xe2\x80\xa600BfSeek to an offset, in bytes in a file.BiSeek to an offset, in bytes, in a stream.CfSeek to an offset, in bytes, in the underlying reader.CgSeek to the offset, in bytes, in the underlying writer.C`The receiver of a method, or the current module.CjAttempts to send a value on this channel, returning it \xe2\x80\xa60BjSends a value on this synchronous channel.CnSends data on the socket to the remote address to which it \xe2\x80\xa6C`Sends data on the socket to the socket\xe2\x80\x99s peer.DfReturns the sign of this formatter (<code>+</code> or <code>-</code>).DiSets or removes the sign (the <code>+</code> or the <code>-</code> flag).1010AePortable SIMD module.AiSIMD compiler intrinsics.10AiHyperbolic sine function.000CkCreates an instance of a writer which will successfully \xe2\x80\xa6ChThe minimum size in bytes for a memory block of this \xe2\x80\xa600BmReturns the total size of this file in bytes.DnReturns the <code>st_size</code> field of the internal <code>filestat_t</code>DaCreates an iterator that skips the first <code>n</code> elements.00ChLogical left shift packed 8-bit elements, discarding \xe2\x80\xa60CjSorts the slice in ascending order, preserving initial \xe2\x80\xa6DfReturns the span of this tree, delegating to the <code>span</code> \xe2\x80\xa6CmReturns the span for the delimiters of this token stream, \xe2\x80\xa6C`Returns the span for this punctuation character.DhReturns the span of this <code>Ident</code>, encompassing the entire \xe2\x80\xa6BkReturns the span encompassing this literal.BdReturns the square root of a number.0FbExperimental version of <code>sqrt</code> in <code>core</code>. See <code>f32::sqrt</code> for \xe2\x80\xa6FbExperimental version of <code>sqrt</code> in <code>core</code>. See <code>f64::sqrt</code> for \xe2\x80\xa62222CmProduces a vector where every element has the square root \xe2\x80\xa60ChArithmetic right shift packed 8-bit elements without \xe2\x80\xa60CnLogical right shift packed 8-bit elements without rounding \xe2\x80\xa60CnSubtracts packed 8-bit signed numbers, discarding overflow \xe2\x80\xa60ClSwaps elements at indices <code>i</code> and <code>j</code>.CiSwaps the values at two mutable locations of the same \xe2\x80\xa6B`Swaps two elements in the slice.11CkStores a value into the bool, returning the previous value.CkStores a value into the pointer, returning the previous \xe2\x80\xa6CiStores a value into the atomic integer, returning the \xe2\x80\xa6000000000CfSwaps the values at two mutable locations, without \xe2\x80\xa6BkSwaps the values of two <code>Cell</code>s.DjSwaps the wrapped value of <code>self</code> with the wrapped value of \xe2\x80\xa676775433333333331028BhThread-safe reference-counting pointers.AjSynchronization primitivesBbUseful synchronization primitives.DfIndicates whether <code>__WASI_FDFLAG_SYNC</code> is passed in the \xe2\x80\xa6ClRemoves and returns the element in the set, if any, that \xe2\x80\xa6DiCreates an iterator that yields the first <code>n</code> elements, or \xe2\x80\xa60DiTakes the value out of the option, leaving a <code>None</code> in its \xe2\x80\xa6EfReplaces <code>dest</code> with the default value of <code>T</code>, returning the \xe2\x80\xa6DjTakes the value from the <code>ManuallyDrop&lt;T&gt;</code> container out.DkTakes the value out of this <code>OnceCell</code>, moving it back to an \xe2\x80\xa6DkTakes the value of the cell, leaving <code>Default::default()</code> in \xe2\x80\xa6DkTakes the wrapped value, leaving <code>Default::default()</code> in its \xe2\x80\xa665DkTakes the value out of this <code>OnceLock</code>, moving it back to an \xe2\x80\xa6DiTakes the contained value, leaving <code>Default::default()</code> in \xe2\x80\xa6043265CmRemoves and returns the value in the set, if any, that is \xe2\x80\xa6:DgCreates an adapter which will read at most <code>limit</code> bytes \xe2\x80\xa6AlHyperbolic tangent function.000CeTypes and Traits for working with asynchronous tasks.00CkAttribute macro applied to a function to turn it into a \xe2\x80\xa6BiTests the value of the specified element.10CeSupport code for rustc\xe2\x80\x99s built in unit-test and \xe2\x80\xa6FmReturns <code>Some(f())</code> if the <code>bool</code> is <code>true</code>, or <code>None</code> otherwise.AeChains two orderings.10AhTemporal quantification.0AjIndicates unfinished code.0C`Generates the trap instruction <code>TRAP</code>00CdReturns a string slice with leading and trailing \xe2\x80\xa60DmA value of type <code>bool</code> representing logical <strong>true</strong>.BeDefine an alias for an existing type.BbThe 128-bit unsigned integer type.DdRedundant constants module for the <code>u128</code> primitive type.10CgA SIMD vector with one element of type <code>u8</code>.00ChA SIMD vector with two elements of type <code>u8</code>.00CiA SIMD vector with four elements of type <code>u8</code>.00CjA SIMD vector with eight elements of type <code>u8</code>.00CaThe <code>()</code> type, also called \xe2\x80\x9cunit\xe2\x80\x9d.0DdPlatform-specific extensions to <code>std</code> for Unix platforms.BlWASM-specific 128-bit wide SIMD vector type.00CnReturns an iterator of (variable, value) pairs of strings, \xe2\x80\xa6CkBlocks the current thread until this condition variable \xe2\x80\xa6CfBlocks the current thread until initialization has \xe2\x80\xa6CdBlocks the current thread until all threads have \xe2\x80\xa6ChBlocks the current thread until the cell is initialized.3CiWaits for the child to exit completely, returning the \xe2\x80\xa60oWake this task.0CjWakes up the task associated with this <code>Waker</code>.CoWakes up the task associated with this <code>LocalWaker</code>.2210DhPlatform-specific extensions to <code>std</code> for the WebAssembly \xe2\x80\xa6DePlatform-specific intrinsics for the <code>wasm</code> target family.CbAcquires a reference to the value in this TLS key.DkA <code>Punct</code> token cannot join with the following token to form \xe2\x80\xa6CkUsed to do a cheap mutable-to-mutable reference conversion.0CeUsed to do a cheap reference-to-reference conversion.0BgThe bitwise OR operator <code>|</code>.0AoAn endpoint of a range of keys.000Ad<code>{ ... }</code>CeExit the operation without running subsequent phases.0BmAn iterator over the bytes of a string slice.DfAn iterator over the bytes of a <code>CStr</code>, without the nul \xe2\x80\xa6BbThis type, reinterpreted as bytes.202CdAn iterator over <code>u8</code> values of a reader.CjAn iterator that links two iterators together, in a chain.0BfAdapter to chain together two readers.CjAn iterator over the <code>char</code>s of a string slice.00CdRepresentation of a running or exited child process.CeA common trait that allows explicit creation of a \xe2\x80\xa6D`Derive macro generating an impl of the trait <code>Clone</code>.10fU+003A0fU+002C0BcAn iterator that repeats endlessly.0Aj<code>?</code> formatting.D`Derive macro generating an impl of the trait <code>Debug</code>.1010DbUsed for immutable dereferencing operations, like <code>*v</code>.0CbA draining iterator for <code>Vec&lt;T&gt;</code>.DcA draining iterator over the elements of a <code>BinaryHeap</code>.DaA draining iterator over the elements of a <code>VecDeque</code>.BlA draining iterator for <code>String</code>.30CoA draining iterator over the entries of a <code>HashMap</code>.32CmA draining iterator over the items of a <code>HashSet</code>.B`An iterator that yields nothing.AlValue being parsed is empty.1EmThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have \xe2\x80\xa6Eg<code>Empty</code> ignores any data written via <code>Write</code>, and will always \xe2\x80\xa62ClA view into a single entry in a map, which may either be \xe2\x80\xa6ClA view into a single entry in a set, which may either be \xe2\x80\xa61100CgAn ordering where a compared value is equal to another.0CnThe error type which is returned from formatting a message \xe2\x80\xa6CeThe type returned in the event of a conversion error.01Di<code>Error</code> is a trait representing the basic expectations for \xe2\x80\xa6iAn error.2231CmThe lock could not be acquired due to an I/O error on the \xe2\x80\xa6FdThe error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>\xe2\x80\xa6CdAccess the field with the given index of some place.0CiThe version of the call operator that takes a mutable \xe2\x80\xa60CdA common trait implemented by all function pointers.0AiA delimited token stream.C`A token stream surrounded by bracket delimiters.CkMap from the elements of the input vector to the output \xe2\x80\xa60BcAn identifier (<code>ident</code>).nAn identifier.DcUsed for indexing operations (<code>container[index]</code>) in \xe2\x80\xa60CnVector of <code>isize</code> with the same number of elements.00000DjA <code>Punct</code> token can join with the following token to form a \xe2\x80\xa6lJUnit outputfln(10)0000000BhAn enum representing a diagnostic level.CiAn iterator over the lines of a string, as string slices.00DbAn iterator over the lines of an instance of <code>BufRead</code>.DhUse lower-case hexadecimal integers for the <code>Debug</code> trait \xe2\x80\xa600CkExpresses that a match of the pattern has been found at \xe2\x80\xa600BcRepresents the <code>-</code> flag.00CmA mutual exclusion primitive useful for protecting shared \xe2\x80\xa600Aj<code>o</code> formatting.00CoBorrowed reference to an OS string (see <code>OsString</code>).0CiA custom error that does not fall under any other I/O \xe2\x80\xa6kOwned data.BmThe resulting type after obtaining ownership.10BkContainer type for copied ASCII characters.CkThis type represents a file descriptor that refers to a \xe2\x80\xa6GbA <code>Punct</code> is a single punctuation character such as <code>+</code>, <code>-</code> or <code>#</code>\xe2\x80\xa6EfA single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).DeThe radix or base of the internal representation of <code>f16</code>.DeThe radix or base of the internal representation of <code>f32</code>.DeThe radix or base of the internal representation of <code>f64</code>.DfThe radix or base of the internal representation of <code>f128</code>.DiThe radix or base of the internal representation of <code>f32</code>. \xe2\x80\xa6DiThe radix or base of the internal representation of <code>f64</code>. \xe2\x80\xa6543210DcAn iterator over a sub-range of entries in a <code>BTreeMap</code>.DaAn iterator over a sub-range of items in a <code>BTreeSet</code>.CeA (half-open) range bounded inclusively below and \xe2\x80\xa60000021AeRaw file descriptors.C`A future that is immediately ready with a value.BmRepresents that a value is immediately ready.10CaIndication that contents should be right-aligned.00BcA scope to spawn scoped threads in.CiPrints a terser backtrace which ideally only contains \xe2\x80\xa6CaTypes with a constant size known at compile time.0fU+00200CiAn iterator over subslices separated by elements that \xe2\x80\xa6BkCreated with the method <code>split</code>.1010DhAn iterator over the contents of an instance of <code>BufRead</code> \xe2\x80\xa6C`Sets the offset to the provided number of bytes.CjTrait that provides simple descriptive statistics on a \xe2\x80\xa6CcA handle to the standard input stream of a process.CiDescribes what to do with a standard I/O stream for a \xe2\x80\xa6lQuiet outputfU+007E0AiA marker for tuple types.0CgCredentials for a UNIX process for credentials passing.DkA lazy iterator producing elements in the union of <code>BTreeSet</code>\xe2\x80\xa60DjA lazy iterator producing elements in the union of <code>HashSet</code>\xe2\x80\xa6CaTypes that do not require any pinning guarantees.0DhUse upper-case hexadecimal integers for the <code>Debug</code> trait \xe2\x80\xa600CnVector of <code>usize</code> with the same number of elements.00000DjA <code>Waker</code> is a handle for waking up a task by notifying its \xe2\x80\xa60ClA trait for writing or formatting into Unicode-accepting \xe2\x80\xa600CbA trait for objects which are byte-oriented sinks.DfThe writing portion of the <code>TcpStream</code> should be shut down.BhThe type of value this coroutine yields.0ChGenerates a DMB (data memory barrier) instruction or \xe2\x80\xa60CnGenerates a DSB (data synchronization barrier) instruction \xe2\x80\xa60CjGenerates an ISB (instruction synchronization barrier) \xe2\x80\xa60BkGenerates an unspecified no-op instruction.0CiSelect bytes from each operand according to APSR GE flagsCgGenerates a SEV (send a global event) hint instruction.0CiGenerates a WFE (wait for event) hint instruction, or \xe2\x80\xa60CmGenerates a WFI (wait for interrupt) hint instruction, or \xe2\x80\xa60CjSpecifies the end of a restricted transactional memory \xe2\x80\xa60BdAborts the execution of the process.0BnTerminates the process in an abnormal fashion.BcInverse hyperbolic cosine function.000CkAdds packed 16-bit signed numbers, discarding overflow bits0CiThe minimum byte alignment for a memory block of this \xe2\x80\xa6ChReturns a flag indicating what form of alignment was \xe2\x80\xa6AnSets or removes the alignment.210210C`The Rust core allocation and collections libraryAfMemory allocation APIsBkAllocates memory with the global allocator.CoAllocates memory as described by the given <code>layout</code>.20AgMemory allocation APIs.21DaCreates a layout describing the record for a <code>[T; n]</code>.EhA fixed-size array, denoted <code>[T; N]</code>, for the element type, <code>T</code>\xe2\x80\xa6BgUtilities for the array primitive type.2102AlBorrows the file descriptor.BkOperations on ASCII strings and characters.0BaInverse hyperbolic sine function.000DeReturns a <code>Future</code> instead of blocking the current thread.FeComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>\xe2\x80\xa6000BdInverse hyperbolic tangent function.000CnReturns the last access time of the file, in seconds since \xe2\x80\xa6DeSuspend execution until the result of a <code>Future</code> is ready.CkAttribute macro applied to a function to turn it into a \xe2\x80\xa60AdBenchmarking module.FdReturns the union of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>.BfPerforms the <code>|</code> operation.0FfReturns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.2DcAn internal-only helper function for <code>split_off</code> and \xe2\x80\xa6000CgThe <code>Box&lt;T&gt;</code> type for heap allocation.0BiExit early from a loop or labelled block.CeReverses the bytes in an integer type <code>T</code>.0B`Builds the <code>Context</code>.BlCreates a new builder for constructing a \xe2\x80\xa61CeReturns an iterator over the bytes of a string slice.BiIterates over the bytes in this C string.10EcTransforms this <code>Read</code> instance to an <code>Iterator</code> over its \xe2\x80\xa6DdEquivalent to C\xe2\x80\x99s <code>signed int</code> (<code>int</code>) type.00Bk<code>CString</code> and its related types.Bh<code>CStr</code> and its related types.Ck<code>CStr</code>, <code>CString</code>, and related types.BiGenerates the cache operation instruction0CfConverts the arguments to iterators and links them \xe2\x80\xa6ClTakes two iterators and creates a new iterator over both \xe2\x80\xa6010ChCreates an adapter which will chain this stream with \xe2\x80\xa6DbReturns an iterator over the <code>char</code>s of a string slice.0CaChange the owner and group of the specified path.ChRestrict a value to a certain interval unless it is NaN.000BgRestrict a value to a certain interval.11110BgClears the vector, removing all values.BeDrops all items from the binary heap.CfRemoves all elements from the <code>LinkedList</code>.BfClears the deque, removing all values.BfClears the map, removing all elements.BfClears the set, removing all elements.CjTruncates this <code>String</code>, removing all contents.ChClears the buffer, resetting the filled region to empty.CcTruncates the <code>OsString</code> to zero length.DoInvokes <code>clear</code> on the underlying instance of <code>OsString</code>.93CkClears the map, removing all key-value pairs. Keeps the \xe2\x80\xa69BdClears the set, removing all values.76984BoClears the ancillary data, removing all values.AnCarry-less multiply (low-part)0BnMakes a clone of the <code>Arc</code> pointer.DjMakes a clone of the <code>Weak</code> pointer that points to the same \xe2\x80\xa6DgReturns a new box with a <code>clone()</code> of this box\xe2\x80\x99s contents.BmMakes a clone of the <code>Rc</code> pointer.2DgThe <code>Clone</code> trait for types that cannot be \xe2\x80\x98implicitly \xe2\x80\xa6BaReturns a duplicate of the value.fPanicsAjCopies a <code>Ref</code>.3276BhClone a sender to send to other threads.21657CiCount the number of redundant sign bits of the packed \xe2\x80\xa60CnCount the number of leading zero bits of the packed 16-bit \xe2\x80\xa60CnCount the number of leading zero bits of the packed 32-bit \xe2\x80\xa60CmCompile-time constants, compile-time blocks, compile-time \xe2\x80\xa6ClConsumes the iterator, counting the number of iterations \xe2\x80\xa600AiA Rust binary or library.mReads the CSR0nWrites the CSR0CgReturns the last status change time of the file, in \xe2\x80\xa6D`Returns the number of bits set in an integer type <code>T</code>0AnRepeats an iterator endlessly.00CgRemoves consecutive repeated elements in the vector \xe2\x80\xa60AgDereferences the value.BhUnstable placeholder for deref patterns.fPanics2120GgWhen passed the <em>number</em> <code>0</code>, <code>1</code>, \xe2\x80\xa6, <code>9</code>, returns the <em>character</em> \xe2\x80\xa60CnRemoves the subslice indicated by the given range from the \xe2\x80\xa6CjClears the binary heap, returning an iterator over the \xe2\x80\xa6CgRemoves the specified range from the deque in bulk, \xe2\x80\xa6ChRemoves the specified range from the string in bulk, \xe2\x80\xa630CgClears the map, returning all key-value pairs as an \xe2\x80\xa63CjClears the set, returning all elements as an iterator. \xe2\x80\xa63DgIndicates whether <code>__WASI_FDFLAG_DSYNC</code> is passed in the \xe2\x80\xa6DbCreates an iterator over <code>T</code> which returns no elements.BhCreates an iterator that yields nothing.10ChCreates a value that is always at EOF for reads, and \xe2\x80\xa6BcAdds a new entry to the set output.BdAdds a new entry to the list output.BcAdds a new entry to the map output.CmGets the given key\xe2\x80\x99s corresponding entry in the map for \xe2\x80\xa6BoThe entry in the map that was already occupied.CkGets the given value\xe2\x80\x99s corresponding entry in the set \xe2\x80\xa6543543202011DiDetermines if the elements of this <code>Iterator</code> are equal to \xe2\x80\xa600BcInterfaces for working with Errors.DeAdds a new child diagnostic message to <code>self</code> with the \xe2\x80\xa6EeCreates a new <code>Diagnostic</code> with the given <code>message</code> at the span2BnReturns the error which caused the call to \xe2\x80\xa6ClPTX-specific 32-bit wide floating point (f16 x 2) vector \xe2\x80\xa6ChA SIMD vector with one element of type <code>f32</code>.00CiA SIMD vector with two elements of type <code>f32</code>.00CjA SIMD vector with four elements of type <code>f32</code>.CeMaterializes a SIMD value from the provided operands.0011CkA SIMD vector with eight elements of type <code>f32</code>.00ChA SIMD vector with one element of type <code>f64</code>.00CiA SIMD vector with two elements of type <code>f64</code>.33300CjA SIMD vector with four elements of type <code>f64</code>.00CkA SIMD vector with eight elements of type <code>f64</code>.00DnA value of type <code>bool</code> representing logical <strong>false</strong>.A`An atomic fence.0C`Adds a new field to the generated struct output.CfAdds a new field to the generated tuple struct output.1010CkReturns a reference to the first element in the set, if \xe2\x80\xa6DiReturns the first element of the slice, or <code>None</code> if it is \xe2\x80\xa601AmReturns flags for formatting.00DdReturns the largest integer less than or equal to <code>self</code>.0FdExperimental version of <code>floor</code> in <code>core</code>. See <code>f32::floor</code> for \xe2\x80\xa6FdExperimental version of <code>floor</code> in <code>core</code>. See <code>f64::floor</code> for \xe2\x80\xa62222CkReturns the largest integer value less than or equal to \xe2\x80\xa60CfFlushes the file, ensuring that all intermediately \xe2\x80\xa6CaFlushes this output stream, ensuring that all \xe2\x80\xa6CjForces the evaluation of this lazy value and returns a \xe2\x80\xa600CaReturns the fractional part of <code>self</code>.0FdExperimental version of <code>fract</code> in <code>core</code>. See <code>f32::fract</code> for \xe2\x80\xa6FdExperimental version of <code>fract</code> in <code>core</code>. See <code>f64::fract</code> for \xe2\x80\xa62222CmReturns the floating point\xe2\x80\x99s fractional value, with its \xe2\x80\xa6DjProvides a reference to the front element, or <code>None</code> if the \xe2\x80\xa6CmProvides a reference to the front element of the cursor\xe2\x80\x99\xe2\x80\xa6011100oGamma function.000CcLoads virtual machine memory by signed byte integer0BnLoads virtual machine memory by double integerCcLoads virtual machine memory by signed half integer0CcLoads virtual machine memory by signed word integer0BmStores virtual machine memory by byte integer0BoStores virtual machine memory by double integerBmStores virtual machine memory by half integer0BmStores virtual machine memory by word integer0EhCompute the distance between the origin and a point (<code>x</code>, <code>y</code>) \xe2\x80\xa6000ChA SIMD vector with one element of type <code>i16</code>.00CiA SIMD vector with two elements of type <code>i16</code>.00CjA SIMD vector with four elements of type <code>i16</code>.00CkA SIMD vector with eight elements of type <code>i16</code>.CeMaterializes a SIMD value from the provided operands.0011ChA SIMD vector with one element of type <code>i32</code>.00CiA SIMD vector with two elements of type <code>i32</code>.00CjA SIMD vector with four elements of type <code>i32</code>.33300CkA SIMD vector with eight elements of type <code>i32</code>.00ChA SIMD vector with one element of type <code>i64</code>.00CiA SIMD vector with two elements of type <code>i64</code>.66600CjA SIMD vector with four elements of type <code>i64</code>.00CkA SIMD vector with eight elements of type <code>i64</code>.00CgA SIMD vector with 16 elements of type <code>i8</code>.99900CgA SIMD vector with 32 elements of type <code>i8</code>.00CgA SIMD vector with 64 elements of type <code>i8</code>.00CiReturns the base 2 logarithm of the number, rounded down.00000000000000000000000000000000000CnReturns a shared reference to the output at this location, \xe2\x80\xa6DeReturns the cursor position index within the <code>LinkedList</code>.0CiReturns a reference to the value corresponding to the \xe2\x80\xa6D`Performs the indexing (<code>container[index]</code>) operation.3031122DlReturns <code>true</code> if the ordering is the <code>Equal</code> variant.0FeReturns <code>true</code> if the ordering is either the <code>Greater</code> or <code>Equal</code>\xe2\x80\xa60DnReturns <code>true</code> if the ordering is the <code>Greater</code> variant.0FcReturns <code>true</code> if the ordering is either the <code>Less</code> or <code>Equal</code> \xe2\x80\xa60DkReturns <code>true</code> if the ordering is the <code>Less</code> variant.0E`Returns <code>true</code> if the ordering is not the <code>Equal</code> variant.0CkReturns <code>true</code> if the result is <code>Ok</code>.0BfThe pointer-sized signed integer type.DeRedundant constants module for the <code>isize</code> primitive type.10CdReturns the square root of the number, rounded down.00000000000000000000000000000000000CjCompute the absolute value of packed 8-bit signed integers0CgAdds packed 8-bit signed numbers, saturating at the \xe2\x80\xa60CnAdds signed lower 16-bit content of two registers with Q15 \xe2\x80\xa60CkLogical left shift packed 8-bit elements, saturating at \xe2\x80\xa60ClSubtracts packed 8-bit signed numbers, saturating at the \xe2\x80\xa60CjSubtracts signed lower 16-bit content of two registers \xe2\x80\xa60BdLoads the page table directory entryAjLoads the page table entryD`Returns the diagnostic <code>level</code> for <code>self</code>.ClReturns the number of bytes that can be read before this \xe2\x80\xa6CmReturns an iterator over the lines of a string, as string \xe2\x80\xa60CkConsumes this handle and returns an iterator over input \xe2\x80\xa6CbReturns an iterator over the lines of this reader.AkLinux-specific definitions.DhReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if000BlReturns the base 10 logarithm of the number.000CiProduces a vector where every element has the base-10 \xe2\x80\xa6Dc128-bit wide set of two <code>f64</code> values, LoongArch-specificCd128-bit wide integer vector type, LoongArch-specificDd256-bit wide set of four <code>f64</code> values, LoongArch-specificCd256-bit wide integer vector type, LoongArch-specificBgControl flow based on pattern matching.CnReturns the last modification time of the file, in seconds \xe2\x80\xa6CaThe <code>!</code> type, also called \xe2\x80\x9cnever\xe2\x80\x9d.0CgReturns the number of hard links pointing to this file.DoReturns the <code>st_nlink</code> field of the internal <code>filestat_t</code>DaPlatform-specific intrinsics for the <code>NVPTX</code> platform.FnReturns <code>Ok(())</code> if the <code>bool</code> is <code>true</code>, or <code>Err(err)</code> otherwise.EoTransforms the <code>Option&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping \xe2\x80\xa610B`Bitwise OR-Combine, byte granule0ChCreates a new I/O error from an arbitrary error payload.BfPanic support in the standard library.AjPanics the current thread.DgThe underlying implementation of core\xe2\x80\x99s <code>panic!</code> macro \xe2\x80\xa621BkParses this string slice into another type.0BlGenerates the <code>PAUSE</code> instruction0CnCalculate the sum of absolute difference of unsigned 8-bit \xe2\x80\xa60EfObtains a reference to the <code>PidFd</code> created for this <code>Child</code>, \xe2\x80\xa6CkA new pipe should be arranged to connect the parent and \xe2\x80\xa6ClHelper macro that allows you to treat a value expression \xe2\x80\xa60AnPrints to the standard output.EhQuote a <code>TokenStream</code> into a <code>TokenStream</code>. This is the actual \xe2\x80\xa6Dg<code>quote!(..)</code> accepts arbitrary tokens and expands into a \xe2\x80\xa6CkHalves the sum of packed 8-bit signed numbers, dropping \xe2\x80\xa60BdPerforms bounds checking of a range.CnCreates an iterator that covers the specified range in the \xe2\x80\xa6CjConstructs a double-ended iterator over a sub-range of \xe2\x80\xa60BdExperimental replacement range types303112ChCreates a future that is immediately ready with a value.CmExtracts the successful type of a <code>Poll&lt;T&gt;</code>.10CmTakes the reciprocal (inverse) of a number, <code>1/x</code>.000DaTakes the reciprocal (inverse) of each element, <code>1/x</code>.111100CnReturns the byte index for the first character of the last \xe2\x80\xa6CmSearches for an element of an iterator from the back that \xe2\x80\xa6010CmAn iterator method that reduces the iterator\xe2\x80\x99s elements \xe2\x80\xa600DcReturns the nearest integer to <code>self</code>. If a value is \xe2\x80\xa60FdExperimental version of <code>round</code> in <code>core</code>. See <code>f32::round</code> for \xe2\x80\xa6FdExperimental version of <code>round</code> in <code>core</code>. See <code>f64::round</code> for \xe2\x80\xa62222CjRounds to the nearest integer value. Ties round toward \xe2\x80\xa60ChHalves the subtraction result of packed 8-bit signed \xe2\x80\xa60DgIndicates whether <code>__WASI_FDFLAG_RSYNC</code> is passed in the \xe2\x80\xa6DaPlatform-specific intrinsics for the <code>s390x</code> platform.BlCreates a scope for spawning scoped threads.CePuts the current thread to sleep for at least the \xe2\x80\xa6BgUtilities for the slice primitive type.DfA dynamically-sized view into a contiguous sequence, <code>[T]</code>.BbSlice management and manipulation.12CiLogical left shift packed 16-bit elements, discarding \xe2\x80\xa60ClImplements the P0 transformation function as used in the \xe2\x80\xa60ClImplements the P1 transformation function as used in the \xe2\x80\xa60CnAccelerates the block encrypt/decrypt operation of the SM4 \xe2\x80\xa60CkAccelerates the Key Schedule operation of the SM4 block \xe2\x80\xa60CmMultiply signed 8-bit elements and add 16-bit elements on \xe2\x80\xa60CdGet maximum values from 8-bit packed signed integers0CdGet minimum values from 8-bit packed signed integers0CdReturns the <code>Span</code>s in <code>self</code>.D`Spawns a new thread, returning a <code>JoinHandle</code> for it.CcSpawns a new thread within a scope, returning a \xe2\x80\xa6DhSpawns a new thread by taking ownership of the <code>Builder</code>, \xe2\x80\xa6ChExecutes the command as a child process, returning a \xe2\x80\xa6CjConstructs a mask by setting all elements to the given \xe2\x80\xa6CmConstructs a new SIMD vector with all elements set to the \xe2\x80\xa610ClReturns an iterator over subslices separated by elements \xe2\x80\xa6CmReturns an iterator over substrings of this string slice, \xe2\x80\xa610CnReturns an iterator over the contents of this reader split \xe2\x80\xa6CjSplits the underlying slice at the cursor position and \xe2\x80\xa6CiArithmetic right shift packed 16-bit elements without \xe2\x80\xa60CnArithmetic right shift packed 8-bit elements with rounding \xe2\x80\xa60CfLogical right shift packed 16-bit elements without \xe2\x80\xa60CjLogical right shift packed 8-bit elements with rounding up0CaReturns the lower bound of the range (inclusive).BiThe lower bound of the range (inclusive).000000CjCreates an empty span pointing to directly before this \xe2\x80\xa621111111ChConstructs a new handle to the standard input of the \xe2\x80\xa6CjConfiguration for the child process\xe2\x80\x99s standard input \xe2\x80\xa6CjThe handle for writing to the child\xe2\x80\x99s standard input \xe2\x80\xa6AmStores a value into the bool.B`Stores a value into the pointer.BgStores a value into the atomic integer.000000000210000000000CfSubtracts packed 16-bit signed numbers, discarding \xe2\x80\xa60BaThe parent of the current module.CiSwap the 8-bit bytes within each 16-bit halfword of a \xe2\x80\xa60CiGenerates the <code>throw</code> instruction from the \xe2\x80\xa600DhConverts <code>self</code> to big endian from the target\xe2\x80\x99s endianness.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000DcConverts <code>self</code> to little endian from the target\xe2\x80\x99s \xe2\x80\xa600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000BdGets this ASCII character as a byte.0BhA common interface for a group of types.DbReturns the integer part of <code>self</code>. This means that \xe2\x80\xa60FdExperimental version of <code>trunc</code> in <code>core</code>. See <code>f32::trunc</code> for \xe2\x80\xa6FdExperimental version of <code>trunc</code> in <code>core</code>. See <code>f64::trunc</code> for \xe2\x80\xa62222CjReturns the floating point\xe2\x80\x99s integer value, with its \xe2\x80\xa60CiA finite heterogeneous sequence, <code>(T, U, ..)</code>.0ChA SIMD vector with one element of type <code>u16</code>.00CiA SIMD vector with two elements of type <code>u16</code>.00CjA SIMD vector with four elements of type <code>u16</code>.00CkA SIMD vector with eight elements of type <code>u16</code>.CeMaterializes a SIMD value from the provided operands.0011ChA SIMD vector with one element of type <code>u32</code>.00CiA SIMD vector with two elements of type <code>u32</code>.00CjA SIMD vector with four elements of type <code>u32</code>.33300CkA SIMD vector with eight elements of type <code>u32</code>.00ChA SIMD vector with one element of type <code>u64</code>.00CiA SIMD vector with two elements of type <code>u64</code>.66600CjA SIMD vector with four elements of type <code>u64</code>.00CkA SIMD vector with eight elements of type <code>u64</code>.00CgA SIMD vector with 16 elements of type <code>u8</code>.99900CgA SIMD vector with 32 elements of type <code>u8</code>.00CgA SIMD vector with 64 elements of type <code>u8</code>.00ClMultiply unsigned 8-bit elements and add 16-bit elements \xe2\x80\xa60CfGet maximum values from 8-bit packed unsigned integers0CfGet minimum values from 8-bit packed unsigned integers0CmVisits the elements representing the union, i.e., all the \xe2\x80\xa6BgThe Rust equivalent of a C-style union.CkVisits the values representing the union, i.e., all the \xe2\x80\xa62ChConverts an iterator of pairs into a pair of containers.0CcUnzips an option containing a tuple of two options.CcPlace odd and even bits of the source word into \xe2\x80\xa621BhThe pointer-sized unsigned integer type.DeRedundant constants module for the <code>usize</code> primitive type.10BkReturns the next validated UTF-8 substring.00CeAdds the value part of a new entry to the map output.CkThe value which was not inserted, because the entry was \xe2\x80\xa61100DcReturns a reference to the <code>Waker</code> for the current task.CeSets the value for the waker on <code>Context</code>.10CcAdd constraints that must be upheld to use an item.BaLoop while a condition is upheld.CkReturns the optionally specified integer width that the \xe2\x80\xa6AjSets or removes the width.1010DkTakes an output stream and an <code>Arguments</code> struct that can be \xe2\x80\xa6CnWrites the value and converts to <code>Box&lt;T, A&gt;</code>.CmOverwrites a memory location with the given value without \xe2\x80\xa6BdWrites formatted data into a buffer.3BoWrites some data into this <code>Hasher</code>.22ChSets the value of the <code>MaybeUninit&lt;T&gt;</code>.325133DhLocks this <code>RwLock</code> with exclusive write access, blocking \xe2\x80\xa6015C`Writes a slice as the entire contents of a file.AnWrites some bytes to the file.BaSets the option for write access.CnWrites a buffer into this writer, returning how many bytes \xe2\x80\xa6EgHas the effects of both <code>Acquire</code> and <code>Release</code> together: For \xe2\x80\xa60ClAn iterator over the arguments of a process, yielding an \xe2\x80\xa6CmConfigurable proof assumptions of <code>TransmuteFrom</code>.0CgA memory location which can be safely modified from \xe2\x80\xa60Aj<code>b</code> formatting.00BlThe bitwise AND operator <code>&amp;</code>.0BhThe bitwise XOR operator <code>^</code>.0AkA trait for borrowing data.00fU+00180CbIndication that contents should be center-aligned.00CiAn iterator over a slice in (non-overlapping) chunks (\xe2\x80\xa600CiAn iterator that clones the elements of an underlying \xe2\x80\xa60BjHelper trait for <code>[T]::concat</code>.0CiAn iterator that copies the elements of an underlying \xe2\x80\xa60CkA reference to the current directory, i.e., <code>.</code>.BhA cursor over a <code>LinkedList</code>.BfA cursor over a <code>BTreeMap</code>.BfA cursor over a <code>BTreeSet</code>.102DjA <code>Cursor</code> wraps an in-memory buffer and provides it with a \xe2\x80\xa6CdApproximate number of significant digits in base 10.000ClApproximate number of significant digits in base 10. Use \xe2\x80\xa60111100fU+007F0fU+00300fU+00310fU+00320fU+00330fU+00340fU+00350fU+00360fU+00370fU+00380fU+00390BbThe Euler-Mascheroni constant (\xce\xb3)0000000fU+001B0CeExtend a collection with the contents of an iterator.0CnA string describing the family of the operating system. An \xe2\x80\xa6DcAn iterator that filters the elements of <code>iter</code> with \xe2\x80\xa60CjThe version of the call operator that takes a by-value \xe2\x80\xa60DiUsed to determine whether a type contains any <code>UnsafeCell</code> \xe2\x80\xa60EbImplements <code>fmt::Debug</code> and <code>fmt::Display</code> using a function.0CgAn iterator where each iteration calls the provided \xe2\x80\xa610CmA future represents an asynchronous computation, commonly \xe2\x80\xa60AlThe global memory allocator.mGlobal scope.10CaA trait for hashing an arbitrary stream of bytes.BhType of the hasher that will be created.10BcAn IP address, either IPv4 or IPv6.0glog2(e)0000000AlLayout of a block of memory.00BlVector of mutable pointers to the same type.00AjA non-cleanup basic block.CcA regular floating point number, not any of the \xe2\x80\xa61E`A normal component, e.g., <code>a</code> and <code>b</code> in <code>a/b</code>.1DhThe <code>Option</code> type. See the module level documentation for \xe2\x80\xa60BfThe resulting type after concatenation0BdThe output type returned by methods.BiThe type of value produced on completion.CfThe output that the future will produce on completion.CnThe resulting type after applying the <code>+</code> operator.CnThe resulting type after applying the <code>-</code> operator.0BmOutput type of the called closure\xe2\x80\x99s future.CnThe resulting type after applying the <code>!</code> operator.CbThe returned type after the call operator is used.DfThe type of the value produced by <code>?</code> when <em>not</em> \xe2\x80\xa6CnThe resulting type after applying the <code>*</code> operator.CnThe resulting type after applying the <code>/</code> operator.CnThe resulting type after applying the <code>%</code> operator.DbThe resulting type after applying the <code>&amp;</code> operator.CnThe resulting type after applying the <code>|</code> operator.CnThe resulting type after applying the <code>^</code> operator.DeThe resulting type after applying the <code>&lt;&lt;</code> operator.DeThe resulting type after applying the <code>&gt;&gt;</code> operator.BaThe returned type after indexing.BdThe output type returned by methods.BiThe type of value produced on completion.CfThe output that the future will produce on completion.CnThe resulting type after applying the <code>+</code> operator.CnThe resulting type after applying the <code>-</code> operator.0BmOutput type of the called closure\xe2\x80\x99s future.CnThe resulting type after applying the <code>!</code> operator.CbThe returned type after the call operator is used.DfThe type of the value produced by <code>?</code> when <em>not</em> \xe2\x80\xa6CnThe resulting type after applying the <code>*</code> operator.CnThe resulting type after applying the <code>/</code> operator.CnThe resulting type after applying the <code>%</code> operator.DbThe resulting type after applying the <code>&amp;</code> operator.CnThe resulting type after applying the <code>|</code> operator.CnThe resulting type after applying the <code>^</code> operator.DeThe resulting type after applying the <code>&lt;&lt;</code> operator.DeThe resulting type after applying the <code>&gt;&gt;</code> operator.BaThe returned type after indexing.BfThe resulting type after concatenation0BdThe output type returned by methods.BaThe output of a finished process.CkA Future that wraps a function returning <code>Poll</code>.0DlWindows path prefixes, e.g., <code>C:</code> or <code>\\\\server\\share</code>.DlA Windows path prefix, e.g., <code>C:</code> or <code>\\\\server\\share</code>.nVerbose outputCiAn iterator over subslices separated by elements that \xe2\x80\xa6BlCreated with the method <code>rsplit</code>.1010CfA wrapper type for a mutably borrowed value from a \xe2\x80\xa60DeExpresses that <code>haystack[a..b]</code> has been rejected as a \xe2\x80\xa600BnAn iterator that repeats an element endlessly.0CmA reader which yields one byte over and over and over and \xe2\x80\xa6CgAn error reporter that prints an error and its sources.BgThe type returned by formatter methods.0Ee<code>Result</code> is a type that represents either success (<code>Ok</code>) or \xe2\x80\xa610CcA specialized <code>Result</code> type for threads.CjA specialized <code>Result</code> type for I/O operations.BiThe type of value this coroutine returns.0AdA reader-writer lock0CiA reader-writer lock that does not keep track of lock \xe2\x80\xa6DdWith this, <code>TransmuteFrom</code> assumes only that you have \xe2\x80\xa60AkThe duration of one second.0gsqrt(2)0000000gsqrt(3)0000000BoScalar type contained by this SIMD vector type.00000000EhThe implementing type within a <code>trait</code> or <code>impl</code> block, or the \xe2\x80\xa6DcThe sending-half of Rust\xe2\x80\x99s synchronous <code>channel</code> type.DdThe sending-half of Rust\xe2\x80\x99s asynchronous <code>channel</code> type.ElLike <code>Acquire</code>/<code>Release</code>/<code>AcqRel</code> (for load, store, and \xe2\x80\xa60fU+00610fU+00620fU+00630fU+00640fU+00650fU+00660fU+00670fU+00680fU+00690fU+006A0fU+006B0fU+006C0fU+006D0fU+006E0fU+006F0fU+00700fU+00710fU+00720fU+00730fU+00740fU+00750fU+00760fU+00770fU+00780fU+00790fU+007A0CgAn iterator over an <code>Error</code> and its sources.BiA splicing iterator for <code>Vec</code>.0CiAn iterator over subslices separated by elements that \xe2\x80\xa6BlCreated with the method <code>splitn</code>.1010CcA handle to the standard error stream of a process.ChA handle to the global standard output stream of the \xe2\x80\xa6CfAn iterator for stepping iterators by a custom amount.0BcA UTF-8\xe2\x80\x93encoded, growable string.0CjThe default memory allocator provided by the operating \xe2\x80\xa6BgThe resulting type after dereferencing.CbThe target type on which the method may be called.10AeA handle to a thread.DgA <code>TypeId</code> represents a globally unique identifier for a \xe2\x80\xa60CjTypes that can be \xe2\x80\x9cunsized\xe2\x80\x9d to a dynamically-sized \xe2\x80\xa60BdA wrapper for a <code>va_list</code>0oA vacant entry.00000CgAn iterator over the values of a <code>BTreeMap</code>.CfAn iterator over the values of a <code>HashMap</code>.1ClAn iterator over a snapshot of the environment variables \xe2\x80\xa6Cm128-bit wide set of four <code>f32</code> types, x86-specific0Cn256-bit wide set of eight <code>f32</code> types, x86-specific0D`512-bit wide set of sixteen <code>f32</code> types, x86-specific0AjSigned saturating additionCaReturns the 16-bit signed saturated equivalent ofAiInsert a QADD instruction1AmSigned saturating subtractionBgReturns the 16-bit signed equivalent ofC`Generates a send a local event hint instruction.0CnSaturates a 32-bit signed integer to a signed integer with \xe2\x80\xa6ClSaturates a 32-bit signed integer to an unsigned integer \xe2\x80\xa6CdReturns an integer with the reversed byte order of x0CkReads the current value of the processor\xe2\x80\x99s time-stamp \xe2\x80\xa60ClPerforms a full or partial save of the enabled processor \xe2\x80\xa60CcQueries whether the processor is executing in a \xe2\x80\xa60CdAccept a new incoming connection from this listener.CcAccepts a new incoming connection to this listener.ChProvides file advisory information on a file descriptor.FcMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> \xe2\x80\xa60DbMoves all elements from <code>other</code> to the end of the list.1FaMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> \xe2\x80\xa60CmAppends data to the cursor, advancing position within its \xe2\x80\xa6331123BdSets the option for the append mode.1DgReturns <code>None</code> if the pointer is null, or else returns a \xe2\x80\xa6CfConverts this type into a mutable reference of the \xe2\x80\xa6EkConverts from <code>&amp;mut Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;mut T&gt;</code>.EmConverts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.EaGets a mutable reference to the pinned value this <code>Pin&lt;Ptr&gt;</code> \xe2\x80\xa6CmReturns a unique reference to the value. If the value may \xe2\x80\xa6FlConverts from <code>&amp;mut Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;mut T, &amp;mut E&gt;</code>.C`Returns a mutable reference to the whole cursor.76543210BcProvides a raw pointer to the data.DiReturns a raw pointer to the object <code>T</code> pointed to by this \xe2\x80\xa6ChReturns a raw pointer to the vector\xe2\x80\x99s buffer, or a \xe2\x80\xa6CkReturns a raw pointer to the <code>Box</code>\xe2\x80\x99s contents.32BnReturns a raw pointer to the slice\xe2\x80\x99s buffer.BnReturns a raw pointer to the array\xe2\x80\x99s buffer.1BiConverts a string slice to a raw pointer.BkReturns the inner pointer to this C string.CbAcquires the underlying <code>*mut</code> pointer.CnReturns a mutable pointer to the underlying <code>bool</code>.CdReturns a mutable pointer to the underlying pointer.CdReturns a mutable pointer to the underlying integer.000000000ClGets a pointer to the contained value. Reading from this \xe2\x80\xa6CjReturns a raw pointer to the underlying data in this cell.0899765=<432222222222;001:=<DgReturns <code>None</code> if the pointer is null, or else returns a \xe2\x80\xa60CnConverts this type into a shared reference of the (usually \xe2\x80\xa6EcConverts from <code>&amp;Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;T&gt;</code>.EeConverts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.DeGets a shared reference to the pinned value this <code>Pin</code> \xe2\x80\xa6CmReturns a shared reference to the value. If the value may \xe2\x80\xa6F`Converts from <code>&amp;Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;T, &amp;E&gt;</code>.66543210CkGets the formatted string, if it has no arguments to be \xe2\x80\xa6CkViews the underlying data as a subslice of the original \xe2\x80\xa60CkReturns the remaining (sub)string of this iterator as a \xe2\x80\xa6DbExtracts a string slice containing the entire <code>String</code>.2DaViews this slice of ASCII characters as a UTF-8 <code>str</code>.D`Returns the same string as a string slice <code>&amp;str</code>.5ClGets the formatted message, if it has no arguments to be \xe2\x80\xa655DeViews this ASCII character as a one-code-unit UTF-8 <code>str</code>.327665460CdThis returns a numeric identifier for the thread \xe2\x80\xa6CaGenerates the greater-than asseration instructionCgGenerates the less-than-or-equal asseration instructionDbAsserts that a boolean expression is <code>true</code> at runtime.0CmInforms the optimizer that a condition is always true. If \xe2\x80\xa60lAtomic types0DoReturns the intersection of <code>self</code> and <code>rhs</code> as a new \xe2\x80\xa6BjPerforms the <code>&amp;</code> operation.011EgReturns the symmetric difference of <code>self</code> and <code>rhs</code> as a new \xe2\x80\xa6BfPerforms the <code>^</code> operation.011CjReturns the number of blocks allocated to the file, in \xe2\x80\xa6BhA module for working with borrowed data.BfImmutably borrows from an owned value.BiUtilities for working with borrowed data.1BdImmutably borrows the wrapped value.302DjUsed in <code>?</code> to decide whether the operator should produce a \xe2\x80\xa60CaGenerates the trap instruction <code>BREAK</code>0CdReturns a reference to the internally buffered data.0CmCreates a \xe2\x80\x9cby reference\xe2\x80\x9d adapter for this instance of \xe2\x80\xa600000CmCreates a \xe2\x80\x9cby reference\xe2\x80\x9d adaptor for this instance of \xe2\x80\xa61BkEquivalent to C\xe2\x80\x99s <code>char</code> type.00DfEquivalent to C\xe2\x80\x99s <code>signed long</code> (<code>long</code>) type.00CcEquivalent to C\xe2\x80\x99s <code>unsigned int</code> type.00DbEquivalent to C\xe2\x80\x99s <code>void</code> type when used as a pointer.00CeReturns the source location of the caller of this \xe2\x80\xa60CkChange the root directory of the current process to the \xe2\x80\xa6DhSet the root of the child process. This calls <code>chroot</code> in \xe2\x80\xa6DjReturns an iterator over <code>chunk_size</code> elements of the slice \xe2\x80\xa60AoCarry-less multiply (high-part)0AnCarry-less multiply (reversed)0DbCreates an iterator which <code>clone</code>s all of its elements.0FfMap a <code>Bound&lt;&amp;T&gt;</code> to a <code>Bound&lt;T&gt;</code> by cloning the contents of \xe2\x80\xa6FcMaps an <code>Option&lt;&amp;mut T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the \xe2\x80\xa6FhMaps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the contents \xe2\x80\xa6FgMaps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the \xe2\x80\xa6FcMaps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the \xe2\x80\xa6542301CiCount the number of redundant sign bits of the packed \xe2\x80\xa6000DiLexicographically compares the elements of this <code>Iterator</code> \xe2\x80\xa600BjCompare equality for packed 8-bit elements0CeExpands to the column number at which it was invoked.CcReturns the column from which the panic originated.ClThe one-indexed column of the source file where the span \xe2\x80\xa621BjImplementation of <code>[T]::concat</code>CaConcatenates literals into a static string slice.EaFlattens a slice of <code>T</code> into a single value <code>Self::Output</code>.12AmBasic mathematical constants.000BlConstants associated with the current target1111CeCreates an iterator which copies all of its elements.0FfMap a <code>Bound&lt;&amp;T&gt;</code> to a <code>Bound&lt;T&gt;</code> by copying the contents of \xe2\x80\xa6FcMaps an <code>Option&lt;&amp;mut T&gt;</code> to an <code>Option&lt;T&gt;</code> by copying the \xe2\x80\xa6FhMaps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by copying the contents \xe2\x80\xa6FcMaps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the \xe2\x80\xa6FgMaps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the \xe2\x80\xa6542301BjReturns the cosine of an <code>f16</code>.0BjReturns the cosine of an <code>f32</code>.0BjReturns the cosine of an <code>f64</code>.0BdReads the CPU configuration register0CjCross adds and subtracts packed 16-bit signed numbers, \xe2\x80\xa60B`Opens a file in write-only mode.CjSets the option to create a new file, or open it if it \xe2\x80\xa6CdCreates the specified directory with the options \xe2\x80\xa6CjCross subtracts and adds packed 16-bit signed numbers, \xe2\x80\xa60DgPlatform-specific extensions to <code>std</code> for Darwin / Apple \xe2\x80\xa6BlAttribute macro used to apply derive macros.0AmPrints to the standard error.DcReturns <code>true</code> if the path points at an existing entity.DgReturns <code>Ok(true)</code> if the path points at an existing entity.DkReturns <code>e^(self) - 1</code> in a way that is accurate even if the \xe2\x80\xa6000EeReturns the contained <code>Some</code> value, consuming the <code>self</code> value.EcReturns the contained <code>Ok</code> value, consuming the <code>self</code> value.10BoReturns the exponential of an <code>f16</code>.0BoReturns the exponential of an <code>f32</code>.0BoReturns the exponential of an <code>f64</code>.0DhCreates a layout describing the record for <code>self</code> followed byDbAllows to <code>extend</code> a tuple of collections that also \xe2\x80\xa61CfExtends a collection with the contents of an iterator.120EaExtends <code>self</code> with <code>Path</code> elements from <code>iter</code>.B`Link to or import external code.ChA SIMD vector with 16 elements of type <code>f32</code>.00ChA SIMD vector with 32 elements of type <code>f32</code>.00ChA SIMD vector with 64 elements of type <code>f32</code>.00ChA SIMD vector with 16 elements of type <code>f64</code>.00ChA SIMD vector with 32 elements of type <code>f64</code>.00ChA SIMD vector with 64 elements of type <code>f64</code>.00ClChange the owner and group of the file referenced by the \xe2\x80\xa6CkReturns a shared reference to the filled portion of the \xe2\x80\xa60ClCreates an iterator which uses a closure to determine if \xe2\x80\xa60EaReturns <code>None</code> if the option is <code>None</code>, otherwise calls \xe2\x80\xa610CbFinishes output and returns any error encountered.000000000CeReturns the hash value for the values written so far.111110DgFinalizes the construction of the <code>ProcThreadAttributeList</code>.CkReturns <code>a * b + c</code> for <code>f16</code> values.0CkReturns <code>a * b + c</code> for <code>f32</code> values.0CkReturns <code>a * b + c</code> for <code>f64</code> values.0CeMoves a value out of scope without running drop glue.DnTakes ownership and \xe2\x80\x9cforgets\xe2\x80\x9d about the value <strong>without </strong>\xe2\x80\xa610D`Creates a <code>String</code> using interpolation of runtime \xe2\x80\xa6DdTakes an <code>Arguments</code> struct and returns the resulting \xe2\x80\xa610BnReturns an iterator over the backtrace frames.BaAsynchronous basic functionality.0CmSets the supplementary group IDs for the calling process. \xe2\x80\xa6ClReturns a reference to the map\xe2\x80\x99s <code>BuildHasher</code>.ClReturns a reference to the set\xe2\x80\x99s <code>BuildHasher</code>.CeLoads virtual machine memory by unsigned byte integer0CeLoads virtual machine memory by unsigned half integer0CeLoads virtual machine memory by unsigned word integerChA SIMD vector with 16 elements of type <code>i16</code>.00ChA SIMD vector with 32 elements of type <code>i16</code>.00ChA SIMD vector with 64 elements of type <code>i16</code>.00ChA SIMD vector with 16 elements of type <code>i32</code>.00ChA SIMD vector with 32 elements of type <code>i32</code>.00ChA SIMD vector with 64 elements of type <code>i32</code>.00ChA SIMD vector with 16 elements of type <code>i64</code>.00ChA SIMD vector with 32 elements of type <code>i64</code>.00ChA SIMD vector with 64 elements of type <code>i64</code>.00CjReturns the base 10 logarithm of the number, rounded down.00000000000000000000000000000000000DhInserts an element at position <code>index</code> within the vector, \xe2\x80\xa6DkInserts an element at <code>index</code> within the deque, shifting all \xe2\x80\xa6DjSets the value of the entry with the <code>VacantEntry</code>\xe2\x80\x99s key, \xe2\x80\xa6DhSets the value of the entry with the <code>OccupiedEntry</code>\xe2\x80\x99s key,BfInserts a key-value pair into the map.DgSets the value of the entry, and returns an <code>OccupiedEntry</code>.CkSets the value of the entry with the VacantEntry\xe2\x80\x99s value.AhAdds a value to the set.EdInserts a character into this <code>String</code> at byte position <code>idx</code>.DfInserts <code>value</code> into the option, then returns a mutable \xe2\x80\xa609152528CnSets the value of the entry, and returns the entry\xe2\x80\x99s old \xe2\x80\xa688754CjSets the value of the entry, and returns an OccupiedEntry.5DkReturns <code>true</code> if the path exists on disk and is pointing at \xe2\x80\xa6DfReturns <code>true</code> if this metadata is for a directory. The \xe2\x80\xa6ClTests whether this file type represents a directory. The \xe2\x80\xa6ClReturns <code>true</code> if the result is <code>Err</code>.0BoReturns <code>true</code> if this value is NaN.000CoReturns true for each element if its value is <code>NaN</code>.111100CkCompute the absolute value of packed 16-bit signed integers0ChAdds packed 16-bit signed numbers, saturating at the \xe2\x80\xa60ClLogical left shift packed 16-bit elements, saturating at \xe2\x80\xa60CnLogical saturating left then arithmetic right shift packed \xe2\x80\xa60CmSubtracts packed 16-bit signed numbers, saturating at the \xe2\x80\xa60BlThe layout of allocation request that failedD`Returns the size and alignment together as a <code>Layout</code>01CmChange the owner and group of the specified path, without \xe2\x80\xa6AbLegacy range types0CnHints to the compiler that a branch condition is likely to \xe2\x80\xa6ClHints to the compiler that branch condition is likely to \xe2\x80\xa610DcGets the value of the <code>SO_LINGER</code> option on this socket.CeReturns the natural logarithm of an <code>f16</code>.0CeReturns the natural logarithm of an <code>f32</code>.0CeReturns the natural logarithm of an <code>f64</code>.0CiAllocate memory dynamically from a fixed-size heap in \xe2\x80\xa6FhMaps a <code>Poll&lt;Result&lt;T, E&gt;&gt;</code> to <code>Poll&lt;Result&lt;U, E&gt;&gt;</code> by \xe2\x80\xa6DgMaps a <code>Poll&lt;Option&lt;Result&lt;T, E&gt;&gt;&gt;</code> to \xe2\x80\xa601CmReturns the provided default result (if none), or applies \xe2\x80\xa6DdReturns the provided default (if <code>Err</code>), or applies a \xe2\x80\xa610ClPrimitive traits and types representing basic properties \xe2\x80\xa60CiReturns the maximum of two values with respect to the \xe2\x80\xa6CiReturns the element that gives the maximum value with \xe2\x80\xa6010CmMedian of the samples: value separating the lower half of \xe2\x80\xa6CiReturns the minimum of two values with respect to the \xe2\x80\xa6CiReturns the element that gives the minimum value with \xe2\x80\xa6010ChCompares and sorts two values, returning minimum and \xe2\x80\xa60DbPlatform-specific intrinsics for the <code>mips64</code> platform.CmCreate a FIFO special file at the specified path with the \xe2\x80\xa6DeConstructs a new <code>Arc&lt;T&gt;</code> in the provided allocator.DjConstructs a new <code>Weak&lt;T, A&gt;</code>, without allocating any \xe2\x80\xa6CoCreates a new <code>UniqueArc</code> in the provided allocator.CeConstructs a new, empty <code>Vec&lt;T, A&gt;</code>.DkAllocates memory in the given allocator then places <code>x</code> into \xe2\x80\xa6EcCreates an empty <code>BinaryHeap</code> as a max-heap, using <code>A</code> as \xe2\x80\xa6ChConstructs an empty <code>LinkedList&lt;T, A&gt;</code>.AgCreates an empty deque.CjMakes a new empty BTreeMap with a reasonable choice for B.D`Makes a new <code>BTreeSet</code> with a reasonable choice of B.CkConstructs a new <code>Rc</code> in the provided allocator.DoConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory, \xe2\x80\xa6CnCreates a new <code>UniqueRc</code> in the provided allocator.<;:9821074365CiReturns the four eight-bit integers that make up this \xe2\x80\xa6CkReturns the sixteen eight-bit integers the IPv6 address \xe2\x80\xa610CkReturns the byte position of the next character, or the \xe2\x80\xa6BbAdds a signed offset to a pointer.0BeCalculates the offset from a pointer.AlAdds an offset to a pointer.322103A`Optional values.0E`The <code>OsStr</code> and <code>OsString</code> types and associated utilities.CnExecutes the command as a child process, waiting for it to \xe2\x80\xa6DhThe <code>Span</code> for the tokens in the previous macro expansion \xe2\x80\xa6DjReturns the <code>Path</code> without its final component, if there is \xe2\x80\xa6CnCalculate and accumulate the sum of absolute difference of \xe2\x80\xa60EgConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator. \xe2\x80\xa6FbConstructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement \xe2\x80\xa6FdConstructs a new <code>Pin&lt;Rc&lt;T&gt;&gt;</code> in the provided allocator. If <code>T</code>\xe2\x80\xa6210CmPack two 16-bit data from bottom and top half from 32-bit \xe2\x80\xa60CmPack two 16-bit data from top and bottom half from 32-bit \xe2\x80\xa60BnSynchronization objects that employ poisoning.CmRemoves and returns the last element from a vector if the \xe2\x80\xa60ChRaises an <code>f16</code> to an <code>f16</code> power.0ChRaises an <code>f32</code> to an <code>f32</code> power.0ChRaises an <code>f64</code> to an <code>f64</code> power.0ChEnable pretty-printing the report across multiple lines.EgReturns <code>true</code> if the two <code>Arc</code>s point to the same allocation \xe2\x80\xa6EhReturns <code>true</code> if the two <code>Weak</code>s point to the same allocation \xe2\x80\xa6EfReturns <code>true</code> if the two <code>Rc</code>s point to the same allocation \xe2\x80\xa612101ClHalves the sum of packed 16-bit signed numbers, dropping \xe2\x80\xa60AhRandom value generation.0CkGenerates a random value from a distribution, using the \xe2\x80\xa6CjDetermines whether the raw bytes of the two values are \xe2\x80\xa60CgReduces the elements to a single one, by repeatedly \xe2\x80\xa60CmReduces two options into one, using the provided function \xe2\x80\xa610DiRemoves and returns the element at position <code>index</code> within \xe2\x80\xa6CfRemoves the element at the given index and returns it.DiRemoves and returns the element at <code>index</code> from the deque. \xe2\x80\xa6ClTakes the value of the entry out of the map, and returns \xe2\x80\xa6CnRemoves a key from the map, returning the value at the key \xe2\x80\xa6CaTakes the value out of the entry, and returns it.CnIf the set contains an element equal to the value, removes \xe2\x80\xa6FcRemoves a <code>char</code> from this <code>String</code> at byte position <code>idx</code> and \xe2\x80\xa6703CkRemoves a value from the set. Returns whether the value was4276353CkTakes the value out of the entry, and returns it. Keeps \xe2\x80\xa6ClRenames a file or directory to a new name, replacing the \xe2\x80\xa6AlRenames a file or directory.DjCreates a layout describing the record for <code>n</code> instances of \xe2\x80\xa60DhCreates an array of type <code>[T; N]</code> by repeatedly cloning a \xe2\x80\xa6CjCreates a new iterator that endlessly repeats a single \xe2\x80\xa6CiCreates a vector by copying a slice <code>n</code> times.DmCreates a new <code>String</code> by repeating a string <code>n</code> times.432CkCreates an instance of a reader that infinitely repeats \xe2\x80\xa6CnIs called to get the representation of the value as status \xe2\x80\xa6F`Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.DfModifies the deque in-place so that <code>len()</code> is equal to \xe2\x80\xa6nResize a mask.A`Resize a vector.1032CaError handling with the <code>Result</code> type.0BhResumes the execution of this coroutine.0CeRetains only the elements specified by the predicate.00000CgRetains only the characters specified by the predicate.101111111B`Returns a value from a function.BdRewind to the beginning of a stream.ClReturns an iterator over subslices separated by elements \xe2\x80\xa6CkReturns an iterator over substrings of the given string \xe2\x80\xa610CiHalves the subtraction result of packed 16-bit signed \xe2\x80\xa60DnWhen <code>false</code>, <code>TransmuteFrom</code> is not implemented for \xe2\x80\xa60CkSamples a random value from the distribution, using the \xe2\x80\xa60BaChoose elements from two vectors.0CkChanges the IP address associated with this socket address.00000BdAttempts to shrink the memory block.00CkIf the process was terminated by a signal, returns that \xe2\x80\xa6CoReturns a number that represents the sign of <code>self</code>.000ChReturns a number representing sign of <code>self</code>.00000CkReplaces each element with a number that represents its \xe2\x80\xa6CfReturns numbers representing the sign of each element.22222222222233332222221010222222222222BhReturns the sine of an <code>f16</code>.0BhReturns the sine of an <code>f32</code>.0BhReturns the sine of an <code>f64</code>.0CeGet maximum values from 16-bit packed signed integers0CeGet minimum values from 16-bit packed signed integers0CeReturns the lower-level source of this error, if any.DbThe span for the origin source code that <code>self</code> was \xe2\x80\xa61CkCreates a splicing iterator that replaces the specified \xe2\x80\xa60ClReturns an iterator over subslices separated by elements \xe2\x80\xa6CkReturns an iterator over substrings of the given string \xe2\x80\xa610CfArithmetic right shift packed 16-bit elements with \xe2\x80\xa60CkLogical right shift packed 16-bit elements with rounding up0CaReturns the device ID on which this file resides.BgReturns the group ID of the file owner.AiReturns the inode number.BfReturns the user ID of the file owner.CmStraight adds and subtracts packed 16-bit signed numbers, \xe2\x80\xa60CjA static item is a value which is valid for the entire \xe2\x80\xa6ClReturns the status of this backtrace, indicating whether \xe2\x80\xa6ClExecutes a command as a child process, waiting for it to \xe2\x80\xa6BfThe status (exit code) of the process.ChConstructs a new handle to the standard error of the \xe2\x80\xa6CjConfiguration for the child process\xe2\x80\x99s standard error \xe2\x80\xa6ClThe handle for reading from the child\xe2\x80\x99s standard error \xe2\x80\xa6BjThe data that the process wrote to stderr.CiConstructs a new handle to the standard output of the \xe2\x80\xa6CkConfiguration for the child process\xe2\x80\x99s standard output \xe2\x80\xa6CmThe handle for reading from the child\xe2\x80\x99s standard output \xe2\x80\xa6BjThe data that the process wrote to stdout.DhReturns the <code>TokenStream</code> of tokens that are delimited in \xe2\x80\xa6BcA UTF-8\xe2\x80\x93encoded, growable string.oString literal.1BgA type that is composed of other types.CmStraight subtracts and adds packed 16-bit signed numbers, \xe2\x80\xa60CjSwap the 16-bit halfwords within each 32-bit word of a \xe2\x80\xa60oNative threads.BkExtracts a handle to the underlying thread.0DjUnix-specific extensions to primitives in the <code>std::thread</code> \xe2\x80\xa6CdWindows-specific extensions to primitives in the \xe2\x80\xa6CfConverts the mask to a vector of integers, where 0 \xe2\x80\xa60CkAcquires a mutable reference to the owned form of the data.0DfYields a &amp;str slice if the <code>CStr</code> contains valid UTF-8.0DcYields a &amp;str slice if the <code>OsStr</code> is valid Unicode.DoYields a <code>&amp;str</code> slice if the <code>Path</code> is valid unicode.CeCopies <code>self</code> into a new <code>Vec</code>.ChA SIMD vector with 16 elements of type <code>u16</code>.00ChA SIMD vector with 32 elements of type <code>u16</code>.00ChA SIMD vector with 64 elements of type <code>u16</code>.00ChA SIMD vector with 16 elements of type <code>u32</code>.00ChA SIMD vector with 32 elements of type <code>u32</code>.00ChA SIMD vector with 64 elements of type <code>u32</code>.00ChA SIMD vector with 16 elements of type <code>u64</code>.00ChA SIMD vector with 32 elements of type <code>u64</code>.00ChA SIMD vector with 64 elements of type <code>u64</code>.00CiAdds packed 8-bit unsigned numbers, saturating at the \xe2\x80\xa60CnAdds signed lower 16-bit content of two registers with U16 \xe2\x80\xa60CnSubtracts packed 8-bit unsigned numbers, saturating at the \xe2\x80\xa60CjSubtracts signed lower 16-bit content of two registers \xe2\x80\xa60CgGet maximum values from 16-bit packed unsigned integers0CgGet minimum values from 16-bit packed unsigned integers0DjCreates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state.0AnRelease all locks on the file.ClAtomically makes the handle\xe2\x80\x99s token available if it is \xe2\x80\xa6CmCode or interfaces whose memory safety cannot be verified \xe2\x80\xa6EeReturns the contained <code>Some</code> value, consuming the <code>self</code> value.EcReturns the contained <code>Ok</code> value, consuming the <code>self</code> value.10CnFetches the value, applies a function to it that it return \xe2\x80\xa600000000000BmUpdates the contained value using a function.11111111111100CmHalves the sum of packed 8-bit unsigned numbers, dropping \xe2\x80\xa60CjHalves the subtraction result of packed 8-bit unsigned \xe2\x80\xa60EnLoads an argument of type <code>T</code> from the <code>va_list</code> <code>ap</code> and \xe2\x80\xa60EgDestroy the arglist <code>ap</code> after initialization with <code>va_start</code> \xe2\x80\xa60ClGets an iterator over the values of the map, in order by \xe2\x80\xa6CkAn iterator visiting all values in arbitrary order. The \xe2\x80\xa61DfFetches the environment variable <code>key</code> from the current \xe2\x80\xa6AdVector Load Indexed.0jVector or.0iVector ORAbVector Rotate Left0AjVector Element Rotate LeftAaVector Shift Left00AbVector Shift Right00AdVector Store Indexed0AbVSX Unaligned Load0kVector LoadDlGets the <code>vtable</code> pointer used to create this <code>Waker</code>.EaGets the <code>vtable</code> pointer used to create this <code>LocalWaker</code>.10DiPlatform-specific extensions to <code>std</code> for Preview 2 of the \xe2\x80\xa6DbPlatform-specific intrinsics for the <code>wasm32</code> platform.DbPlatform-specific intrinsics for the <code>wasm64</code> platform.DbPlatform-specific intrinsics for the <code>x86_64</code> platform.BmNibble-wise lookup of indicies into a vector.0ChByte-wise lookup of indicies into a vector in registers.0DhReturns the value of type <code>T</code> represented by the all-zero \xe2\x80\xa6DnCreates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state, \xe2\x80\xa610CmWhen coupled with a load, if the loaded value was written \xe2\x80\xa60CfA trait to extract the raw file descriptor from an \xe2\x80\xa6CdAn async-aware version of the <code>Fn</code> trait.0CiA barrier enables multiple threads to synchronize the \xe2\x80\xa6BaManager of the benchmarking runs.Ad<code>[ ... ]</code>EaA <code>BufRead</code> is a type of <code>Read</code>er which has an internal \xe2\x80\xa6CkThread factory, which can be used in order to configure \xe2\x80\xa6DmA wrapper for <code>&amp;[u8]</code> representing a human-readable string \xe2\x80\xa600CnA type representing an owned, C-compatible, nul-terminated \xe2\x80\xa6000CjVector of const pointers with the same number of elements.00000CfAn iterator over slice in (non-overlapping) chunks \xe2\x80\xa600BjA basic block that lies on an unwind path.0CnA process builder, providing fine-grained control over how \xe2\x80\xa6AdA Condition Variable00BdThe context of an asynchronous task.0CnSets the offset to the current position plus the specified \xe2\x80\xa6CaA trait for giving a type a useful default value.DbDerive macro generating an impl of the trait <code>Default</code>.10CbFormat trait for an empty format, <code>{}</code>.0EeHelper struct for safely printing an <code>OsStr</code> with <code>format!</code> \xe2\x80\xa61EhHelper struct for safely printing paths with <code>format!</code> and <code>{}</code>\xe2\x80\xa6DkDoctests are created by the <code>librustdoc</code> manually, so it\xe2\x80\x99s \xe2\x80\xa60BkMachine epsilon value for <code>f16</code>.BkMachine epsilon value for <code>f32</code>.BkMachine epsilon value for <code>f64</code>.BlMachine epsilon value for <code>f128</code>.EbMachine epsilon value for <code>f32</code>. Use <code>f32::EPSILON</code> instead.EbMachine epsilon value for <code>f64</code>. Use <code>f64::EPSILON</code> instead.543210fU+00050DgThe canonical <code>ExitCode</code> for unsuccessful termination on \xe2\x80\xa6CbUnix-specific extensions to <code>fs::File</code>.CeWindows-specific extensions to <code>fs::File</code>.BnWASI-specific extensions to <code>File</code>.CjAn iterator that maps each element to an iterator, and \xe2\x80\xa60ChAn iterator that flattens one level of nesting in an \xe2\x80\xa60AkParse a value from a string00CkAn ordering where a compared value is greater than another.0CjA hash map implemented with quadratic probing and SIMD \xe2\x80\xa60EdA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.0CnAn iterator that calls a function with a reference to each \xe2\x80\xa60CiA measurement of a monotonically nondecreasing clock. \xe2\x80\xa6CkA buffer type used with <code>Write::write_vectored</code>.AgMutable slice iterator.DbA mutable iterator over the elements of a <code>LinkedList</code>.D`A mutable iterator over the elements of a <code>VecDeque</code>.CoA mutable iterator over the entries of a <code>BTreeMap</code>.DiAn iterator over a mutable reference to the <code>Some</code> variant \xe2\x80\xa6DjAn iterator over a mutable reference to the <code>Ok</code> variant of \xe2\x80\xa65105CnA mutable iterator over the entries of a <code>HashMap</code>.354hlog10(2)0000000hlog10(e)0000000hlog2(10)0000000FgA literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), C \xe2\x80\xa6GgA literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), \xe2\x80\xa6fU+005F0CmOne greater than the maximum possible power of 2 exponent \xe2\x80\xa6000DgMaximum possible power of 2 exponent. Use <code>f32::MAX_EXP</code> \xe2\x80\xa6DgMaximum possible power of 2 exponent. Use <code>f64::MAX_EXP</code> \xe2\x80\xa6222210DdOne greater than the minimum possible <em>normal</em> power of 2 \xe2\x80\xa6000CkOne greater than the minimum possible normal power of 2 \xe2\x80\xa60111100BmCreated with the method <code>matches</code>.00DjWith this, <code>TransmuteFrom</code> does not assume you have ensured \xe2\x80\xa60Bo<code>*mut T</code> but non-zero and covariant.0BhA value that is known not to equal zero.0CnOptions for the test run defined by the caller (instead of \xe2\x80\xa60AiAn owned file descriptor.CeAn owned, mutable path (akin to <code>String</code>).AaA string pattern.00CnStructure wrapping a mutable reference to the last item in \xe2\x80\xa6CjStructure wrapping a mutable reference to the greatest \xe2\x80\xa610CiCreates a future which never resolves, representing a \xe2\x80\xa6BiRepresents that a value is not ready yet.10CjProvides the pointer metadata type of any pointed-to type.0Aj<code>p</code> formatting.00CcTrait to represent types that can be created by \xe2\x80\xa60CiAn iterator over a slice in (non-overlapping) chunks (\xe2\x80\xa600CiAn iterator over subslices separated by elements that \xe2\x80\xa6BmCreated with the method <code>rsplitn</code>.1010ClA range only bounded exclusively above (<code>..end</code>).000BiIterator over the entries in a directory.CmA mutable memory location with dynamically checked borrow \xe2\x80\xa60C`No ordering constraints, only atomic operations.0CmWhen coupled with a store, all previous operations become \xe2\x80\xa60CjAn iterator that repeats an element an exact number of \xe2\x80\xa60Dj<code>Request</code> supports generic, type-driven access to data. Its \xe2\x80\xa60BeA helper struct for reverse ordering.0CnThe root directory component, appears after any prefix and \xe2\x80\xa6DjThe canonical <code>ExitCode</code> for successful termination on this \xe2\x80\xa6fU+000F0BnOperations on SIMD vectors of signed integers.00AjParallel <code>Ord</code>.00fU+002F0DbIndicates whether a <code>Punct</code> token can join with the \xe2\x80\xa6CkExtracted collection of all the summary statistics of a \xe2\x80\xa6CeCreates a vector from the elements of another vector.0hThinBox.0CmThe message could not be sent because the channel is full \xe2\x80\xa6EmThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have \xe2\x80\xa6BiConverts SIMD vectors to vectors of bytes0ChA generalization of <code>Clone</code> to borrowed data.0CgSimple and safe type conversions that may fail in a \xe2\x80\xa60DiAn attempted conversion that consumes <code>self</code>, which may or \xe2\x80\xa60CmAn iterator that attempts to yield all pending values for \xe2\x80\xa60BlThe \xe2\x80\x9creturn\xe2\x80\x9d type of this meta-function.0CiTests for the sources that don\xe2\x80\x99t follow the project \xe2\x80\xa60CiAdds a variant projection with the given index to the \xe2\x80\xa60jA warning.DcAn iterator over overlapping subslices of length <code>size</code>.00BeThe coroutine suspended with a value.0AoSee <code>__cpuid_count</code>.0Cl128-bit wide set of two <code>f64</code> types, x86-specific0Cj128-bit wide set of 8 <code>f16</code> types, x86-specific0Bn128-bit wide integer vector type, x86-specific0Cm256-bit wide set of four <code>f64</code> types, x86-specific0Ck256-bit wide set of 16 <code>f16</code> types, x86-specific0Bn256-bit wide integer vector type, x86-specific0Cn512-bit wide set of eight <code>f64</code> types, x86-specific0Ck512-bit wide set of 32 <code>f16</code> types, x86-specific0Bn512-bit wide integer vector type, x86-specific0BgSaturating four 8-bit integer additionsBhSaturating two 8-bit integer subtractionC`Returns the 8-bit signed saturated equivalent ofCmDual 16-bit Signed Multiply with Addition of products and \xe2\x80\xa6CmDual 16-bit Signed Multiply with Subtraction  of products \xe2\x80\xa6AiSigned Dual Multiply Add.AnSigned Dual Multiply Subtract.BiInserts a <code>SSUB8</code> instruction.CnTests if executing inside a transaction. If no transaction \xe2\x80\xa6BbSum of 8-bit absolute differences.BiInserts a <code>USUB8</code> instruction.BcGenerates a YIELD hint instruction.0FiSaves the <code>x87</code> FPU, <code>MMX</code> technology, <code>XMM</code>, and <code>MXCSR</code> \xe2\x80\xa60ClForces a restricted transactional memory (RTM) region to \xe2\x80\xa60ClSpecifies the start of a restricted transactional memory \xe2\x80\xa60DhReads the contents of the extended control register <code>XCR</code> \xe2\x80\xa60CePerforms a full or partial restore of the enabled \xe2\x80\xa60ClPerforms a full or partial save of the enabled processor \xe2\x80\xa6000DjCopies 64-bits from <code>val</code> to the extended control register (\xe2\x80\xa60DcPlatform-specific intrinsics for the <code>aarch64</code> platform.FdExperimental version of <code>abs_sub</code> in <code>core</code>. See <code>f32::abs_sub</code> \xe2\x80\xa6FdExperimental version of <code>abs_sub</code> in <code>core</code>. See <code>f64::abs_sub</code> \xe2\x80\xa6BgThe positive difference of two numbers.0BkAdd file descriptors to the ancillary data.DeCompares the <em>addresses</em> of the two pointers for equality, \xe2\x80\xa60DiCreates a <code>const</code> raw pointer to a place, without creating \xe2\x80\xa60DhAdvances the cursor by asserting that <code>n</code> bytes have been \xe2\x80\xa6BiAdvance the internal cursor of the slice.01C`AES final round decryption instruction for RV64.C`AES final round encryption instruction for RV64.ClThis instruction accelerates the inverse MixColumns step \xe2\x80\xa6ClReturns the arguments that this program was started with \xe2\x80\xa6DeReturns the value of this punctuation character as <code>char</code>.CcProvides a reference to the cursor\xe2\x80\x99s parent list.CkProvides a read-only reference to the cursor\xe2\x80\x99s parent \xe2\x80\xa610BeCoerces to a <code>Path</code> slice.CmExtracts a slice corresponding to the portion of the path \xe2\x80\xa60DbReturns the number of <em>whole</em> seconds contained by this \xe2\x80\xa60CjSplits a slice into a prefix, a middle of aligned SIMD \xe2\x80\xa60BjReturns the block size for filesystem I/O.EkConstructs a <code>Box&lt;T&gt;</code> by calling the <code>exchange_malloc</code> lang \xe2\x80\xa60EaRemove <code>other_assumptions</code> the obligations of <code>self</code>; e.g.:0BlEquivalent to C\xe2\x80\x99s <code>float</code> type.00CbEquivalent to C\xe2\x80\x99s <code>signed char</code> type.00DhEquivalent to C\xe2\x80\x99s <code>signed short</code> (<code>short</code>) type.00CdEquivalent to C\xe2\x80\x99s <code>unsigned char</code> type.00CdEquivalent to C\xe2\x80\x99s <code>unsigned long</code> type.00CaCaptures a stack backtrace of the current thread.ClReturns the smallest integer greater than or equal to an \xe2\x80\xa600000CeCreates a new asynchronous channel, returning the \xe2\x80\xa60BkCompare equality for packed 16-bit elements0BiTransforms an iterator into a collection.00EeFlattens a slice of <code>T</code> into a single value <code>Self::Output</code>, \xe2\x80\xa6BhOpens a TCP connection to a remote host.CnConnects this UDP socket to a remote address, allowing the \xe2\x80\xa6CbConnects the socket to the specified path address.CbConnects to the socket named by <code>path</code>.DdMarks the given <code>amount</code> of additional bytes from the \xe2\x80\xa6BeTraits for conversions between types.0FkCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>self</code> to <code>dest</code>. The \xe2\x80\xa600000BkReturns the cosine of an <code>f128</code>.0CbReturns the creation time listed in this metadata.AaExchanges the CSR0CiReturns a reference to the element that the cursor is \xe2\x80\xa60BlGets a handle to the thread that invokes it.11BmDeallocates memory with the global allocator.DiDeallocates the block of memory at the given <code>ptr</code> pointer \xe2\x80\xa6010BfCreates an empty <code>CString</code>.BnSame as <code>FormattingOptions::new()</code>.B`Creates an empty slice iterator.0BbCreates an empty str inside an ArcF`Creates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.BoCreates an empty <code>[T]</code> inside an ArcBcCreates an empty CStr inside an ArcDkConstructs a new <code>Weak&lt;T&gt;</code>, without allocating memory. \xe2\x80\xa6BlCreates an empty <code>vec::IntoIter</code>.BkCreates an empty <code>Vec&lt;T&gt;</code>.DbCreates an owned Cow&lt;\xe2\x80\x99a, B&gt; with the default value for \xe2\x80\xa6ClCreates an empty <code>[T]</code> inside a <code>Box</code>.ElCreates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.CbCreates an empty <code>BinaryHeap&lt;T&gt;</code>.C`Creates an empty <code>binary_heap::Iter</code>.CdCreates an empty <code>binary_heap::IntoIter</code>.CbCreates an empty <code>LinkedList&lt;T&gt;</code>.C`Creates an empty <code>linked_list::Iter</code>.CdCreates an empty <code>linked_list::IntoIter</code>.CaCreates an empty <code>vec_deque::IterMut</code>.BnCreates an empty <code>vec_deque::Iter</code>.AgCreates an empty deque.BgCreates an empty <code>BTreeMap</code>.BnCreates an empty <code>btree_map::Iter</code>.CaCreates an empty <code>btree_map::IterMut</code>.CbCreates an empty <code>btree_map::IntoIter</code>.BnCreates an empty <code>btree_map::Keys</code>.C`Creates an empty <code>btree_map::Values</code>.CcCreates an empty <code>btree_map::ValuesMut</code>.CbCreates an empty <code>btree_map::IntoKeys</code>.CdCreates an empty <code>btree_map::IntoValues</code>.BoCreates an empty <code>btree_map::Range</code>.CbCreates an empty <code>btree_map::RangeMut</code>.BgCreates an empty <code>BTreeSet</code>.BnCreates an empty <code>btree_set::Iter</code>.CbCreates an empty <code>btree_set::IntoIter</code>.BoCreates an empty <code>btree_set::Range</code>.ClCreates an empty <code>str</code> inside an <code>Rc</code>.BbCreates an empty CStr inside an RcClCreates an empty <code>[T]</code> inside an <code>Rc</code>.EoCreates a new <code>Rc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.DoConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. \xe2\x80\xa6BeCreates an empty <code>String</code>.CnThe <code>Default</code> trait for types with a default value.BoReturns the default value of <code>false</code>BnReturns the default value of <code>\\x00</code>BlReturns the default value of <code>()</code>CaReturns the default value of <code>null()</code>.CeReturns the default value of <code>null_mut()</code>.AnCreates a mutable empty slice.AgCreates an empty slice.AlCreates an empty mutable strAdCreates an empty strBmReturns the default value of <code>0.0</code>000BkReturns the default value of <code>0</code>00000000000BkReturns the \xe2\x80\x9cdefault value\xe2\x80\x9d for a type.BnSame as <code>FormattingOptions::new()</code>.EaCreates a <code>Flatten</code> iterator from the default value of <code>I</code>.EkCreates a <code>Chain</code> from the default values for <code>A</code> and <code>B</code>.DoCreates a <code>Cloned</code> iterator from the default value of <code>I</code>DoCreates a <code>Copied</code> iterator from the default value of <code>I</code>EcCreates an <code>Enumerate</code> iterator from the default value of <code>I</code>DnCreates a <code>Fuse</code> iterator from the default value of <code>I</code>.DlCreates a <code>Rev</code> iterator from the default value of <code>I</code>AjReturns <code>None</code>.E`Creates an <code>UnsafePinned</code>, with the <code>Default</code> value for T.B`Creates an empty slice iterator.0DeCreates an <code>AtomicBool</code> initialized to <code>false</code>.BoCreates a null <code>AtomicPtr&lt;T&gt;</code>.BnReturns the default value of <code>Null</code>DkCreates a new lazy value using <code>Default</code> as the initializing \xe2\x80\xa6E`Creates a <code>Cell&lt;T&gt;</code>, with the <code>Default</code> value for T.EcCreates a <code>RefCell&lt;T&gt;</code>, with the <code>Default</code> value for T.DnCreates an <code>UnsafeCell</code>, with the <code>Default</code> value for T.EbCreates an <code>SyncUnsafeCell</code>, with the <code>Default</code> value for T.CnThe <code>Default</code> trait for types with a default value.BoReturns the default value of <code>false</code>BnReturns the default value of <code>\\x00</code>BlReturns the default value of <code>()</code>CeReturns the default value of <code>null_mut()</code>.CaReturns the default value of <code>null()</code>.AgCreates an empty slice.AnCreates a mutable empty slice.AlCreates an empty mutable strAdCreates an empty strBmReturns the default value of <code>0.0</code>000BkReturns the default value of <code>0</code>00000000000BkReturns the \xe2\x80\x9cdefault value\xe2\x80\x9d for a type.BjConstructs an empty <code>OsString</code>.BdCreates an empty <code>OsStr</code>.BfCreates an empty <code>CString</code>.BnSame as <code>FormattingOptions::new()</code>.BjConstructs a new <code>RandomState</code>.DlCreates a new <code>DefaultHasher</code> using <code>new</code>. See its \xe2\x80\xa6EaCreates a <code>Flatten</code> iterator from the default value of <code>I</code>.EkCreates a <code>Chain</code> from the default values for <code>A</code> and <code>B</code>.DoCreates a <code>Cloned</code> iterator from the default value of <code>I</code>DoCreates a <code>Copied</code> iterator from the default value of <code>I</code>EcCreates an <code>Enumerate</code> iterator from the default value of <code>I</code>DnCreates a <code>Fuse</code> iterator from the default value of <code>I</code>.DlCreates a <code>Rev</code> iterator from the default value of <code>I</code>AjReturns <code>None</code>.E`Creates an <code>UnsafePinned</code>, with the <code>Default</code> value for T.B`Creates an empty slice iterator.0BbCreates an empty str inside an ArcF`Creates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.BcCreates an empty CStr inside an ArcBoCreates an empty <code>[T]</code> inside an ArcDkConstructs a new <code>Weak&lt;T&gt;</code>, without allocating memory. \xe2\x80\xa6DeCreates a <code>Condvar</code> which is ready to be waited on and \xe2\x80\xa6EaCreates a <code>Mutex&lt;T&gt;</code>, with the <code>Default</code> value for T.EfCreates a new <code>RwLock&lt;T&gt;</code>, with the <code>Default</code> value for T.DkCreates a new lazy value using <code>Default</code> as the initializing \xe2\x80\xa6BaCreates a new uninitialized cell.DeCreates an <code>AtomicBool</code> initialized to <code>false</code>.BoCreates a null <code>AtomicPtr&lt;T&gt;</code>.654BlCreates an empty <code>vec::IntoIter</code>.BkCreates an empty <code>Vec&lt;T&gt;</code>.5E`Creates a <code>Cell&lt;T&gt;</code>, with the <code>Default</code> value for T.EcCreates a <code>RefCell&lt;T&gt;</code>, with the <code>Default</code> value for T.DnCreates an <code>UnsafeCell</code>, with the <code>Default</code> value for T.EbCreates an <code>SyncUnsafeCell</code>, with the <code>Default</code> value for T.DbCreates an owned Cow&lt;\xe2\x80\x99a, B&gt; with the default value for \xe2\x80\xa6ElCreates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.ClCreates an empty <code>[T]</code> inside a <code>Box</code>.BbCreates an empty CStr inside an RcEoCreates a new <code>Rc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.ClCreates an empty <code>str</code> inside an <code>Rc</code>.ClCreates an empty <code>[T]</code> inside an <code>Rc</code>.DoConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. \xe2\x80\xa6BeCreates an empty <code>String</code>.BnReturns the default value of <code>Null</code>EmCreates an empty <code>HashMap&lt;K, V, S&gt;</code>, with the <code>Default</code> value \xe2\x80\xa6CbCreates an empty <code>BinaryHeap&lt;T&gt;</code>.EmCreates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for \xe2\x80\xa6BgCreates an empty <code>BTreeMap</code>.BgCreates an empty <code>BTreeSet</code>.CbCreates an empty <code>LinkedList&lt;T&gt;</code>.AgCreates an empty deque.C`Creates an empty <code>binary_heap::Iter</code>.CdCreates an empty <code>binary_heap::IntoIter</code>.BnCreates an empty <code>btree_map::Iter</code>.CaCreates an empty <code>btree_map::IterMut</code>.CbCreates an empty <code>btree_map::IntoIter</code>.BnCreates an empty <code>btree_map::Keys</code>.C`Creates an empty <code>btree_map::Values</code>.CcCreates an empty <code>btree_map::ValuesMut</code>.CbCreates an empty <code>btree_map::IntoKeys</code>.CdCreates an empty <code>btree_map::IntoValues</code>.BoCreates an empty <code>btree_map::Range</code>.CbCreates an empty <code>btree_map::RangeMut</code>.BnCreates an empty <code>btree_set::Iter</code>.CbCreates an empty <code>btree_set::IntoIter</code>.BoCreates an empty <code>btree_set::Range</code>.C`Creates an empty <code>linked_list::Iter</code>.CdCreates an empty <code>linked_list::IntoIter</code>.CaCreates an empty <code>vec_deque::IterMut</code>.BnCreates an empty <code>vec_deque::Iter</code>.DeReturns an object that implements <code>Display</code> for safely \xe2\x80\xa6000CbDivides <code>Duration</code> by <code>f32</code>.0CbDivides <code>Duration</code> by <code>f64</code>.0CfReturns the amount of time elapsed since this instant.CgReturns the difference from this system time to the \xe2\x80\xa6CfAttribute macro applied to a function to give it a \xe2\x80\xa6CjAdds the contents of an iterator of entries to the set \xe2\x80\xa6CkAdds the contents of an iterator of entries to the list \xe2\x80\xa6CjAdds the contents of an iterator of entries to the map \xe2\x80\xa6210210CgReturns an error if a nonzero exit status was received.CkWas termination successful?  Returns a <code>Result</code>.CeReturns 2 raised to the power of an <code>f16</code>.0CeReturns 2 raised to the power of an <code>f32</code>.0CeReturns 2 raised to the power of an <code>f64</code>.0C`Returns the exponential of an <code>f128</code>.0BeExtract a vector from another vector.000CbReturns the absolute value of an <code>f16</code>.0CbReturns the absolute value of an <code>f32</code>.0CbReturns the absolute value of an <code>f64</code>.0BnGenerates the <code>FENCE.I</code> instruction0CcCreates an iterator that flattens nested structure.0EiConverts from <code>Option&lt;Option&lt;T&gt;&gt;</code> to <code>Option&lt;T&gt;</code>.FaConverts from <code>Result&lt;Result&lt;T, E&gt;, E&gt;</code> to <code>Result&lt;T, E&gt;</code>210ClReturns <code>a * b + c</code> for <code>f128</code> values.0CjReturns the value that would be obtained by taking the \xe2\x80\xa60000CiConverts an integer from big endian to the target\xe2\x80\x99s \xe2\x80\xa600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000EhCreates a type whose <code>fmt::Debug</code> and <code>fmt::Display</code> impls are \xe2\x80\xa6CnCreates an array where each element is produced by calling \xe2\x80\xa61CaCreates an iterator with the provided closure \xe2\x80\xa6120ClConverts an integer from little endian to the target\xe2\x80\x99s \xe2\x80\xa600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000EhCreates an ASCII character from the byte <code>b</code>, or returns <code>None</code>\xe2\x80\xa60AeGets the current GID.CeReturns a mutable reference to the output at this \xe2\x80\xa6DiReturns a mutable reference into the given <code>Arc</code>, if there \xe2\x80\xa6ClProvides a mutable reference to the element at the given \xe2\x80\xa6CcGets a mutable reference to the value in the entry.CmReturns a mutable reference to the value corresponding to \xe2\x80\xa6DhReturns a mutable reference into the given <code>Rc</code>, if there areCiReturns a mutable reference to an element or subslice \xe2\x80\xa6BoReturns a mutable subslice of <code>str</code>.DeGets a mutable reference to the data inside of this <code>Pin</code>.8BnGets exclusive access to the underlying value.D`Returns a mutable reference to the underlying <code>bool</code>.CfReturns a mutable reference to the underlying pointer.CfReturns a mutable reference to the underlying integer.000000000ClReturns a mutable reference to the value if initialized. \xe2\x80\xa6CcGets the mutable reference to the underlying value.CcReturns a mutable reference to the underlying data.000987?>002106543333333333CeReaches into this error indicating that a lock is \xe2\x80\xa611321111;<<>==CbGets a mutable reference to the underlying reader.CbGets a mutable reference to the underlying writer.0CmReturns a mutable reference to the inner error wrapped by \xe2\x80\xa6ClGets a mutable reference to the underlying value in this \xe2\x80\xa6CmGets mutable references to the underlying readers in this \xe2\x80\xa64AeGets the current PID.BeGets a shared reference out of a pin.07BjGets a reference to the underlying reader.BjGets a reference to the underlying writer.0CjReturns a reference to the inner error wrapped by this \xe2\x80\xa6ChGets a reference to the underlying value in this cursor.DeGets references to the underlying readers in this <code>Chain</code>.4AeGets the current UID.CiAccesses virtual machine instruction by unsigned half \xe2\x80\xa60CiAccesses virtual machine instruction by unsigned word \xe2\x80\xa60CnParses a file as an expression or an item according to the \xe2\x80\xa60CdThe child inherits from the corresponding parent \xe2\x80\xa6ClDoes something with each element of an iterator, passing \xe2\x80\xa60ClCalls a function with a reference to the contained value \xe2\x80\xa60100CnReturns the contained <code>Ok</code> value, but never panics.0DbConverts the <code>UniqueRc</code> into a regular <code>Rc</code>.0CcReturns the invalid sequence that caused a failure.00CfReturns <code>true</code> if this file type is a fifo.DkReturns <code>true</code> if the path exists on disk and is pointing at \xe2\x80\xa6DiReturns <code>true</code> if this metadata is for a regular file. The \xe2\x80\xa6CkTests whether this file type represents a regular file. \xe2\x80\xa6CaReturns <code>true</code> if the channel is full.0FeReturns <code>true</code> if this address is an <code>IPv4</code> address, and <code>false</code> \xe2\x80\xa6EeReturns <code>true</code> if the IP address in this <code>SocketAddr</code> is an \xe2\x80\xa610FeReturns <code>true</code> if this address is an <code>IPv6</code> address, and <code>false</code> \xe2\x80\xa6101DeReturns <code>true</code> if the option is a <code>None</code> value.0CaReturns <code>true</code> if the pointer is null.0ChReturns <code>true</code> for each element that is null.0110000DeReturns <code>true</code> if the option is a <code>Some</code> value.0CiReturns true if this <code>Duration</code> spans no time.0CjA SIMD vector with one element of type <code>isize</code>.00CkA SIMD vector with two elements of type <code>isize</code>.00ClA SIMD vector with four elements of type <code>isize</code>.00CmA SIMD vector with eight elements of type <code>isize</code>.00CjCross adds and subtracts packed 16-bit signed numbers, \xe2\x80\xa60CjCross subtracts and adds packed 16-bit signed numbers, \xe2\x80\xa60CnLogical saturating left then arithmetic right shift packed \xe2\x80\xa6000CmStraight adds and subtracts packed 16-bit signed numbers, \xe2\x80\xa60CmStraight subtracts and adds packed 16-bit signed numbers, \xe2\x80\xa60DkReads contiguous elements from <code>slice</code>. Elements are read so \xe2\x80\xa60CdReturns the base 2 logarithm of an <code>f16</code>.0CdReturns the base 2 logarithm of an <code>f32</code>.0CdReturns the base 2 logarithm of an <code>f64</code>.0CfReturns the natural logarithm of an <code>f128</code>.0FdMaps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;T, F&gt;</code> by applying a function \xe2\x80\xa6D`Maps a <code>Poll::Ready&lt;Result&lt;T, E&gt;&gt;</code> to \xe2\x80\xa6DnMaps a <code>Poll::Ready&lt;Option&lt;Result&lt;T, E&gt;&gt;&gt;</code> to \xe2\x80\xa6201CgA SIMD mask with one element for vectors with 8-bit \xe2\x80\xa600ChA SIMD mask with two elements for vectors with 8-bit \xe2\x80\xa600CiA SIMD mask with four elements for vectors with 8-bit \xe2\x80\xa600CjA SIMD mask with eight elements for vectors with 8-bit \xe2\x80\xa600CnReturns an iterator over the disjoint matches of a pattern \xe2\x80\xa6CmReturns whether the given expression matches the provided \xe2\x80\xa610ChReturns the maximum of the two numbers, propagating NaN.0000000ClThe message that was given to the <code>panic!</code> macro.BiReturns the message in <code>self</code>.ChReturns the minimum of the two numbers, propagating NaN.0000000DjFused multiply-add. Computes <code>(self * a) + b</code> with only one \xe2\x80\xa60FdExperimental version of <code>mul_add</code> in <code>core</code>. See <code>f32::mul_add</code> \xe2\x80\xa6FdExperimental version of <code>mul_add</code> in <code>core</code>. See <code>f64::mul_add</code> \xe2\x80\xa62222DhElementwise fused multiply-add. Computes <code>(self * a) + b</code> \xe2\x80\xa60CeMultiplies <code>Duration</code> by <code>f32</code>.0CeMultiplies <code>Duration</code> by <code>f64</code>.0EeSame as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>).CkConsume and return the next value of this iterator if a \xe2\x80\xa60ChReturns the least number greater than <code>self</code>.0000000DeGets the value of the <code>TCP_NODELAY</code> option on this socket.AiOpen a file or directory.CmReturns the formatting options this formatter corresponds \xe2\x80\xa600BaReturns a new OpenOptions object.CnReturns the option if it contains a value, otherwise calls \xe2\x80\xa6FbCalls <code>op</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> \xe2\x80\xa610AgThe string Pattern API.00BnReturns the payload associated with the panic.0CiCreates a future which never resolves, representing a \xe2\x80\xa60DeRaw, unsafe pointers, <code>*const T</code>, and <code>*mut T</code>.0DcCreates a future that wraps a function returning <code>Poll</code>.0DcPlatform-specific intrinsics for the <code>PowerPC</code> platform.CjRaises an <code>f128</code> to an <code>f128</code> power.0BoRaises an <code>f16</code> to an integer power.0BoRaises an <code>f32</code> to an integer power.0BoRaises an <code>f64</code> to an integer power.0A`The core preludeAjThe portable SIMD prelude.A`The Rust Prelude1A`The I/O Prelude.CjA prelude for conveniently writing platform-specific code.00BnPrints to the standard output, with a newline.BdA module for working with processes.DkUnix-specific extensions to primitives in the <code>std::process</code> \xe2\x80\xa6CdWindows-specific extensions to primitives in the \xe2\x80\xa6DkLinux-specific extensions to primitives in the <code>std::process</code>\xe2\x80\xa6DjTakes an iterator and generates <code>Self</code> from the elements by \xe2\x80\xa6CjIterates over the entire iterator, multiplying all the \xe2\x80\xa60EeTakes each element in the <code>Iterator</code>: if it is a <code>None</code>, no \xe2\x80\xa6EeTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no \xe2\x80\xa63210ClProvides type-based access to context intended for error \xe2\x80\xa60CgAppend literal text to the command line without any \xe2\x80\xa6BoGets an immutable pointer to the wrapped value.CdGets a mutable pointer to the wrapped value. The \xe2\x80\xa6BlGets a mutable pointer to the wrapped value.210DjReturns an iterator over <code>chunk_size</code> elements of the slice \xe2\x80\xa60CkCross halves of adds and subtracts packed 16-bit signed \xe2\x80\xa60CkCross halves of subtracts and adds packed 16-bit signed \xe2\x80\xa60CeReads a number of bytes starting from a given offset.0BmReallocates memory with the global allocator.DiShrinks or grows a block of memory to the given <code>new_size</code> \xe2\x80\xa60010BnSifts the current element to its new position.0ClAdds a value to the set, replacing the existing element, \xe2\x80\xa6EdReplaces the value at <code>self</code> with <code>src</code>, returning the old \xe2\x80\xa6CnReplaces the actual value in the option by the value given \xe2\x80\xa6FeMoves <code>src</code> into the pointed <code>dst</code>, returning the previous <code>dst</code> \xe2\x80\xa62EhMoves <code>src</code> into the referenced <code>dest</code>, returning the previous \xe2\x80\xa6DkReplaces the contained value with <code>val</code>, and returns the old \xe2\x80\xa6ClReplaces the wrapped value with a new one, returning the \xe2\x80\xa6DhReplace the value in this <code>UnsafeCell</code> and return the old \xe2\x80\xa66CfReplaces all matches of a pattern with another string.657DiReplaces the contained value with <code>value</code>, and returns the \xe2\x80\xa6000CfReplaces the contained value, returning the old value.05436CmAdds a value to the set, replacing the existing value, if \xe2\x80\xa6;DkReserves capacity for at least <code>additional</code> more elements to \xe2\x80\xa6DhReserves capacity for at least <code>additional</code> elements more \xe2\x80\xa61DjReserves capacity for at least <code>additional</code> bytes more than \xe2\x80\xa6DkReserves capacity for at least <code>additional</code> more capacity to \xe2\x80\xa6EaInvokes <code>reserve</code> on the underlying instance of <code>OsString</code>.424344CfReverses the order of elements in the slice, in place.BcReverses the <code>Ordering</code>.BnReverse the order of the elements in the mask.C`Reverse the order of the elements in the vector.3210DcPlatform-specific intrinsics for the <code>riscv32</code> platform.DcPlatform-specific intrinsics for the <code>riscv64</code> platform.ClReturns an iterator over subslices separated by elements \xe2\x80\xa6CmReturns an iterator over substrings of this string slice, \xe2\x80\xa610CnStraight halves of adds and subtracts packed 16-bit signed \xe2\x80\xa60CnStraight halves of subtracts and adds packed 16-bit signed \xe2\x80\xa60CeWrites the values in a SIMD vector to potentially \xe2\x80\xa60CnCompare whether 8-bit packed signed integers are less than \xe2\x80\xa6000CnSends data on the socket to the given address. On success, \xe2\x80\xa6CbSends data on the socket to the specified address.lSet the GID.ChForces the length of the vector to <code>new_len</code>.0CjTruncates or extends the underlying file, updating the \xe2\x80\xa6lSet the PID.DaSets the value for the <code>IP_TTL</code> option on this socket.00lSet the UID.EfSets the environment variable <code>key</code> to the value <code>value</code> for \xe2\x80\xa6BhNumerically casts a vector, elementwise.0BjTests elementwise equality of two vectors.CnTest if each element is equal to the corresponding element \xe2\x80\xa6100E`Tests if <code>x</code> is greater than or equal to <code>y</code>, elementwise.ChTest if each element is greater than or equal to the \xe2\x80\xa6100DdTests if <code>x</code> is greater than <code>y</code>, elementwise.CjTest if each element is greater than the corresponding \xe2\x80\xa6100DmTests if <code>x</code> is less than or equal to <code>y</code>, elementwise.CeTest if each element is less than or equal to the \xe2\x80\xa6100DaTests if <code>x</code> is less than <code>y</code>, elementwise.CgTest if each element is less than the corresponding \xe2\x80\xa6100CeTests elementwise inequality equality of two vectors.CjTest if each element is not equal to the corresponding \xe2\x80\xa6100An\xe2\x80\x9cOrs\xe2\x80\x9d vectors elementwise.0CnSimultaneously computes the sine and cosine of the number, \xe2\x80\xa6000BiReturns the sine of an <code>f128</code>.0AlThe size of a type in bytes.CiReturns the size of the type associated with this vtable.BdReturns the size of a type in bytes.210CmMultiply signed to unsigned 8-bit and add 16-bit elements \xe2\x80\xa60ChSorts the slice in ascending order with a comparison \xe2\x80\xa6CkReturns an iterator starting with the current error and \xe2\x80\xa60CfReturns the spacing of this punctuation character, \xe2\x80\xa6EgCreates a new diagnostic with the given <code>level</code> and <code>message</code> \xe2\x80\xa6BnReturns the square root of an <code>f16</code>0BnReturns the square root of an <code>f32</code>0BnReturns the square root of an <code>f64</code>0AoReturns the file type and mode.CiReturns the device ID that this file represents. Only \xe2\x80\xa6CnReturns the size of the file (if it is a regular file or a \xe2\x80\xa6CkStandard deviation: the square root of the sample variance.CgCreates an iterator starting at the same point, but \xe2\x80\xa600CiA compile-time helper to subtract 1 for exclusive ranges.EgReturns a <code>Span</code> that is a subset of <code>self.span()</code> containing \xe2\x80\xa6CiWas termination successful? Signal termination is not \xe2\x80\xa6CnCreates a new vector from the elements of <code>vector</code>.00BnCreates a new symbolic link on the filesystem.AhCreates a symbolic link.BaGenerates the syscall instruction0CfTakes the value out of the option, but only if the \xe2\x80\xa60BfRaw transmutation to <code>u16</code>.BfRaw transmutation to <code>u32</code>.BfRaw transmutation to <code>u64</code>.BgRaw transmutation to <code>u128</code>.CmRaw transmutation to an unsigned integer vector type with \xe2\x80\xa6DiConverts an IPv4 address into a <code>u32</code> representation using \xe2\x80\xa6DjConverts an IPv6 address into a <code>u128</code> representation using \xe2\x80\xa6BeRaw transmutation to <code>u16</code>76543321DfGets this ASCII character as a <code>char</code> Unicode Scalar Value.0DiConverts this address to an <code>IPv4</code> address if it is either \xe2\x80\xa60EhA fallible function <code>f</code> applied to each element on array <code>self</code>\xe2\x80\xa6DiTries to makes a new <code>Ref</code> for a component of the borrowed \xe2\x80\xa6DcTries to makes a new <code>RefMut</code> for a component of the \xe2\x80\xa6210E`Constructs a new <code>Arc&lt;T&gt;</code>, returning an error if allocation \xe2\x80\xa6DiMoves a type to the heap with its <code>Metadata</code> stored in the \xe2\x80\xa6DdAllocates memory on the heap then places <code>x</code> into it, \xe2\x80\xa6DhConstructs a new <code>Rc&lt;T&gt;</code>, returning an error if the \xe2\x80\xa63210DmConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>, return an error if \xe2\x80\xa60CbGets the <code>TypeId</code> of <code>self</code>.CfGets an identifier which is globally unique to the \xe2\x80\xa610CkCompare whether 8-bit packed unsigned integers are less \xe2\x80\xa6000CjAdds packed 16-bit unsigned numbers, saturating at the \xe2\x80\xa60CkSubtracts packed 16-bit unsigned numbers, saturating at \xe2\x80\xa60ClCreates a Unix Datagram socket which is not bound to any \xe2\x80\xa6EfAttempts to upgrade the <code>Weak</code> pointer to an <code>Arc</code>, delaying \xe2\x80\xa6EeAttempts to upgrade the <code>Weak</code> pointer to an <code>Rc</code>, delaying \xe2\x80\xa610CnHalves the sum of packed 16-bit unsigned numbers, dropping \xe2\x80\xa60CkHalves the subtraction result of packed 16-bit unsigned \xe2\x80\xa60CjA SIMD vector with one element of type <code>usize</code>.00CkA SIMD vector with two elements of type <code>usize</code>.00ClA SIMD vector with four elements of type <code>usize</code>.00CmA SIMD vector with eight elements of type <code>usize</code>.00CkPerforms a bitwise or of the two input 128-bit vectors, \xe2\x80\xa600DjCopies the current location of arglist <code>src</code> to the arglist \xe2\x80\xa60AnC\xe2\x80\x99s \xe2\x80\x9cvariable arguments\xe2\x80\x9dCgAbsolute difference and accumulate (64-bit) Arm\xe2\x80\x99s \xe2\x80\xa6000CeAbsolute difference between the arguments Arm\xe2\x80\x99s \xe2\x80\xa6000C`Absolute value (wrapping). Arm\xe2\x80\x99s documentation0BjBitwise exclusive OR Arm\xe2\x80\x99s documentation0BaVector add. Arm\xe2\x80\x99s documentation000BhVector bitwise and Arm\xe2\x80\x99s documentation000ChReturns an iterator of (variable, value) pairs of OS \xe2\x80\xa6BoVector bitwise bit clear. Arm\xe2\x80\x99s documentation000BeBitwise Select. Arm\xe2\x80\x99s documentation00000CdCompare bitwise Equal (vector) Arm\xe2\x80\x99s documentation00000CjCompare signed greater than or equal Arm\xe2\x80\x99s documentation0CbCompare unsigned greater than or equal Arm\xe2\x80\x99s \xe2\x80\xa60CaCompare signed greater than Arm\xe2\x80\x99s documentation0CcCompare unsigned greater than Arm\xe2\x80\x99s documentation0CgCompare signed less than or equal Arm\xe2\x80\x99s documentation0CiCompare unsigned less than or equal Arm\xe2\x80\x99s documentation0BmCount leading sign bits Arm\xe2\x80\x99s documentation000BnCompare signed less than Arm\xe2\x80\x99s documentation0C`Compare unsigned less than Arm\xe2\x80\x99s documentation0BmCount leading zero bits Arm\xe2\x80\x99s documentation000C`Population count per byte. Arm\xe2\x80\x99s documentation00000kVector abs.0oVector AbsolutekVector add.0jVector AddkVector and.0jVector ANDkVector avg.0nVector AverageB`Vector Convert to Floating-Point0B`Vector Convert to Signed Integer0BbVector Convert to Unsigned Integer0kVector XNORAlVector Load Element Indexed.0BhVector Load Indexed Least Recently Used.0kVector max.0nVector MaximumkVector min.0oVector  MinimumoVector Multiply00kVector nor.0jVector NORAiVector OR with Complement00BdVector Element Rotate Left ImmediatemVector Select00AiVector Shift Left by ByteAhVector Shift Left Double0B`Vector Shift Left Double by ByteAfVector Shift Left Long0AaVector Shift LeftAkVector Shift Left by Octets0AjVector Shift Left Variable0AlVector Shift Right Algebraic00AjVector Shift Right by ByteAgVector Shift Right Long0AbVector Shift RightAlVector Shift Right by Octets0AkVector Shift Right Variable0AlVector Store Element Indexed0BhVector Store Indexed Least Recently Used0kVector sub.0oVector SubtractkVector xor.0jVector XORAcVSX Unaligned Store0lVector StoreCjVector bitwise exclusive or (vector) Arm\xe2\x80\x99s documentation000CiExtract vector from pair of vectors Arm\xe2\x80\x99s documentation00000ChLoad multiple single-element structures to one, two, \xe2\x80\xa600CmLoad multiple 2-element structures to two registers Arm\xe2\x80\x99\xe2\x80\xa600000ClLoad multiple 3-element structures to three registers Arm\xe2\x80\xa600000CnLoad multiple 4-element structures to four registers Arm\xe2\x80\x99\xe2\x80\xa600000BfMaximum (vector) Arm\xe2\x80\x99s documentation000BfMinimum (vector) Arm\xe2\x80\x99s documentation000CaMultiply-add to accumulator Arm\xe2\x80\x99s documentation000ChMultiply-subtract from accumulator Arm\xe2\x80\x99s documentation000BiPolynomial multiply Arm\xe2\x80\x99s documentation0AnMultiply Arm\xe2\x80\x99s documentation000BiVector bitwise not. Arm\xe2\x80\x99s documentation00000AlNegate Arm\xe2\x80\x99s documentation0CeVector bitwise inclusive OR NOT Arm\xe2\x80\x99s documentation000CdVector bitwise or (immediate, inclusive) Arm\xe2\x80\x99s \xe2\x80\xa6000CnPrint formatted output from a kernel to a host-side output \xe2\x80\xa6BgSigned Shift left Arm\xe2\x80\x99s documentation0BiUnsigned Shift left Arm\xe2\x80\x99s documentation0CkStore multiple single-element structures from one, two, \xe2\x80\xa600CmStore multiple 2-element structures from two registers Arm\xe2\x80\xa600000ClStore multiple 3-element structures from three registers \xe2\x80\xa600000CnStore multiple 4-element structures from four registers Arm\xe2\x80\xa600000AnSubtract Arm\xe2\x80\x99s documentation000BhTranspose elements Arm\xe2\x80\x99s documentation00000CdSigned compare bitwise Test bits nonzero Arm\xe2\x80\x99s \xe2\x80\xa6000CfUnsigned compare bitwise Test bits nonzero Arm\xe2\x80\x99s \xe2\x80\xa60BcUnzip vectors Arm\xe2\x80\x99s documentation00000BaZip vectors Arm\xe2\x80\x99s documentation00000DeAdds a new child diagnostic message to <code>self</code> with the \xe2\x80\xa6EeCreates a new <code>Diagnostic</code> with the given <code>message</code> at the spanCmReturns an iterator over all contiguous windows of length \xe2\x80\xa60CmPlatform-specific extensions to <code>std</code> for Windows.CgWrites formatted data into a buffer, with a newline \xe2\x80\xa60DgReturns the number of bytes written to the <code>BorrowedBuf</code> \xe2\x80\xa60CgA trait to borrow the handle from an underlying object.CgA trait to borrow the socket from an underlying object.CcExtension methods for ASCII-subset only operations.fU+002A0CkAn integer type which can be safely shared between threads.000BaAn ordered map based on a B-Tree.00BaAn ordered set based on a B-Tree.00CcMaximum number of digits in decimal base of the \xe2\x80\xa6nBorrowed data.0fU+00410fU+00420fU+00430fU+00440fU+00450fU+00460fU+00470fU+00480fU+00490fU+004A0fU+004B0fU+004C0fU+004D0fU+004E0fU+004F0fU+00500fU+00510fU+00520fU+00530fU+00540fU+00550fU+00560fU+00570fU+00580fU+00590fU+005A0DgA backtrace has been captured and the <code>Backtrace</code> should \xe2\x80\xa6BmOs-specific extensions for <code>Child</code>BlThe coroutine completed with a return value.0BmVector of constant pointers to the same type.00CeMove on to the next phase of the operation as normal.0AcDeadlock (avoided).CnA struct to help with <code>fmt::Debug</code> implementations.00000DhUsed for mutable dereferencing operations, like in <code>*v = 1;</code>.0BgA marker for types that can be dropped.0CfDevice namespace prefix, e.g., <code>\\\\.\\COM42</code>.CfEntries returned by the <code>ReadDir</code> iterator.CnCapturing a backtrace has been disabled through either the \xe2\x80\xa6DgA <code>Duration</code> type to represent a span of time, typically \xe2\x80\xa60AcAn exclusive bound.000ClThis type represents the status code the current process \xe2\x80\xa6CnA structure representing a type of file with accessors for \xe2\x80\xa6fU+000C0CaAn async iterator that was created from iterator.0fU+002E0oInfinity (\xe2\x88\x9e).000CgInfinity (\xe2\x88\x9e). Use <code>f32::INFINITY</code> instead.CgInfinity (\xe2\x88\x9e). Use <code>f64::INFINITY</code> instead.222210AcAn inclusive bound.000DeAn iterator that infinitely <code>accept</code>s connections on a \xe2\x80\xa6DeAn iterator over incoming connections to a <code>UnixListener</code>.DkUsed for indexing operations (<code>container[index]</code>) in mutable \xe2\x80\xa60CkPositive or negative infinity, which often results from \xe2\x80\xa60BgAn iterator that moves out of a vector.DbAn owning iterator over the elements of a <code>BinaryHeap</code>.DbAn owning iterator over the elements of a <code>LinkedList</code>.D`An owning iterator over the elements of a <code>VecDeque</code>.DjAn owning iterator over the entries of a <code>BTreeMap</code>, sorted \xe2\x80\xa6DcAn owning iterator over the items of a <code>BTreeSet</code> in \xe2\x80\xa6AjA by-value array iterator.C`Which kind of iterator are we turning this into?EbAn iterator over the value in <code>Some</code> variant of an <code>Option</code>.EaAn iterator over the value in a <code>Ok</code> variant of a <code>Result</code>.EhAn iterator over <code>TokenStream</code>\xe2\x80\x99s <code>TokenTree</code>s. The iteration \xe2\x80\xa64321DkAn owning iterator over messages on a <code>Receiver</code>, created by \xe2\x80\xa60;CnAn owning iterator over the entries of a <code>HashMap</code>.;87:9ClAn owning iterator over the items of a <code>HashSet</code>.ClAn owning iterator over the keys of a <code>BTreeMap</code>.CkAn owning iterator over the keys of a <code>HashMap</code>.1A`An IPv4 address.0A`An IPv6 address.0BcA trait for dealing with iterators.0CaA value which is initialized on the first access.00CgError returned from <code>TokenStream::from_str</code>.fU+000A0BoCreated with the method <code>lines_any</code>.00CiA thread local storage (TLS) key which owns its contents.CkA struct containing information about the location of a \xe2\x80\xa60Aj<code>e</code> formatting.00Aj<code>x</code> formatting.00DgAn iterator that only accepts elements while <code>predicate</code> \xe2\x80\xa60CfThis struct is used to iterate through the control \xe2\x80\xa6DfThe type for metadata in pointers and references to <code>Self</code>.0BbMetadata information about a file.BfAn entity was not found, often a file.ChAn error indicating that an interior nul byte was found.000AbAn occupied entry.00000CcA cell which can nominally be written to only once.0CnA synchronization primitive which can nominally be written \xe2\x80\xa6DfAn iterator that yields a single element of type <code>A</code> by \xe2\x80\xa60DfAn <code>Ordering</code> is the result of a comparison between two \xe2\x80\xa6AgAtomic memory orderings10CcPlatform-specific extensions to <code>OsStr</code>.CbWindows-specific extensions to <code>OsStr</code>.1ClA type that can represent owned, mutable platform-native \xe2\x80\xa60DcAn iterator with a <code>peek()</code> that returns an optional \xe2\x80\xa60fU+002B0CiThe lock could not be acquired because another thread \xe2\x80\xa60BnCreated with the method <code>rmatches</code>.00CgA mutable iterator over a sub-range of entries in a \xe2\x80\xa60DhA <code>RawWaker</code> allows the implementor of a task executor to \xe2\x80\xa60CjAllows value to be reborrowed as exclusive, creating a \xe2\x80\xa60CmIndicates that a struct can be used as a method receiver. \xe2\x80\xa60EfThe receiving half of Rust\xe2\x80\x99s <code>channel</code> (or <code>sync_channel</code>) \xe2\x80\xa60DkAllows retrieving the canonical type implementing <code>Try</code> that \xe2\x80\xa6DhThe type of the value passed to <code>FromResidual::from_residual</code>10B`A searcher for a string pattern.BdAssociated searcher for this pattern1010CiEnumeration of possible methods to seek within an I/O \xe2\x80\xa6fU+000E0BnPossible values which can be passed to the \xe2\x80\xa6DkSupporting trait for <code>Simd::cast</code>.  Typically doesn\xe2\x80\x99t need \xe2\x80\xa60C`Operations on SIMD vectors of unsigned integers.00CnAn iterator over the mutable subslices of the vector which \xe2\x80\xa600CnThis trait provides a possibly-temporary implementation of \xe2\x80\xa6A`Call a function.0ChType of the test according to the Rust book conventions.0BiA unique identifier for a running thread.CkThe I/O operation\xe2\x80\x99s timeout expired, causing it to be \xe2\x80\xa6ChA trait for converting a value to a <code>String</code>.0DgTypes that can be interpolated inside a <code>quote!</code> invocation.BaA uniquely owned <code>Rc</code>.0DgUnit-tests are expected to be in the <code>src</code> folder of the \xe2\x80\xa60ClA SIMD vector of unsigned integers with the same element \xe2\x80\xa600Aj<code>E</code> formatting.00Aj<code>X</code> formatting.00DdWith this, <code>TransmuteFrom</code> assumes only that you have \xe2\x80\xa60CnThe error type for operations interacting with environment \xe2\x80\xa6BjA marker trait for phantom variance types.0CiA double-ended queue implemented with a growable ring \xe2\x80\xa600CaVerbatim prefix, e.g., <code>\\\\?\\cat_pics</code>.ClProvides intentionally-wrapped arithmetic on <code>T</code>.0CkCRC32 single round checksum for bytes (8 bits). Arm\xe2\x80\x99s \xe2\x80\xa60ClCRC32 single round checksum for quad words (64 bits). Arm\xe2\x80\xa6ClCRC32 single round checksum for bytes (16 bits). Arm\xe2\x80\x99s \xe2\x80\xa60ClCRC32 single round checksum for bytes (32 bits). Arm\xe2\x80\x99s \xe2\x80\xa60Cn128-bit wide set of eight <code>u16</code> types, x86-specific0Ck256-bit wide set of 16 <code>u16</code> types, x86-specific0Ck512-bit wide set of 32 <code>u16</code> types, x86-specific0DfThe <code>__mmask8</code> type used in AVX-512 intrinsics, a 8-bit \xe2\x80\xa60BgSaturating two 16-bit integer additionsBiSaturating two 16-bit integer subtractionCkReads the current value of the processor\xe2\x80\x99s time-stamp \xe2\x80\xa60CaReturns the 16-bit signed saturated equivalent ofBkSigned halving parallel byte-wise addition.BnSigned halving parallel byte-wise subtraction.AkInsert a SMLABB instructionAkInsert a SMLABT instructionAkInsert a SMLATB instructionAkInsert a SMLATT instructionAkInsert a SMLAWB instructionAkInsert a SMLAWT instructionBbSigned Dual Multiply Add Reversed.AkInsert a SMULBB instructionAkInsert a SMULTB instruction0AkInsert a SMULTT instructionAkInsert a SMULWB instructionAkInsert a SMULWT instructionBgSigned Dual Multiply Subtract Reversed.CiStarts a new transaction. When the transaction starts \xe2\x80\xa6BoSum of 8-bit absolute differences and constant.EeReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>.0CdReturns an integer with the reversed byte order of xG`Restores the <code>XMM</code>, <code>MMX</code>, <code>MXCSR</code>, and <code>x87</code> FPU registers from \xe2\x80\xa60CePerforms a full or partial restore of the enabled \xe2\x80\xa60ClPerforms a full or partial save of the enabled processor \xe2\x80\xa6EbComputes the absolute difference between <code>self</code> and <code>other</code>.00000000000CkLanewise absolute difference. Every element becomes the \xe2\x80\xa60111111111111100001CiMakes the path absolute without accessing the filesystem.BnReturns the last access time of this metadata.C`AES final round decryption instruction for RV32.C`AES final round encryption instruction for RV32.CaAES middle round decryption instruction for RV64.CaAES middle round encryption instruction for RV64.CgThis instruction implements part of the KeySchedule \xe2\x80\xa6B`The minimum alignment of a type.CjReturns the alignment of the type associated with this \xe2\x80\xa6CkReturns the ABI-required minimum alignment of a type in \xe2\x80\xa6210CjCreates a layout describing the record that can hold a \xe2\x80\xa6CmTransmutes the slice to a slice of another type, ensuring \xe2\x80\xa6101BgAttempts to allocate a block of memory.00BiForces the allocation of space in a file.FeReturns <code>None</code> if the option is <code>None</code>, otherwise calls <code>f</code> with \xe2\x80\xa6FbCalls <code>op</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> \xe2\x80\xa610BkGets a raw pointer to the underlying array.BiGets a reference to the underlying array.CiReturns an array reference containing the entire SIMD \xe2\x80\xa6210DhReturns <code>Some</code> if the value is within the ASCII range, or \xe2\x80\xa6CgConverts this array of bytes into an array of ASCII \xe2\x80\xa6DgIf this slice <code>is_ascii</code>, returns it as a slice of ASCII \xe2\x80\xa6DhIf this string slice <code>is_ascii</code>, returns it as a slice of \xe2\x80\xa6ChIf the value of this byte is within the ASCII range, \xe2\x80\xa643210DfReturns the contents of this <code>CString</code> as a slice of bytes.DdReturns a slice of <code>u8</code>s bytes that were attempted to \xe2\x80\xa6CnReturns a byte slice of this <code>String</code>\xe2\x80\x99s contents.1DfViews this slice of ASCII characters as a slice of <code>u8</code> \xe2\x80\xa6DgReturns the contents of this <code>MaybeUninit</code> as a slice of \xe2\x80\xa6CkConverts a string slice to a byte slice. To convert the \xe2\x80\xa6121054134CnGets the underlying byte view of the <code>OsStr</code> slice.0D`Extracts a <code>CStr</code> slice containing the entire string.0EhConverts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to \xe2\x80\xa6EnConverts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;Result&lt;T, E&gt;</code>) to \xe2\x80\xa610CmReturns the total number of nanoseconds contained by this \xe2\x80\xa60CkViews the underlying data as a subslice of the original \xe2\x80\xa60CkReturns a slice which contains items not yet handled by \xe2\x80\xa6ChReturns the remaining items of this iterator as a slice.0BnExtracts a slice containing the entire vector.CnReturns a slice of all values in the underlying vector, in \xe2\x80\xa6CjReturns a raw pointer to a slice containing the entire \xe2\x80\xa6CnReturns a slice containing the entire array. Equivalent to \xe2\x80\xa6ClReturns an immutable slice of all elements that have not \xe2\x80\xa6CnReturns a slice of the contained value, if any. If this is \xe2\x80\xa6DcCurrently, the consumers of <code>SlicePattern</code> need a slice.99843219987765CiGet the underlying bytes as a slice with the original \xe2\x80\xa6BnReturns the alignment as a <code>usize</code>.0DdUnstable module containing the unstable <code>autodiff</code> macro.CmGenerates the LLVM body for the automatic differentiation \xe2\x80\xa6CkThis module provides support for automatic differentiation.1DjProvides a mutable reference to the back element, or <code>None</code> \xe2\x80\xa6CmProvides a mutable reference to back element of the cursor\xe2\x80\xa61110CjReturns the value that would be obtained by taking the \xe2\x80\xa60000FeConverts the <code>ControlFlow</code> into an <code>Result</code> which is <code>Ok</code> if the \xe2\x80\xa60BnAdds an unsigned offset in bytes to a pointer.0CnCalculates the offset from a pointer in bytes (convenience \xe2\x80\xa6110CeSubtracts an unsigned offset in bytes from a pointer.01001BmEquivalent to C\xe2\x80\x99s <code>double</code> type.00FeEquivalent to C\xe2\x80\x99s <code>size_t</code> type, from <code>stddef.h</code> (or <code>cstddef</code> \xe2\x80\xa60AaC string literal.CeEquivalent to C\xe2\x80\x99s <code>unsigned short</code> type.00AlPerforms the call operation.0ClReturns the total number of elements the vector can hold \xe2\x80\xa6CkReturns the number of elements the binary heap can hold \xe2\x80\xa6CmReturns the number of elements the deque can hold without \xe2\x80\xa6ChReturns this <code>String</code>\xe2\x80\x99s capacity, in bytes.BjReturns the length of the internal buffer.BiReturns the total capacity of the buffer.BjReturns the available space in the cursor.DdReturns the capacity this <code>OsString</code> can hold without \xe2\x80\xa6EbInvokes <code>capacity</code> on the underlying instance of <code>OsString</code>.C`If the channel is bounded, returns its capacity.096CkReturns the number of elements the map can hold without \xe2\x80\xa69CkReturns the number of elements the set can hold without \xe2\x80\xa69ClReturns the number of bytes the internal buffer can hold \xe2\x80\xa6076BcReturns the capacity of the buffer.BlChanges constness without changing the type.0000ClReturns the smallest integer greater than or equal to an \xe2\x80\xa60EgExpands all <code>#[cfg]</code> and <code>#[cfg_attr]</code> attributes in the code \xe2\x80\xa60DgReturns an iterator over the children diagnostics of <code>self</code>.C`Returns an iterator over the slice producing \xe2\x80\xa60CnReturns the floating point category of the number. If only \xe2\x80\xa60000000EfReturns <code>true</code> if the <code>LinkedList</code> contains an element equal \xe2\x80\xa6DkReturns <code>true</code> if the deque contains an element equal to the \xe2\x80\xa6DiReturns <code>true</code> if the set contains an element equal to the \xe2\x80\xa6DgReturns <code>true</code> if the slice contains an element with the \xe2\x80\xa6DiReturns <code>true</code> if the given pattern matches a sub-slice of \xe2\x80\xa6DiReturns <code>true</code> if <code>item</code> is contained in the range.0000000000210000000000CfReturns <code>true</code> if the set contains a value.465BeSkip to the next iteration of a loop.DkReturns a number composed of the magnitude of <code>self</code> and the \xe2\x80\xa6000DhReturns each element with the magnitude of <code>self</code> and the \xe2\x80\xa6111100DiCreates a <code>NonNull</code> that is dangling, but well-aligned for \xe2\x80\xa60ClCreates a new pointer that is dangling, but non-null and \xe2\x80\xa6DfCreates a new <code>NonNull</code> that is dangling, but well-aligned.210BmReturns a raw pointer to the underlying data.0000ClRemoves all but the first of consecutive elements in the \xe2\x80\xa60CbA span that resolves at the macro definition site.CiForcibly captures a disabled backtrace, regardless of \xe2\x80\xa6EcCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the \xe2\x80\xa600000000000000000000000000000000000DoAttempts to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a \xe2\x80\xa6C`Attempts to downcast the box to a concrete type.00DkAttempts to downcast the <code>Rc&lt;dyn Any&gt;</code> to a concrete type.21110111CnAttempts to downcast the custom boxed error to <code>E</code>.CjReturns the positive duration which represents how far \xe2\x80\xa6ChBorrows each element mutably and returns an array of \xe2\x80\xa60CkBorrows each element and returns an array of references \xe2\x80\xa60BmPrints to the standard error, with a newline.CfReturns 2 raised to the power of an <code>f128</code>.0DkGenerates the <code>f32.ceil</code> instruction, returning the smallest \xe2\x80\xa600DiGenerates the <code>f32.sqrt</code> instruction, returning the square \xe2\x80\xa600ClCompares two 128-bit vectors as if they were two vectors \xe2\x80\xa600000000000000000DkGenerates the <code>f64.ceil</code> instruction, returning the smallest \xe2\x80\xa600DiGenerates the <code>f64.sqrt</code> instruction, returning the square \xe2\x80\xa600222222222222222222CcReturns the absolute value of an <code>f128</code>.0BfLogical \xe2\x80\x9cor\xe2\x80\x9d with a boolean value.CkPerforms a bitwise \xe2\x80\x9cor\xe2\x80\x9d operation on the address of \xe2\x80\xa6BhBitwise \xe2\x80\x9cor\xe2\x80\x9d with the current value.000000000210000000000CmReturns the contents of the \xe2\x80\x9cfront\xe2\x80\x9d slice as returned \xe2\x80\xa6CkReturns the contents of the internal buffer, filling it \xe2\x80\xa6ClApplies function to the elements of iterator and returns \xe2\x80\xa600CiCreates an iterator that works like map, but flattens \xe2\x80\xa600DfReturns the largest integer less than or equal to an <code>f16</code>.0DfReturns the largest integer less than or equal to an <code>f32</code>.0DfReturns the largest integer less than or equal to an <code>f64</code>.0CjReturns the flow information associated with this address.0BoCalls a closure on each element of an iterator.00CdConverts a vector of integers to a mask, where 0 \xe2\x80\xa60CfConverts a reference to T into a slice of length 1 \xe2\x80\xa6DkConverts a mutable reference to <code>T</code> into a mutable reference \xe2\x80\xa6BnConverts a mutable reference to a raw pointer.CoConverts a mutable reference to a <code>NonNull</code> pointer.3FcBuild a <em>mutable</em> reference to an <code>Exclusive&lt;T&gt;</code> from a <em>mutable</em>\xe2\x80\xa6CcGets atomic access to a <code>&amp;mut bool</code>.B`Gets atomic access to a pointer.C`Get atomic access to a <code>&amp;mut i8</code>.C`Get atomic access to a <code>&amp;mut u8</code>.CaGet atomic access to a <code>&amp;mut i16</code>.CaGet atomic access to a <code>&amp;mut u16</code>.CaGet atomic access to a <code>&amp;mut i32</code>.CaGet atomic access to a <code>&amp;mut u32</code>.CaGet atomic access to a <code>&amp;mut i64</code>.CaGet atomic access to a <code>&amp;mut u64</code>.CcGet atomic access to a <code>&amp;mut isize</code>.CcGet atomic access to a <code>&amp;mut usize</code>.CkConverts a reference to a non-zero mutable reference if \xe2\x80\xa6DhReturns a <code>&amp;Cell&lt;T&gt;</code> from a <code>&amp;mut T</code>EcConverts from <code>&amp;mut T</code> to <code>&amp;mut UnsafeCell&lt;T&gt;</code>.DkConverts a mutable reference to <code>T</code> into a mutable reference \xe2\x80\xa6BnConverts a mutable reference to a raw pointer.CoConverts a mutable reference to a <code>NonNull</code> pointer.CfConverts a reference to T into a slice of length 1 \xe2\x80\xa6FcBuild a <em>mutable</em> reference to an <code>Exclusive&lt;T&gt;</code> from a <em>mutable</em>\xe2\x80\xa6CcGets atomic access to a <code>&amp;mut bool</code>.B`Gets atomic access to a pointer.C`Get atomic access to a <code>&amp;mut i8</code>.C`Get atomic access to a <code>&amp;mut u8</code>.CaGet atomic access to a <code>&amp;mut i16</code>.CaGet atomic access to a <code>&amp;mut u16</code>.CaGet atomic access to a <code>&amp;mut i32</code>.CaGet atomic access to a <code>&amp;mut u32</code>.CaGet atomic access to a <code>&amp;mut i64</code>.CaGet atomic access to a <code>&amp;mut u64</code>.CcGet atomic access to a <code>&amp;mut isize</code>.CcGet atomic access to a <code>&amp;mut usize</code>.DhReturns a <code>&amp;Cell&lt;T&gt;</code> from a <code>&amp;mut T</code>EcConverts from <code>&amp;mut T</code> to <code>&amp;mut UnsafeCell&lt;T&gt;</code>.CkConverts a reference to a non-zero mutable reference if \xe2\x80\xa6CbWraps a raw C string with a safe C string wrapper.CeCreates a new <code>AtomicBool</code> from a pointer.CdCreates a new <code>AtomicPtr</code> from a pointer.CgCreates a new reference to an atomic integer from a \xe2\x80\xa60000000003210000000000DiRetakes ownership of a <code>CString</code> that was transferred to C \xe2\x80\xa6CkConstructs an <code>Arc&lt;T&gt;</code> from a raw pointer.DkConverts a raw pointer previously created by <code>into_raw</code> back \xe2\x80\xa6BdConstructs a box from a raw pointer.CjConstructs an <code>Rc&lt;T&gt;</code> from a raw pointer.2ClCreates a new <code>Waker</code> from <code>RawWaker</code>.DaCreates a new <code>LocalWaker</code> from <code>RawWaker</code>.654CdConstructs a <code>Thread</code> from a raw pointer.435EfCreates a new <code>ExitStatus</code> or <code>ExitStatusError</code> from the raw \xe2\x80\xa6EbCreates a new <code>ExitStatus</code> from the raw underlying <code>u32</code> \xe2\x80\xa6EgCreates a new <code>ExitCode</code> from the raw underlying <code>u32</code> return \xe2\x80\xa654CfConverts a reference to T into a slice of length 1 \xe2\x80\xa6DjConverts a reference to <code>T</code> into a reference to an array of \xe2\x80\xa6BfConverts a reference to a raw pointer.CgConverts a reference to a <code>NonNull</code> pointer.32103CmConverts a string <code>s</code> into a <code>CString</code>.CnParses a string <code>s</code> to return a value of this type.BhParse a <code>bool</code> from a string.CgConverts a string in base 10 to a float. Accepts an \xe2\x80\xa600CjParses an integer from a string slice with decimal digits.000000000003211100000000000043CcConverts a <code>u32</code> to a <code>char</code>.ElConverts a <code>u32</code> to a <code>char</code>. Use <code>char::from_u32</code> instead.10CdCreates an <code>OsString</code> from a byte vector.0ClReturns an iterator of the arguments that will be passed \xe2\x80\xa6CdReturns an iterator of the environment variables \xe2\x80\xa6BcReturns the current fill character.00DiReturns the current sign (the <code>+</code> or the <code>-</code> flag).00CnReturns <code>true</code> if the <code>Path</code> has a root.ChCreates a <code>HashMap</code> containing the arguments.CjA hash map implemented with quadratic probing and SIMD \xe2\x80\xa6BfCalculates the hash of a single value.0EdA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.CbGetter for the underlying string to be searched in00CnReturns the path of the current user\xe2\x80\x99s home directory if \xe2\x80\xa6ClCompares two 128-bit vectors as if they were two vectors \xe2\x80\xa600000000000000000000000000000000000000000000000000000000000000000000000AfThe identity function.0CnReturns an iterator over the connections being received on \xe2\x80\xa6BnReturns an iterator over incoming connections.CiReturns the length of the initialized part of the buffer.0CmReturns a mutable reference to the initialized portion of \xe2\x80\xa60DkARM-specific vector of four packed <code>i8</code> packed into a 32-bit \xe2\x80\xa6D`Arm-specific 64-bit wide vector of eight packed <code>i8</code>.0DdConverts the <code>UniqueArc</code> into a regular <code>Arc</code>.0CoReturns the contained <code>Err</code> value, but never panics.0AjTake ownership of the key.00CiConverts the entry into a mutable reference to its value.DkConverts the <code>OccupiedEntry</code> into a mutable reference to the \xe2\x80\xa61G`Converts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not \xe2\x80\xa60DkConsumes the <code>CString</code> and transfers ownership of the string \xe2\x80\xa6CmConsumes the <code>Arc</code>, returning the wrapped pointer.DhConsumes the <code>Weak&lt;T&gt;</code> and turns it into a raw pointer.CoConsumes the <code>Box</code>, returning a wrapped raw pointer.ClConsumes the <code>Rc</code>, returning the wrapped pointer.2432CjConsumes the <code>Thread</code>, returning a raw pointer.213CdReturns the underlying raw <code>wait</code> status.FhConverts this <code>Pin&lt;&amp;mut T&gt;</code> into a <code>Pin&lt;&amp;T&gt;</code> with the same \xe2\x80\xa60CkConsumes this error, returning the underlying vector of \xe2\x80\xa6DjConsumes the <code>BinaryHeap</code> and returns the underlying vector \xe2\x80\xa6DfConverts <code>self</code> into a vector without clones or allocation.21D`Yields the underlying byte vector of this <code>OsString</code>.0BnChecks if the value is within the ASCII range.CjChecks if all bytes in this slice are within the ASCII \xe2\x80\xa6CjChecks if all characters in this string are within the \xe2\x80\xa62210202DbReturns <code>true</code> if this is a <code>Break</code> variant.0ClChecks if a <code>char</code> is a digit in the given radix.ClChecks if the value is a decimal digit: 0x30 \xe2\x80\x980\xe2\x80\x99 ..= \xe2\x80\xa610CmReturns <code>true</code> if the vector contains no elements.BcChecks if the binary heap is empty.DbReturns <code>true</code> if the <code>LinkedList</code> is empty.C`Returns <code>true</code> if the deque is empty.CjReturns <code>true</code> if the map contains no elements.CjReturns <code>true</code> if the set contains no elements.FeReturns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code>\xe2\x80\xa6CmReturns <code>true</code> if the raw slice has a length of 0.0CiReturns <code>true</code> if the slice has a length of 0.DjReturns <code>true</code> if <code>self</code> has a length of zero bytes.DlReturns <code>true</code> if <code>self.to_bytes()</code> has a length of 0.CcReturns <code>true</code> if the iterator is empty.0DgReturns <code>true</code> if the range contains no items. One-sided \xe2\x80\xa600CiReturns <code>true</code> if the range contains no items.0DfReturns <code>true</code> if the non-null raw slice has a length of 0.11CaChecks if this <code>TokenStream</code> is empty.88765BoChecks whether the <code>OsStr</code> is empty.544332CbReturns <code>true</code> if the channel is empty.0CmReturns <code>true</code> if the vector contains no elements.55<>BcChecks if the binary heap is empty.>?>DbReturns <code>true</code> if the <code>LinkedList</code> is empty.C`Returns <code>true</code> if the deque is empty.CiReturns <code>true</code> if the ancillary data is empty.DkReturns true if the data is owned, i.e. if <code>to_mut</code> would be \xe2\x80\xa60DjReturns <code>true</code> if the poll is a <code>Poll::Ready</code> value.0CjA SIMD vector with 16 elements of type <code>isize</code>.00CjA SIMD vector with 32 elements of type <code>isize</code>.00CjA SIMD vector with 64 elements of type <code>isize</code>.00CdProvides a forward iterator with mutable references.CiReturns a front-to-back iterator that returns mutable \xe2\x80\xa6ChGets a mutable iterator over the entries of the map, \xe2\x80\xa6CeReturns an iterator that allows modifying each value.CjReturns a mutable iterator over the possibly contained \xe2\x80\xa60100CiAn iterator visiting all key-value pairs in arbitrary \xe2\x80\xa6354CcAdds the key part of a new entry to the map output.00CnLogical saturating left then arithmetic right shift packed \xe2\x80\xa60CnReturns a mutable reference to the last item in the slice, \xe2\x80\xa60DdReturns the number of bytes this <code>char</code> would need if \xe2\x80\xa60ChNatural logarithm of the absolute value of the gamma \xe2\x80\xa6000CiReturns information about the location from which the \xe2\x80\xa60CeReturns the base 10 logarithm of an <code>f16</code>.0CeReturns the base 10 logarithm of an <code>f32</code>.0CeReturns the base 10 logarithm of an <code>f64</code>.0CeReturns the base 2 logarithm of an <code>f128</code>.0CjMakes a mutable reference into the given <code>Arc</code>.CiMakes a mutable reference into the given <code>Rc</code>.10DkCreates a new pointer by mapping <code>self</code>\xe2\x80\x99s address to a new \xe2\x80\xa600000ChA SIMD mask with one element for vectors with 16-bit \xe2\x80\xa600CiA SIMD mask with two elements for vectors with 16-bit \xe2\x80\xa600CjA SIMD mask with four elements for vectors with 16-bit \xe2\x80\xa600CkA SIMD mask with eight elements for vectors with 16-bit \xe2\x80\xa600ChA SIMD mask with one element for vectors with 32-bit \xe2\x80\xa600CiA SIMD mask with two elements for vectors with 32-bit \xe2\x80\xa600CjA SIMD mask with four elements for vectors with 32-bit \xe2\x80\xa600CkA SIMD mask with eight elements for vectors with 32-bit \xe2\x80\xa600ChA SIMD mask with one element for vectors with 64-bit \xe2\x80\xa600CiA SIMD mask with two elements for vectors with 64-bit \xe2\x80\xa600CjA SIMD mask with four elements for vectors with 64-bit \xe2\x80\xa600CkA SIMD mask with eight elements for vectors with 64-bit \xe2\x80\xa600CgA SIMD mask with 16 elements for vectors with 8-bit \xe2\x80\xa600CgA SIMD mask with 32 elements for vectors with 8-bit \xe2\x80\xa600CgA SIMD mask with 64 elements for vectors with 8-bit \xe2\x80\xa600BmReturns the iterator of the control messages.BmExtracts the metadata component of a pointer.ClQueries the file system to get information about a file, \xe2\x80\xa61ClGiven a path, queries the file system to get information \xe2\x80\xa6BkQueries metadata about the underlying file.ClReturns the metadata for the file that this entry points \xe2\x80\xa6EaCalculates the midpoint (average) between <code>self</code> and <code>rhs</code>.0000000000000000000000000000000000000000000CkReturns the last modification time listed in this metadata.DdAn identity function that causes an <code>unused_must_use</code> \xe2\x80\xa60BlDisables running and inheriting spawn hooks.DjIndicates whether <code>__WASI_FDFLAG_NONBLOCK</code> is passed in the \xe2\x80\xa6DbReturns the <code>n</code>th element from the end of the iterator.00BcCreates a null mutable raw pointer.0DdQuery the current setting of socket option <code>SO_PASSCRED</code>.CgReturns a mutable reference to the last item in the \xe2\x80\xa6CkReturns a mutable reference to the greatest item in the \xe2\x80\xa6CkReturns a mutable reference to the next() value without \xe2\x80\xa6021EeCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> \xe2\x80\xa600CkRemoves the last element from a list and returns it, or \xe2\x80\xa6ClRemoves the last element from the cursor\xe2\x80\x99s parent list \xe2\x80\xa6CnRemoves the last element from the deque and returns it, or \xe2\x80\xa6201ClRemoves and returns the last element in the map. The key \xe2\x80\xa6ClRemoves the last element from the set and returns it, if \xe2\x80\xa610BfThe position of the interior nul byte.0CiSearches for an element in an iterator, returning its \xe2\x80\xa60110BlReturns the current position of this cursor.BhReturns the number of bytes read so far.C`Raises an <code>f128</code> to an integer power.0DcSchedules a closure to be run just before the <code>exec</code> \xe2\x80\xa6CbMasks out bits of the pointer according to a mask.0CmAppends an element to the back of a collection, returning \xe2\x80\xa60DfAppends a given string slice onto the end of this <code>String</code>.0DfGets the value of the <code>TCP_QUICKACK</code> option on this socket.ChReads the 64-bit stable counter value and the counter IDCkPull some bytes from this source into the specified buffer.ChReturns an iterator over the entries within a directory.0DfReturns <code>true</code> if these permissions describe a readonly \xe2\x80\xa6CfReborrows this cursor by cloning it with a smaller \xe2\x80\xa60CjCreates a new iterator that repeats a single element a \xe2\x80\xa60CjReplaces first N matches of a pattern with another string.CfAttribute macro applied to a function to give it a \xe2\x80\xa6CnReturns an iterator over the disjoint matches of a pattern \xe2\x80\xa60DgReturns the nearest integer to an <code>f16</code>. Rounds half-way \xe2\x80\xa60DgReturns the nearest integer to an <code>f32</code>. Rounds half-way \xe2\x80\xa60DgReturns the nearest integer to an <code>f64</code>. Rounds half-way \xe2\x80\xa60CjCompare whether 16-bit packed signed integers are less \xe2\x80\xa6000CbReturns the scope ID associated with this address.0CgReturns the eight 16-bit segments that make up this \xe2\x80\xa60CkRegisters a custom panic hook, replacing the previously \xe2\x80\xa6DaAsserts that the first <code>n</code> bytes of the buffer are \xe2\x80\xa6DjAsserts that the first <code>n</code> unfilled bytes of the cursor are \xe2\x80\xa610CfSet the id of the socket for network filtering purpose0AnSets the mode permission bits.CgChanges the port number associated with this socket \xe2\x80\xa600000CaConfigures the span for <em>only this token</em>.DkConfigures the span for this <code>Group</code>\xe2\x80\x99s delimiters, but not \xe2\x80\xa6CbConfigure the span for this punctuation character.DiConfigures the span of this <code>Ident</code>, possibly changing its \xe2\x80\xa6C`Configures the span associated for this literal.CfShuts down the read, write, or both halves of this \xe2\x80\xa6CeShut down the read, write, or both halves of this \xe2\x80\xa61BbAdds two simd vectors elementwise.0Ao\xe2\x80\x9cAnd\xe2\x80\x9cs vectors elementwise.0CiDivides <code>lhs</code> by <code>rhs</code> elementwise.0DeComputes <code>(x*y) + z</code> for each element, but without any \xe2\x80\xa60CiReturns the element-wise maximum with <code>other</code>.BdReturns the maximum of each element.1010CiReturns the element-wise minimum with <code>other</code>.BdReturns the minimum of each element.1010BhMultiplies two simd vectors elementwise.0AmNegates a vector elementwise.0BmReturns remainder of two vectors elementwise.0CdShifts vector left elementwise, with UB on overflow.0CeShifts vector right elementwise, with UB on overflow.0CmSubtracts <code>rhs</code> from <code>lhs</code> elementwise.0Bh\xe2\x80\x9cExclusive ors\xe2\x80\x9d vectors elementwise.0AhUses <code>sleep</code>.BgDivides one slice into two at an index.BnDivides one string slice into two at an index.10BoReturns the square root of an <code>f128</code>0CnReturns the last access time of the file, in seconds since \xe2\x80\xa6CgReturns the last status change time of the file, in \xe2\x80\xa6CnReturns the last modification time of the file, in seconds \xe2\x80\xa6BiReturns the number of hard links to file.CnAttempts to sync all OS-internal file content and metadata \xe2\x80\xa6BjReturns the path of a temporary directory.BjConverts a SIMD mask to an array of bools.BcConverts a SIMD vector to an array.10BgConverts this C string to a byte slice.0CkConverts a <code>char</code> to a digit in the given radix.0CjCreates owned data from borrowed data, usually by cloning.0ChReturns a string slice with trailing whitespace removed.0DhShortens the vector, keeping the first <code>len</code> elements and \xe2\x80\xa6DgShortens the deque, keeping the first <code>len</code> elements and \xe2\x80\xa6CjShortens this <code>String</code> to the specified length.CkTruncate the <code>OsString</code> to the specified length.312BoSets the option for truncating a previous file.C`Returns the integer part of an <code>f16</code>.0C`Returns the integer part of an <code>f32</code>.0C`Returns the integer part of an <code>f64</code>.0ClApplies function to the elements of iterator and returns \xe2\x80\xa600ClAn iterator method that applies a function as long as it \xe2\x80\xa600EfAttempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.EhAttempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.ElConverts the given <code>Vec&lt;u8&gt;</code> into a  <code>String</code> if it contains \xe2\x80\xa6EcConverts a <code>CString</code> into a <code>String</code> if it contains valid \xe2\x80\xa6ChTries to create the target number type from a source \xe2\x80\xa600000000000000000000000000000000000000000ClTries to convert a <code>char</code> into a <code>u8</code>.111111111CmTries to convert a <code>char</code> into a <code>u16</code>.2222222222222222222222222222222222222222222222AhPerforms the conversion.CoAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;usize&gt;.CoAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;usize&gt;.CmAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;u16&gt;.ClAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;u8&gt;.CmAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;u32&gt;.CmAttempts to convert <code>i128</code> to NonZero&lt;i128&gt;.CoAttempts to convert NonZero&lt;i16&gt; to NonZero&lt;usize&gt;.CnAttempts to convert NonZero&lt;i16&gt; to NonZero&lt;u128&gt;.CmAttempts to convert NonZero&lt;i16&gt; to NonZero&lt;u64&gt;.CmAttempts to convert NonZero&lt;i16&gt; to NonZero&lt;u32&gt;.CmAttempts to convert NonZero&lt;i16&gt; to NonZero&lt;u16&gt;.ClAttempts to convert NonZero&lt;i16&gt; to NonZero&lt;u8&gt;.CnAttempts to convert NonZero&lt;i8&gt; to NonZero&lt;usize&gt;.CmAttempts to convert NonZero&lt;i8&gt; to NonZero&lt;u128&gt;.ClAttempts to convert NonZero&lt;i8&gt; to NonZero&lt;u64&gt;.CmAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;u64&gt;.ClAttempts to convert NonZero&lt;i8&gt; to NonZero&lt;u32&gt;.CoAttempts to convert <code>isize</code> to NonZero&lt;isize&gt;.CkAttempts to convert <code>i64</code> to NonZero&lt;i64&gt;.ClAttempts to convert NonZero&lt;i8&gt; to NonZero&lt;u16&gt;.CoAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;i32&gt;.CkAttempts to convert NonZero&lt;i8&gt; to NonZero&lt;u8&gt;.DaAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;isize&gt;.CkAttempts to convert <code>i32</code> to NonZero&lt;i32&gt;.CnAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;u128&gt;.CkAttempts to convert <code>i16</code> to NonZero&lt;i16&gt;.D`Attempts to convert NonZero&lt;usize&gt; to NonZero&lt;i128&gt;.CiAttempts to convert <code>i8</code> to NonZero&lt;i8&gt;.CoAttempts to convert <code>usize</code> to NonZero&lt;usize&gt;.ClAttempts to convert NonZero&lt;u16&gt; to NonZero&lt;u8&gt;.CmAttempts to convert <code>u128</code> to NonZero&lt;u128&gt;.ClAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;u8&gt;.CmAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;u16&gt;.CoAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;i64&gt;.CmAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;u32&gt;.CkAttempts to convert <code>u64</code> to NonZero&lt;u64&gt;.CkAttempts to convert <code>u32</code> to NonZero&lt;u32&gt;.D`Attempts to convert NonZero&lt;isize&gt; to NonZero&lt;i128&gt;.CmAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;u64&gt;.CkAttempts to convert <code>u16</code> to NonZero&lt;u16&gt;.CiAttempts to convert <code>u8</code> to NonZero&lt;u8&gt;.ClAttempts to convert NonZero&lt;u32&gt; to NonZero&lt;u8&gt;.CkAttempts to convert NonZero&lt;u8&gt; to NonZero&lt;i8&gt;.ClAttempts to convert NonZero&lt;u16&gt; to NonZero&lt;i8&gt;.CmAttempts to convert NonZero&lt;u32&gt; to NonZero&lt;u16&gt;.CnAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;u128&gt;.CoAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;usize&gt;.CmAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;u8&gt;.CnAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;u16&gt;.CoAttempts to convert NonZero&lt;u32&gt; to NonZero&lt;usize&gt;.CnAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;u32&gt;.ClAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;u8&gt;.CoAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;i64&gt;.CnAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;u64&gt;.CoAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;u128&gt;.D`Attempts to convert NonZero&lt;i128&gt; to NonZero&lt;usize&gt;.CnAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;u8&gt;.ClAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;i8&gt;.CoAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;u16&gt;.CoAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;u32&gt;.CoAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;i16&gt;.CoAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;u64&gt;.D`Attempts to convert NonZero&lt;isize&gt; to NonZero&lt;u128&gt;.DaAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;usize&gt;.CmAttempts to convert NonZero&lt;u16&gt; to NonZero&lt;i16&gt;.CmAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;i16&gt;.CmAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;i32&gt;.CoAttempts to convert NonZero&lt;u16&gt; to NonZero&lt;isize&gt;.CoAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;isize&gt;.CoAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;i32&gt;.CoAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;i16&gt;.CnAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;i8&gt;.D`Attempts to convert NonZero&lt;u128&gt; to NonZero&lt;isize&gt;.CmAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;i8&gt;.CnAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;i16&gt;.CoAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;i128&gt;.CmAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;u16&gt;.CnAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;i64&gt;.D`Attempts to convert NonZero&lt;i128&gt; to NonZero&lt;isize&gt;.CmAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;u32&gt;.CnAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;i8&gt;.CnAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;i64&gt;.CnAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;i32&gt;.CnAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;i16&gt;.CmAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;i8&gt;.CoAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;isize&gt;.CmAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;i16&gt;.ClAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;i8&gt;.ClAttempts to convert NonZero&lt;u32&gt; to NonZero&lt;i8&gt;.ClAttempts to convert NonZero&lt;i16&gt; to NonZero&lt;i8&gt;.D`Attempts to convert NonZero&lt;usize&gt; to NonZero&lt;u128&gt;.CoAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;isize&gt;.CmAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;i64&gt;.CoAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;u64&gt;.CmAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;i32&gt;.CoAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;u32&gt;.CmAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;i16&gt;.CoAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;u16&gt;.CnAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;u8&gt;.ClAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;i8&gt;.CoAttempts to convert NonZero&lt;u32&gt; to NonZero&lt;isize&gt;.CmAttempts to convert NonZero&lt;u32&gt; to NonZero&lt;i32&gt;.D`Attempts to convert NonZero&lt;u128&gt; to NonZero&lt;usize&gt;.CnAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;u64&gt;.CnAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;u32&gt;.CnAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;u16&gt;.CmAttempts to convert NonZero&lt;u32&gt; to NonZero&lt;i16&gt;.CmAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;u8&gt;.CnAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;i32&gt;.EaGets the entire contents of the <code>Vec&lt;T&gt;</code> as an array, if its \xe2\x80\xa6DgTries to convert an <code>&amp;OsStr</code> to a <code>&amp;str</code>.ChTries to create the target number type from a source \xe2\x80\xa600000000000000000000000000000000000000ClTries to convert a <code>char</code> into a <code>u8</code>.111111111CmTries to convert a <code>char</code> into a <code>u16</code>.2222222222222222222222222222222222222222222222222AhPerforms the conversion.EfAttempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.EhAttempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.ElConverts the given <code>Vec&lt;u8&gt;</code> into a  <code>String</code> if it contains \xe2\x80\xa6EcConverts a <code>CString</code> into a <code>String</code> if it contains valid \xe2\x80\xa6CnAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;u32&gt;.ClAttempts to convert NonZero&lt;u32&gt; to NonZero&lt;i8&gt;.CiAttempts to convert <code>u8</code> to NonZero&lt;u8&gt;.CkAttempts to convert <code>u16</code> to NonZero&lt;u16&gt;.CkAttempts to convert <code>u32</code> to NonZero&lt;u32&gt;.CkAttempts to convert <code>u64</code> to NonZero&lt;u64&gt;.CmAttempts to convert <code>u128</code> to NonZero&lt;u128&gt;.CoAttempts to convert <code>usize</code> to NonZero&lt;usize&gt;.CiAttempts to convert <code>i8</code> to NonZero&lt;i8&gt;.CkAttempts to convert <code>i16</code> to NonZero&lt;i16&gt;.CkAttempts to convert <code>i32</code> to NonZero&lt;i32&gt;.CkAttempts to convert <code>i64</code> to NonZero&lt;i64&gt;.CmAttempts to convert <code>i128</code> to NonZero&lt;i128&gt;.CoAttempts to convert <code>isize</code> to NonZero&lt;isize&gt;.ClAttempts to convert NonZero&lt;u16&gt; to NonZero&lt;u8&gt;.ClAttempts to convert NonZero&lt;u32&gt; to NonZero&lt;u8&gt;.CmAttempts to convert NonZero&lt;u32&gt; to NonZero&lt;u16&gt;.CoAttempts to convert NonZero&lt;u32&gt; to NonZero&lt;usize&gt;.ClAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;u8&gt;.CmAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;u16&gt;.CmAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;u32&gt;.CoAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;usize&gt;.CmAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;u8&gt;.CnAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;u16&gt;.CnAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;u32&gt;.CnAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;u64&gt;.D`Attempts to convert NonZero&lt;u128&gt; to NonZero&lt;usize&gt;.CnAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;u8&gt;.CoAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;u16&gt;.CoAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;u32&gt;.DaAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;usize&gt;.D`Attempts to convert NonZero&lt;isize&gt; to NonZero&lt;u128&gt;.CoAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;u64&gt;.CoAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;u64&gt;.CoAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;u32&gt;.D`Attempts to convert NonZero&lt;usize&gt; to NonZero&lt;u128&gt;.CoAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;u16&gt;.CnAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;u8&gt;.D`Attempts to convert NonZero&lt;i128&gt; to NonZero&lt;usize&gt;.ClAttempts to convert NonZero&lt;i16&gt; to NonZero&lt;i8&gt;.ClAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;i8&gt;.CoAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;u128&gt;.CnAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;u64&gt;.CmAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;i16&gt;.CnAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;u16&gt;.CmAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;u8&gt;.CoAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;usize&gt;.CoAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;isize&gt;.CnAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;u128&gt;.CmAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;u64&gt;.ClAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;i8&gt;.CmAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;u32&gt;.CmAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;u16&gt;.ClAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;u8&gt;.CmAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;i16&gt;.CmAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;i32&gt;.CoAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;usize&gt;.CnAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;u128&gt;.CmAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;u64&gt;.CmAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;u32&gt;.CmAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;u16&gt;.ClAttempts to convert NonZero&lt;i32&gt; to NonZero&lt;u8&gt;.CoAttempts to convert NonZero&lt;i64&gt; to NonZero&lt;isize&gt;.CoAttempts to convert NonZero&lt;i16&gt; to NonZero&lt;usize&gt;.CnAttempts to convert NonZero&lt;i16&gt; to NonZero&lt;u128&gt;.CmAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;i8&gt;.CmAttempts to convert NonZero&lt;i16&gt; to NonZero&lt;u64&gt;.CmAttempts to convert NonZero&lt;i16&gt; to NonZero&lt;u32&gt;.CmAttempts to convert NonZero&lt;i16&gt; to NonZero&lt;u16&gt;.CnAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;i16&gt;.CnAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;i32&gt;.ClAttempts to convert NonZero&lt;i16&gt; to NonZero&lt;u8&gt;.CnAttempts to convert NonZero&lt;i8&gt; to NonZero&lt;usize&gt;.CmAttempts to convert NonZero&lt;i8&gt; to NonZero&lt;u128&gt;.ClAttempts to convert NonZero&lt;i8&gt; to NonZero&lt;u64&gt;.ClAttempts to convert NonZero&lt;i8&gt; to NonZero&lt;u32&gt;.ClAttempts to convert NonZero&lt;i8&gt; to NonZero&lt;u16&gt;.CnAttempts to convert NonZero&lt;i128&gt; to NonZero&lt;i64&gt;.CkAttempts to convert NonZero&lt;i8&gt; to NonZero&lt;u8&gt;.DaAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;isize&gt;.D`Attempts to convert NonZero&lt;i128&gt; to NonZero&lt;isize&gt;.D`Attempts to convert NonZero&lt;usize&gt; to NonZero&lt;i128&gt;.CoAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;i64&gt;.CoAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;i32&gt;.CnAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;i8&gt;.CoAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;i16&gt;.CoAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;i16&gt;.CoAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;i32&gt;.CoAttempts to convert NonZero&lt;isize&gt; to NonZero&lt;i64&gt;.D`Attempts to convert NonZero&lt;isize&gt; to NonZero&lt;i128&gt;.CnAttempts to convert NonZero&lt;usize&gt; to NonZero&lt;i8&gt;.D`Attempts to convert NonZero&lt;u128&gt; to NonZero&lt;isize&gt;.CoAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;i128&gt;.CnAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;i64&gt;.CkAttempts to convert NonZero&lt;u8&gt; to NonZero&lt;i8&gt;.CnAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;i32&gt;.ClAttempts to convert NonZero&lt;u16&gt; to NonZero&lt;i8&gt;.CmAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;i8&gt;.CoAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;isize&gt;.CmAttempts to convert NonZero&lt;u16&gt; to NonZero&lt;i16&gt;.CmAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;i64&gt;.CmAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;i32&gt;.CmAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;i16&gt;.ClAttempts to convert NonZero&lt;u64&gt; to NonZero&lt;i8&gt;.CoAttempts to convert NonZero&lt;u16&gt; to NonZero&lt;isize&gt;.CoAttempts to convert NonZero&lt;u32&gt; to NonZero&lt;isize&gt;.CmAttempts to convert NonZero&lt;u32&gt; to NonZero&lt;i32&gt;.CmAttempts to convert NonZero&lt;u32&gt; to NonZero&lt;i16&gt;.CnAttempts to convert NonZero&lt;u128&gt; to NonZero&lt;i16&gt;.AhPerforms the conversion.0CnReturns an iterator that will attempt to yield all pending \xe2\x80\xa60AnAttempts to acquire this lock.0BmTry to acquire an exclusive lock on the file.DeAttempts to acquire this <code>RwLock</code> with shared read access.0CjAttempts to receive a message from the channel without \xe2\x80\xa6CgAttempts to return a pending value on this receiver \xe2\x80\xa6CgAttempts to send a message into the channel without \xe2\x80\xa6CjAttempts to send a value on this channel without blocking.CnAttempts to collect the exit status of the child if it has \xe2\x80\xa60CbAcquires a reference to the value in this TLS key.ClCompares two 128-bit vectors as if they were two vectors \xe2\x80\xa600000000000000000000000000000000000000000000000000000000000ClCompare whether 16-bit packed unsigned integers are less \xe2\x80\xa6000ClCross adds and subtracts packed 16-bit unsigned numbers, \xe2\x80\xa60ClCross subtracts and adds packed 16-bit unsigned numbers, \xe2\x80\xa60CfStraight adds and subtracts packed 16-bit unsigned \xe2\x80\xa60CfStraight subtracts and adds packed 16-bit unsigned \xe2\x80\xa60CfReturns a cursor over the unfilled part of the buffer.0CmHints to the compiler that a branch condition is unlikely \xe2\x80\xa6ClHints to the compiler that branch condition is likely to \xe2\x80\xa610CmCross halves of adds and subtracts packed 16-bit unsigned \xe2\x80\xa60CmCross halves of subtracts and adds packed 16-bit unsigned \xe2\x80\xa60CgStraight halves of adds and subtracts packed 16-bit \xe2\x80\xa60CgStraight halves of subtracts and adds packed 16-bit \xe2\x80\xa60CjA SIMD vector with 16 elements of type <code>usize</code>.00CjA SIMD vector with 32 elements of type <code>usize</code>.00CjA SIMD vector with 64 elements of type <code>usize</code>.00ClPerforms a bitwise and of the two input 128-bit vectors, \xe2\x80\xa600BkFlips each bit of the 128-bit input vector.00ClPerforms a bitwise xor of the two input 128-bit vectors, \xe2\x80\xa600CgAbsolute difference and accumulate (64-bit) Arm\xe2\x80\x99s \xe2\x80\xa60000000CjSigned Absolute difference and Accumulate Long Arm\xe2\x80\x99s \xe2\x80\xa60ClUnsigned Absolute difference and Accumulate Long Arm\xe2\x80\x99s \xe2\x80\xa60ChAbsolute difference and accumulate (128-bit) Arm\xe2\x80\x99s \xe2\x80\xa6000ClAbsolute difference between the arguments of Floating Arm\xe2\x80\xa60000CeAbsolute difference between the arguments Arm\xe2\x80\x99s \xe2\x80\xa60000000CeSigned Absolute difference Long Arm\xe2\x80\x99s documentation0CgUnsigned Absolute difference Long Arm\xe2\x80\x99s documentation02222CcFloating-point absolute value Arm\xe2\x80\x99s documentation0000C`Absolute value (wrapping). Arm\xe2\x80\x99s documentation000C`Absolute Value (wrapping). Arm\xe2\x80\x99s documentation11CbFloating-point Add (vector). Arm\xe2\x80\x99s documentation0BaVector add. Arm\xe2\x80\x99s documentation0kVector add.BjBitwise exclusive OR Arm\xe2\x80\x99s documentation0002222122221BhAdd Long (vector). Arm\xe2\x80\x99s documentation000113333BgAdd across vector Arm\xe2\x80\x99s documentation0AnAdd Wide Arm\xe2\x80\x99s documentation000DnWhen <code>false</code>, <code>TransmuteFrom</code> is not implemented for \xe2\x80\xa60BhVector bitwise and Arm\xe2\x80\x99s documentation000000000000000DkConstruct a variance marker; equivalent to <code>Default::default</code>\xe2\x80\xa60BoVector bitwise bit clear. Arm\xe2\x80\x99s documentation000000000000000BeBitwise Select. Arm\xe2\x80\x99s documentation000CkBitwise Select instructions. This instruction sets each \xe2\x80\xa611oBitwise Select.222222222222222222CbFloating-point compare equal Arm\xe2\x80\x99s documentation0000CdCompare bitwise Equal (vector) Arm\xe2\x80\x99s documentation0000000000000000CjSigned compare bitwise equal to zero Arm\xe2\x80\x99s documentation0CbUnsigned compare bitwise equal to zero Arm\xe2\x80\x99s \xe2\x80\xa6ChFloating-point compare greater than or equal Arm\xe2\x80\x99s \xe2\x80\xa60000CjCompare signed greater than or equal Arm\xe2\x80\x99s documentation0000CbCompare unsigned greater than or equal Arm\xe2\x80\x99s \xe2\x80\xa600001100ChCompare signed greater than or equal to zero Arm\xe2\x80\x99s \xe2\x80\xa6CiFloating-point compare greater than Arm\xe2\x80\x99s documentation0000CaCompare signed greater than Arm\xe2\x80\x99s documentation0000CcCompare unsigned greater than Arm\xe2\x80\x99s documentation00001100CfCompare signed greater than zero Arm\xe2\x80\x99s documentationCeFloating-point compare less than or equal Arm\xe2\x80\x99s \xe2\x80\xa60000CgCompare signed less than or equal Arm\xe2\x80\x99s documentation0000CiCompare unsigned less than or equal Arm\xe2\x80\x99s documentation00001100CeCompare signed less than or equal to zero Arm\xe2\x80\x99s \xe2\x80\xa6BmCount leading sign bits Arm\xe2\x80\x99s documentation00000000000CfFloating-point compare less than Arm\xe2\x80\x99s documentation0000BnCompare signed less than Arm\xe2\x80\x99s documentation0000C`Compare unsigned less than Arm\xe2\x80\x99s documentation00001100CcCompare signed less than zero Arm\xe2\x80\x99s documentationBmCount leading zero bits Arm\xe2\x80\x99s documentation00000000000C`Population count per byte. Arm\xe2\x80\x99s documentation00000AlDivide Arm\xe2\x80\x99s documentation00CeDot product arithmetic (vector) Arm\xe2\x80\x99s documentation000lVector abss.0lVector addc.0AcVector Add Extended0lVector adds.0lVector andc.0kVector ANDClVector ceil.0kVector CeillVector cmpb.0B`Vector Base-2 Logarithm Estimate0AcVector Multiply Add000AcVector Multiply Sum0AdVector Multiply Even00AdVector Multiply HighAcVector Multiply Odd00AhVector Negative AbsolutekVector NAND00kVector Pack00oVector permute.0nVector PermuteAcVector Byte ReverseAgVector Reverse ElementsAgVector Round to IntegerAoVector Shift Left Double by BitBaVector Shift Left Double by Words0B`Vector Shift Left Double by WordAbVector Square RootBdVector Shift Right Algebraic by ByteAmVector Shift Right ArithmeticB`Vector Shift Right Double by BitAhVector Subtract Carryout00lVector subs.0AlVector Sum Across DoublewordAfVector Sum Across WordCjVector bitwise exclusive or (vector) Arm\xe2\x80\x99s documentation000000000000000CiExtract vector from pair of vectors Arm\xe2\x80\x99s documentation000BcExtract vector from pair of vectors110111111111111111111CmFloating-point fused Multiply-Add to accumulator (vector) \xe2\x80\xa60ClFloating-point fused Multiply-Add to accumulator(vector) \xe2\x80\xa600CnFloating-point fused multiply-subtract from accumulator Arm\xe2\x80\xa60000BaHalving add Arm\xe2\x80\x99s documentation000BmSigned halving subtract Arm\xe2\x80\x99s documentation000ChLoad multiple single-element structures to one, two, \xe2\x80\xa60000000000000CnLoad single 2-element structure and replicate to all lanes \xe2\x80\xa60CmLoad multiple 2-element structures to two registers Arm\xe2\x80\x99\xe2\x80\xa6000000000000000000000000CnLoad single 3-element structure and replicate to all lanes \xe2\x80\xa60ClLoad multiple 3-element structures to three registers Arm\xe2\x80\xa6000000000000000000000000CnLoad single 4-element structure and replicate to all lanes \xe2\x80\xa60CnLoad multiple 4-element structures to four registers Arm\xe2\x80\x99\xe2\x80\xa6000000000000000000000000BfMaximum (vector) Arm\xe2\x80\x99s documentation0000000000000000BlHorizontal vector max. Arm\xe2\x80\x99s documentation0BfMinimum (vector) Arm\xe2\x80\x99s documentation0000000000000000BlHorizontal vector min. Arm\xe2\x80\x99s documentation0CfFloating-point multiply-add to accumulator Arm\xe2\x80\x99s \xe2\x80\xa600CaMultiply-add to accumulator Arm\xe2\x80\x99s documentation0000000BnSigned multiply-add long Arm\xe2\x80\x99s documentation0C`Unsigned multiply-add long Arm\xe2\x80\x99s documentation02222CmFloating-point multiply-subtract from accumulator Arm\xe2\x80\x99s \xe2\x80\xa600ChMultiply-subtract from accumulator Arm\xe2\x80\x99s documentation0000000CcSigned multiply-subtract long Arm\xe2\x80\x99s documentation0CeUnsigned multiply-subtract long Arm\xe2\x80\x99s documentation02222BgVector long move. Arm\xe2\x80\x99s documentation000AnMultiply Arm\xe2\x80\x99s documentation000000000000BnPolynomial multiply long Arm\xe2\x80\x99s documentation0BjSigned multiply long Arm\xe2\x80\x99s documentation0BlUnsigned multiply long Arm\xe2\x80\x99s documentation0BiPolynomial multiply Arm\xe2\x80\x99s documentation04444BiVector bitwise not. Arm\xe2\x80\x99s documentation0000000000000AlNegate Arm\xe2\x80\x99s documentation00000000000CeVector bitwise inclusive OR NOT Arm\xe2\x80\x99s documentation000000000000000CdVector bitwise or (immediate, inclusive) Arm\xe2\x80\x99s \xe2\x80\xa6000000000000000BcAdd pairwise. Arm\xe2\x80\x99s documentation000CgFolding maximum of adjacent pairs Arm\xe2\x80\x99s documentation000CgFolding minimum of adjacent pairs Arm\xe2\x80\x99s documentation000CfSigned saturating Absolute value Arm\xe2\x80\x99s documentation0BdSaturating add Arm\xe2\x80\x99s documentation000BnSigned saturating negate Arm\xe2\x80\x99s documentation0CbSigned saturating shift left Arm\xe2\x80\x99s documentation0CdUnsigned saturating shift left Arm\xe2\x80\x99s documentation0BiSaturating subtract Arm\xe2\x80\x99s documentation000BgReverse bit order Arm\xe2\x80\x99s documentation00CiFloating-point round to integral, toward zero Arm\xe2\x80\x99s \xe2\x80\xa600C`Signed rounding shift left Arm\xe2\x80\x99s documentation0CbUnsigned rounding shift left Arm\xe2\x80\x99s documentation0BgSigned Shift left Arm\xe2\x80\x99s documentation00000BiUnsigned Shift left Arm\xe2\x80\x99s documentation000001100CkStore multiple single-element structures from one, two, \xe2\x80\xa60000000000000CmStore multiple 2-element structures from two registers Arm\xe2\x80\xa600000000000000000000000000ClStore multiple 3-element structures from three registers \xe2\x80\xa600000000000000000000000000CnStore multiple 4-element structures from four registers Arm\xe2\x80\xa600000000000000000000000000AnSubtract Arm\xe2\x80\x99s documentation0000000000000000BjSigned Subtract Long Arm\xe2\x80\x99s documentation0BlUnsigned Subtract Long Arm\xe2\x80\x99s documentation02222BjSigned Subtract Wide Arm\xe2\x80\x99s documentation0BlUnsigned Subtract Wide Arm\xe2\x80\x99s documentation0BcTable look-up Arm\xe2\x80\x99s documentation00000000000BlExtended table look-up Arm\xe2\x80\x99s documentation00000000000BgTranspose vectors Arm\xe2\x80\x99s documentation00000BhTranspose elements Arm\xe2\x80\x99s documentation0000000000000000000CdSigned compare bitwise Test bits nonzero Arm\xe2\x80\x99s \xe2\x80\xa60000000CfUnsigned compare bitwise Test bits nonzero Arm\xe2\x80\x99s \xe2\x80\xa60000111100BcUnzip vectors Arm\xe2\x80\x99s documentation0000000000000000000000000BaZip vectors Arm\xe2\x80\x99s documentation0000000000000000000000000CfWrites a number of bytes starting from a given offset.0CaWrites a single <code>i8</code> into this hasher.0CaWrites a single <code>u8</code> into this hasher.0EdZips <code>self</code> and another <code>Option</code> with function <code>f</code>.0DdWith this, <code>TransmuteFrom</code> assumes only that you have \xe2\x80\xa60CaThe addition assignment operator <code>+=</code>.0CnA socket address could not be bound because the address is \xe2\x80\xa6CmPossible alignments returned by <code>Formatter::align</code>0DiA type storing a <code>usize</code> which is a power of two, and thus \xe2\x80\xa610DkAn implementation of <code>Allocator</code> can allocate, grow, shrink, \xe2\x80\xa600fU+00260CeAn iterator over <code>Path</code> and its ancestors.CmThis structure represents a safely precompiled version of \xe2\x80\xa600AlAsync version of Drop trait.0CkAn integer type which can be safely shared between threads.00000CiA raw pointer type which can be safely shared between \xe2\x80\xa60111111CgAn IPv4 address representing the broadcast address: \xe2\x80\xa60fU+00080BeA captured OS thread stack backtrace.BcA trait for mutably borrowing data.00DhThe <code>BufReader&lt;R&gt;</code> struct adds buffering to any reader.BfWraps a writer and buffers its output.CiAn iterator over a slice in (non-overlapping) mutable \xe2\x80\xa600AmA single component of a path.CaThe trait implemented by builtin coroutine types.0D`A cursor over a <code>LinkedList</code> with editing operations.CnA cursor over a <code>BTreeMap</code> with editing operations.CnA cursor over a <code>BTreeSet</code> with editing operations.102CnA struct to help with <code>fmt::Debug</code> implementations.00CeDescribes how a sequence of token trees is delimited.CnPerma-unstable marker trait. Indicates that the type has a \xe2\x80\xa60CaThe division assignment operator <code>/=</code>.0BlWrap a value and run a closure when dropped.0fU+00030CmAn iterator that yields the current count and the element \xe2\x80\xa60CbA list specifying general categories of I/O error.Eb<code>Exclusive</code> provides only <em>mutable</em> access, also referred to \xe2\x80\xa60CgAn iterator which uses a closure to determine if an \xe2\x80\xa6DfAn iterator produced by calling <code>extract_if</code> on LinkedList.DdAn iterator produced by calling <code>extract_if</code> on BTreeMap.DdAn iterator produced by calling <code>extract_if</code> on BTreeSet.3ChA draining, filtering iterator over the entries of a \xe2\x80\xa6213DhA draining, filtering iterator over the items of a <code>HashSet</code>.d1/\xcf\x800000000d2/\xcf\x800000000d\xcf\x80/20000000d\xcf\x80/30000000d\xcf\x80/40000000d\xcf\x80/60000000d\xcf\x80/80000000CcRepresentation of the various timestamps on a file.DhAn iterator that uses <code>f</code> to both filter and map elements \xe2\x80\xa60AmConfiguration for formatting.00CnA trait to express the ability to construct an object from \xe2\x80\xa6ClWe were already cleaning up for an ongoing unwind, and a \xe2\x80\xa60CnRuns the test in the current process, and sends the result \xe2\x80\xa6CdAn iterator over the <code>char</code>s of a string.0CkA trait to express the ability to consume an object and \xe2\x80\xa6BeBy-value <code>Range</code> iterator.0DdWith this, <code>TransmuteFrom</code> assumes only that you have \xe2\x80\xa60CkAn IPv4 address with the address pointing to localhost: \xe2\x80\xa6CiAn IPv6 address representing localhost: <code>::1</code>.10CiSpecifies the number of lanes in a SIMD vector as a type.0AaLink-Local scope.0DcAn analogous trait to <code>Wake</code> but used to construct a \xe2\x80\xa60C`Escaped \xe2\x80\x99&#39; character without continuation.CiTypes with a size that can be determined from pointer \xe2\x80\xa60CgThe multiplication assignment operator <code>*=</code>.0CkTrait implemented by types that can be converted into a \xe2\x80\xa6CcAn <code>i8</code> that is known not to equal zero.0CbA <code>u8</code> that is known not to equal zero.0Bf<code>\\0</code> in a C string literal.CkA buffer wrapper of which the internal size is based on \xe2\x80\xa6CiInitialization value for static <code>Once</code> values.0DeState yielded to <code>Once::call_once_force()</code>\xe2\x80\x99s closure \xe2\x80\xa60BmA struct providing information about a panic.0CkA reference to the parent directory, i.e., <code>..</code>.CbTrait for comparisons using the equality operator.DhDerive macro generating an impl of the trait <code>PartialEq</code>. \xe2\x80\xa610CjAn iterator over the subslices of the vector which are \xe2\x80\xa600CnA range only bounded inclusively below (<code>start..</code>).00000BeAn unbounded range (<code>..</code>).000lRaw HANDLEs.lRaw SOCKETs.EaAn error returned from the <code>recv</code> function on a <code>Receiver</code>.CbThe remainder assignment operator <code>%=</code>.0BoThis control message contains file descriptors.fU+003B0EeAn error returned from the <code>Sender::send</code> or <code>SyncSender::send</code>CjThe left shift assignment operator <code>&lt;&lt;=</code>.0CkThe right shift assignment operator <code>&gt;&gt;=</code>.0BeOperations on SIMD vectors of floats.00BaAn implementation of SipHash 2-4.0AaSite-Local scope.0DjAn iterator that rejects elements while <code>predicate</code> returns \xe2\x80\xa60CiAn iterator over subslices separated by elements that \xe2\x80\xa600CdA locked reference to the <code>Stdin</code> handle.CdThe subtraction assignment operator <code>-=</code>.0Cd\xe2\x80\x9cSubnormal\xe2\x80\x9d or \xe2\x80\x9cdenormal\xe2\x80\x9d floating point \xe2\x80\xa60DgAn iterator that only accepts elements while <code>predicate</code> \xe2\x80\xa60CaA TCP stream between a local and a remote socket.CiA single token or a delimited sequence of token trees \xe2\x80\xa6mA UDP socket.CmAn infinite endpoint. Indicates that there is no bound in \xe2\x80\xa6000BbA uniquely owned <code>Arc</code>.0DhTrait for objects whose <code>Clone</code> impl is lightweight (e.g. \xe2\x80\xa60CiAn item returned by the <code>Utf8Chunks</code> iterator.00CiErrors which can occur when attempting to interpret a \xe2\x80\xa600CiTrait which permits the allowed types to be used with \xe2\x80\xa60CnA mutable iterator over the values of a <code>BTreeMap</code>.CmA mutable iterator over the values of a <code>HashMap</code>.1CnAn error returned when an operation could not be completed \xe2\x80\xa6BbExpected 1 char, but 0 were found.CmCRC32-C single round checksum for bytes (8 bits). Arm\xe2\x80\x99s \xe2\x80\xa60CnCRC32-C single round checksum for quad words (64 bits). Arm\xe2\x80\xa6CnCRC32-C single round checksum for bytes (16 bits). Arm\xe2\x80\x99s \xe2\x80\xa60CnCRC32-C single round checksum for bytes (32 bits). Arm\xe2\x80\x99s \xe2\x80\xa60DhThe <code>__mmask16</code> type used in AVX-512 intrinsics, a 16-bit \xe2\x80\xa60DhThe <code>__mmask32</code> type used in AVX-512 intrinsics, a 32-bit \xe2\x80\xa60DhThe <code>__mmask64</code> type used in AVX-512 intrinsics, a 64-bit \xe2\x80\xa60BoSigned halving parallel halfword-wise addition.CbSigned halving parallel halfword-wise subtraction.CjCancels the current transaction and discards all state \xe2\x80\xa6CnCommits the current transaction. For a nested transaction, \xe2\x80\xa6E`Bitwise logical <code>AND</code> of inverted <code>a</code> with <code>b</code>.")