searchState.loadedDescShard("compiletest", 0, "The maximum of a set of file-modified timestamps.\nMutable state used during test collection.\nRead-only context data used during test collection.\nUpdates this timestamp to the most recent last-modified …\nUpdates this timestamp to the last-modified time of the …\nChecks that test discovery didn’t find any tests whose …\nCreates test structures for every test/revision in the …\nRecursively scans a directory to find test files and …\nReturns the most recent last-modified timestamp from among …\nCollection of diagnostics helpers for <code>compiletest</code> <em>itself</em>.\nThis module contains a reimplementation of the subset of …\nReturns a list of files that, if modified, would cause …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a timestamp holding the last-modified time of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if <code>file_name</code> looks like a proper test file …\nChecks whether a particular test/revision is “up-to-date…\nThese structs are a subset of the ones found in …\nFor a single test file, creates one or more test …\nCreates a name for this test/revision that can be handed …\nReturns a list of modified/untracked test files that …\nCreates the <code>Config</code> instance for this invocation of …\nCalled by <code>main</code> after the config has been parsed.\nThe path of the <code>stamp</code> file that gets created or updated …\nConfiguration for <code>compiletest</code> <em>per invocation</em>.\nRunning the program must result in a crash, e.g. by <code>SIGABRT</code>…\nRunning the program must make it exit with a regular …\nRunning the program must either fail or crash. Useful for …\nKnown widths of <code>target_has_atomic</code>.\nStatus whether android device available or not. When …\nExtra parameter to run adb on <code>arm-linux-androideabi</code>.\nExtra parameter to run test suite on <code>arm-linux-androideabi</code>.\nPath to the android tools.\nSome <code>TestMode</code>s support snapshot testing, where a <em>reference </em>…\nPath to the build directory (e.g. <code>build/</code>).\nPath to the test suite specific build directory (e.g. …\nGet the list of builtin, ‘well known’ cfg names\nPath to a <em>staged</em> <strong>host</strong> platform cargo executable (unless …\nPath to / name of the Microsoft Console Debugger (CDB) …\nVersion of CDB.\nThe current Rust channel info.\nWhether to use colors in test output.\n<code>CompareMode</code> describing what file the actual ui output will …\nPath to libraries needed to run the <em>staged</em> <code>rustc</code>…\nPath to the <code>src/tools/coverage-dump/</code> bootstrap tool …\nWhen specified, <strong>only</strong> the specified <code>Debugger</code> will be used …\nCurrent codegen backend used.\nCommand for visual diff display, e.g. …\nThe default Rust edition.\nUsed by <code>ui</code> tests to generate things like <code>foo.stderr</code> from …\nAttempt to stop as soon as possible after any test fails. …\nExactly match the filter, rather than a substring.\nOnly run tests that match these filters (using <code>libtest</code> “…\nForce the pass mode of a check/build/run test to instead …\nWhether to rerun tests even if the inputs are unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPath to / name of the GDB executable.\nVersion of GDB, encoded as ((major * 1000) + minor) * 1000 …\nWhether adding git commit information such as the commit …\nWhether to run <code>enzyme</code> autodiff tests.\nWhether to run <code>tidy</code> (html-tidy) when a rustdoc test fails.\nHost platform tuple.\nCompiler flags to pass to the <em>staged</em> <code>rustc</code>-under-test when …\nIncomplete config intended for <code>src/tools/rustdoc-gui-test</code> …\nAbsolute path to the directory to use for incremental …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPath to the <code>src/tools/jsondocck/</code> bootstrap tool executable.\nPath to the <code>src/tools/jsondoclint/</code> bootstrap tool …\nPath containing LLDB’s Python module.\nVersion of LLDB.\nPath to a host LLVM bintools directory.\nPath to a host LLVM <code>FileCheck</code> executable.\nVersion of LLVM.\nPath to minicore aux library (<code>tests/auxiliary/minicore.rs</code>…\nThe <code>TestMode</code>. E.g. <code>TestMode::Ui</code>. Each test mode can …\nNeeded both to construct <code>build_helper::git::GitConfig</code>.\nFIXME: this is why we still need to depend on <em>staged</em> <code>std</code>, …\nPath to a NodeJS executable. Used for JS doctests, …\nPath to a npm executable. Used for rustdoc GUI tests.\nOnly rerun the tests that result has been modified …\nWhether tests should be optimized by default (<code>-O</code>). …\nAbsolute path to the directory where all output for the …\nAbsolute path to the base filename used as output for the …\nAbsolute path to the directory where all output for all …\nGenerates a unique name for the test, such as …\nName/path of the backend to use instead of …\nTrue if the profiler runtime is enabled for this target. …\nPath to the Python 3 executable to use for LLDB and …\nPath to the stage 1 or higher <code>rustc</code> used to obtain target …\nWhere to find the remote test client process, if we’re …\nExplicitly enable or disable running of the target test …\nThe path to the <strong>target</strong> <code>clang</code> executable to run <code>clang</code>-based …\nFIXME: this run scheme is… confusing.\nRun ignored tests <em>unconditionally</em>, overriding their ignore …\nPath to libraries needed to run the compiled executable …\nA command line to prefix target program execution with, …\nWhether the <em>staged</em> <code>rustc</code>-under-test and the associated …\nPath to the <em>staged</em>  <code>rustc</code>-under-test. Unless forced, this …\nPath to the <code>rustdoc</code>-under-test. Like <code>Self::rustc_path</code>, …\nIf true, this will generate a coverage file with UI test …\nSkip tests matching these substrings. The matching logic …\nPath to the directory containing the sources. This …\nPath to the directory containing the test suites sources. …\nThe number of the stage under test.\nPath to the stage 0 <code>rustc</code> used to build <code>run-make</code> recipes. …\nThe id of the stage under test (stage1-xxx, etc).\nThe test suite.\nGet the list of crate types that the target platform …\nPath to the directory containing the sysroot of the <code>rustc</code>…\nIs LLVM a system LLVM.\nTarget platform tuple.\nSupported target atomic widths: e.g. <code>8</code> to <code>128</code> or <code>ptr</code>. This …\nCompiler flags to pass to the <em>staged</em> <code>rustc</code>-under-test when …\nVerbose dump a lot of info.\nWhether <em>staged</em> <code>rustc</code>-under-test was built with debug …\nWhether <em>staged</em> <code>std</code> was built with debug assertions.\nReturns Path to CDB\nReturns (Path to GDB, GDB Version)\nReturns LLDB version\nFIXME: this is very questionable…\nReturns <code>true</code> if the given target is an Android target for …\nReturns <code>true</code> if the given target is a MSVC target for the …\nThe (partly) broken-down contents of a line containing a …\nProperties which must be known very early, before actually …\nBuild and use <code>minicore</code> as <code>core</code> stub for <code>no_core</code> tests in …\nAuxiliary crates that should be built and made available …\nAuxiliary crates that should be built and made available …\nCode for dealing with test directives that request an “…\nCompare the output by lines, rather than as a single …\nWhether pretty printers should be disabled in gdb.\nExtra flags to pass to rustdoc but not the compiler.\nWhether line annotatins are required for the given error …\nGiven an llvm version string that looks like <code>1.2.3-rc1</code>, …\nTakes a directive of the form <code>&quot;&lt;version1&gt; [- &lt;version2&gt;]&quot;</code>, …\nExtra flags to pass to LLVM’s <code>filecheck</code> tool, in tests …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRun tests which require enzyme being build\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the given line begins with the appropriate comment …\nExtra flags to pass to <code>llvm-cov</code> when producing coverage …\nFor tests using the <code>needs-llvm-zstd</code> directive:\nLoads properties from <code>testfile</code> into <code>props</code>. If a property is\nDon’t automatically insert any <code>--check-cfg</code> args\nParses the regex and replacement values of a …\nThe main part of the directive, after removing the comment …\nSome test directives start with a revision name in square …\nBuild the documentation for each crate in a unique output …\nProperties parsed from <code>aux-*</code> test directives.\nYields all of the paths (relative to <code>./auxiliary/</code>) that …\nAuxiliary crates that should be compiled as …\nOther crates that should be built and made available to …\nSimilar to <code>builds</code>, but also uses the resulting dylib as a …\nSimilar to <code>builds</code>, but a list of NAME=somelib.rs of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf the given test directive line contains an <code>aux-*</code> …\nSame as <code>builds</code>, but for proc-macros.\nThe directive is handled by other parts of our tooling.\nThe directive was invalid.\nMatch.\nNo match.\nThe line is not actually a directive.\nThe result of parse_cfg_name_directive.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses a name-value directive which contains …\nThis was originally generated by collecting directives …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether LLVM built with zstd, for the <code>needs-llvm-zstd</code> …\nUsed for better recovery and diagnostics in compiletest.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEither the canonical uppercase string, or some additional …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat kind of message we expect (e.g., warning, error, …\nLooks for either “//| KIND MESSAGE” or “//^^… KIND …\nFor some <code>Error</code>s, like secondary lines of multi-line …\nInformation that was historically needed to create a …\nInformation that was historically needed to create a …\nWhether console output should be colored or not.\nWhether test is expected to panic or not.\nTest completion message sent by individual test threads …\nFixed frame used to clean the backtrace with …\nApplies command-line arguments for filtering/skipping …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDetermines the number of tests to run concurrently.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollects statistics and emits suite/test events as JSON …\nRuns a single test, within the dedicated thread spawned by …\nSpawns a thread to run a single test, and returns the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll calls to <code>Instant::now</code> go through this wrapper method. …\nFIXME(vec_deque_pop_if): Use <code>VecDeque::pop_front_if</code> when …\nEquivalent to <code>rx.recv()</code>, except that if a test exceeds its …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe code itself.\nReturns the deepest source span in the macro call stack …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nname of macro that was applied (e.g., “foo!” or “#[…\nspan where macro was applied to generate this code\ndarwin_fd_limit exists to work around an issue where …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOutputs differed but were blessed\nOutcome of comparing a stream to a blessed file, e.g. …\nOutputs differed and an error should be emitted\nWhat value should be passed to <code>--emit</code>?\nExpected and actual outputs are the same\nWill this test be executed? Should we use <code>make_exe_name</code>?\nReplace line numbers in coverage reports with the …\nGets the directory where auxiliary binaries are written. …\nGets the directory where auxiliary files are written. …\nBuilds an aux dependency.\nBuilds <code>minicore</code>. Returns the path to the minicore rlib …\nCheck <code>error-pattern</code> and <code>regex-error-pattern</code> directives.\nCheck <code>//~ KIND message</code> annotations.\nThis method is used for <code>//@ check-test-line-numbers-match</code>.\n<code>root_testpaths</code> refers to the path of the original test. …\nFor each <code>aux-build: foo/bar</code> annotation, we check to find …\nCode specific to the coverage test suites.\n<code>root_out_dir</code> and <code>root_testpaths</code> refer to the parameters of …\nPrefix to print before error messages. Normally just <code>error</code>…\nUnderlying implementation of <code>Self::fatal_proc_rec</code>, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe platform-specific library name\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrints a message to (captured) stdout if <code>config.verbose</code> is …\nCreates a filename for output with the given extension. …\nNormalize output differences across platforms. Generally …\nGets the absolute path to the directory where all output …\nGets the absolute path to the base filename used as output …\nGenerates a unique name for the test, such as …\nRuns a <code>Command</code> and waits for it to finish, then converts …\nRun any doctests embedded in this test file, and add any …\nCode executed for each revision in turn (or, if there are …\nThe revision, ignored for incremental compilation since it …\nReturns whether to show the full stderr/stdout.\nCoverage reports can describe multiple source files, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFilters based on filetype and extension whether to diff a …\nRepresentation of information to invoke a debugger and …\nLines to insert breakpoints at\nContains the source line number to check and the line …\nGiven debugger output and lines to check, ensure that …\nCheck that the pattern in <code>check_line</code> applies to <code>line</code>. …\nCommands for the debuuger\nSource file name\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdds a list of lookup paths to <code>cmd</code>’s dynamic library …\nThe name of the environment variable that holds dynamic …\nAppend an extension to the path, even if it already has …")