searchState.loadedDescShard("bootstrap", 0, "Implementation of bootstrap, the Rust build system.\nBuild and run some benchmarks\nGlobal configuration for the build system.\nCompile either the compiler or libraries\nKeeps track of major changes made to the bootstrap …\nThis enum is used for deserializing change IDs from TOML, …\nCompile either the compiler or libraries, using cargo check\nClean out build directories\nRun Clippy (uses rustup/cargo-installed clippy binary)\nBuild a codegen backend for rustc, placing the output in …\nRepresents a codegen backend.\nA structure representing a Rust compiler.\nThe <code>RemapScheme::Compiler</code> scheme will remap to …\nGlobal configuration for the entire build and/or bootstrap.\nWhen building Rust various objects are handled differently.\nBuild distribution artifacts\nBuild documentation\nExtra <code>--check-cfg</code> to add when building the compiler or …\nAn executable binary file (like a <code>.exe</code>).\nRun cargo fix\nDeserialized version of all flags for this compile.\nRun rustfmt\nLibraries originating from proc-macros.\nA mostly temporary helper struct before we can migrate …\nInstall distribution artifacts\nLLD file names for all flavors.\nBuild and run some test suites <em>in Miri</em>\nThe various “modes” of invoking Cargo.\nA native, binary library file (like a <code>.so</code>, <code>.dll</code>, <code>.a</code>, <code>.lib</code> …\nDo not run any doc tests.\nThe <code>RemapScheme::NonCompiler</code> scheme will remap to …\nOnly run doc tests.\nA wrapper around <code>std::panic::Location</code> used to track the …\nCollection of paths used to match a task rule.\nPerform profiling and benchmarking of the compiler using …\nAny other regular file that is non-executable.\nWhen <code>rust.rust_remap_debuginfo</code> is requested, the compiler …\nRun tools contained in this repository\nBuild librustc, and compiler libraries, placing output in …\nAn executable (non-binary) script file (like a <code>.py</code> or <code>.sh</code>).\nA collection of individual paths or aliases.\nSet up the environment for development\nBuild the standard library, placing output in the “…\nA “suite” of paths.\nTypical Rust libraries.\nNon Rust libraries and objects shipped to ease usage of …\nBuild and run some test suites\nBuild a tool, placing output in the “bootstrap-tools” …\nBuild a tool which uses the locally built rustc and the …\nBuild a tool which uses the locally built std, placing …\nBuild a cross-compilable helper tool. These tools do not …\nVendor dependencies\nRun normal tests and doc tests (default).\nAdds the <code>RUST_TEST_THREADS</code> env var if necessary\nReturns the path to the <code>ar</code> archive utility for the target …\nExecutes the entire build, as configured by the flags and …\nhost target of the stage0 compiler\nBuild directory, overrides <code>build.build-dir</code> in …\nBootstrap uses this value to decide whether it should …\nComponent directory that Cargo will produce output into …\nReturns the root output directory for all Cargo output in …\nReturns the path to the C compiler for the target …\nReturns C flags that <code>cc-rs</code> thinks should be enabled for the\nReturns the internal <code>cc::Tool</code> for the C compiler.\nReturns extra C flags that <code>cc-rs</code> doesn’t handle.\nMake bootstrap to behave as it’s running on the CI …\nMake sure that <code>dir</code> will be an empty existing directory …\nwhether to use color in cargo and rustc output\nonly build proc-macros and build scripts (for …\nOutput directory for all documentation for a target\nWhether to allow running both <code>compiletest</code> self-tests and …\nCommand for visual diff display, e.g. …\nWhether to use the precompiled stage0 libtest with …\nUser-specified configuration from <code>bootstrap.toml</code>.\ndefaults to <code>bootstrap.toml</code>\nTOML configuration file for build\nLinks a file from <code>src</code> to <code>dst</code>. Attempts to use hard links …\nCopies the <code>src</code> directory recursively to <code>dst</code>. Both are …\nLinks the <code>src</code> directory recursively to <code>dst</code>. Both are …\nName of the codegen backend’s crate, e.g. …\nReturns if this target should statically link the C …\nReturns the path to the C++ compiler for the target …\nReturns the internal <code>cc::Tool</code> for the C++ compiler.\nWhen a <code>runner</code> configuration is not provided and a …\nOutput directory for all documentation for a target\n<code>None</code> if we shouldn’t download CI compiler artifacts, or …\ndry run; don’t build anything\nIndicates whether to dump the work done from bootstrap …\nEnable BOLT link flags\nbuild paths to exclude\nTemporary directory that extended error information is …\nTests whether the <code>compiler</code> compiling for <code>target</code> should be …\nChecks whether the <code>compiler</code> compiling for <code>target</code> should be …\nIndicates whether the compiler was forced to use a …\nArguments appearing after <code>--</code> to be forwarded to tools, …\narguments passed to subcommands\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nhost targets to build\nBuild triple for the pre-compiled snapshot compiler.\nWhich triples to produce a compiler toolchain for.\nReturns a Vec of all the dependencies of the given root …\ninclude default paths in addition to the provided ones\nuse incremental compilation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether the compiler was forced to use a …\nReturns <code>true</code> if this is a snapshot compiler for <code>build</code>’s …\nCheck if verbosity is greater than the <code>level</code>\nReturns the number of parallel jobs that have been …\nnumber of jobs to run in parallel\nOutput directory for all JSON-formatted documentation for …\nuse message-format=json\nstage(s) to keep without recompiling (pass multiple times …\nstage(s) of the standard library to keep without …\nReturns the path to the linker for the given target if it …\nReturns the path to <code>FileCheck</code> binary for the specified …\nRoot output directory of LLVM for <code>target</code>\ngenerate PGO profile with llvm built for rustc\nuse PGO profile for LLVM build\nOutput directory for some generated md crate documentation …\nReturn a <code>Group</code> guard for a <code>Step</code> that:\nReturn a <code>Group</code> guard for a <code>Step</code> that is only built once …\nReturns the “musl libdir” for this <code>target</code>.\nReturns the “musl root” for this <code>target</code>, if defined.\nName of the codegen backend, as identified in the <code>compiler</code> …\nDirectory for libraries built from C/C++ code and shared …\nCreates a new set of build configuration from the <code>flags</code> on …\nReturns if config.ninja is enabled, and checks for ninja …\nCall Build::ninja() instead of this.\nReturns <code>true</code> if this is a no-std <code>target</code>, if defined\ncommand to run on failure\nReturns the “package version” for a component given …\nCache for determining path modifications\nThe paths to work with. For example: with <code>./x check foo bar</code>…\npaths for the subcommand\nGet Unix permissions appropriate for this file type.\nEnsures that the behavior dump directory is properly …\nPath to the python interpreter to use\nReturns the root of the “rootfs” image that this …\nReturns the path to the <code>ranlib</code> utility for the target …\nGiven <code>num</code> in the form “a.b.c” return a “release …\nReturns the <code>a.b.c</code> version that the given package is at.\nReturns <code>true</code> if the target will be tested using the …\nAdditional reproducible artifacts that should be added to …\nUpdates a submodule, and exits with a failure if submodule …\nCopies a file from <code>src</code> to <code>dst</code>.\nReturns an optional “runner” to pass to <code>compiletest</code> …\nReturns the value of <code>package_vers</code> above for Rust itself.\ngenerate PGO profile with rustc build\nuse PGO profile for rustc build\nReturns the value of <code>release</code> above for Rust itself.\nReturns the full commit hash.\nReturns the <code>version</code> string associated with this compiler …\nrustc error format\nGets the space-separated set of activated features for the …\nReturns the libdir of the snapshot compiler.\nReturns the sysroot of the snapshot compiler.\noverride options in bootstrap.toml\nbuild paths to skip\nSkip stage0 compiler validation\nSkip checking the standard library if <code>rust.download-rustc</code> …\nSkip checking the standard library if <code>rust.download-rustc</code> …\npath to the root of the rust checkout\nstage to build (indicates compiler to use/test, e.g., …\nReturns the root directory for all output generated in a …\nGets the space-separated set of activated features for the …\nSymlinks two directories, using junctions on Windows and …\nA helper macro to <code>unwrap</code> a result except also print out …\ntarget targets to build\nWhich triples to build libraries …\nRoot output directory for rust_test_helpers library …\nDefault value for <code>--extra-checks</code>\nSpecify build configuration specific for some tool, such …\nReturns whether the specified tool is configured as part …\nCreate a tracing span around an I/O operation, if tracing …\nReturns <code>true</code> if unstable features should be enabled for …\nUpdates the given submodule only if it’s initialized …\nIf any submodule has been initialized already, sync it …\nThis module contains integral components of the build and …\nPath to the vendored Rust crates.\nuse verbose output (-vv for very verbose)\nRuns a function if verbosity is greater than <code>level</code>.\nif value is deny, will deny warnings if value is warn, …\nReturns the <code>lib</code> directory for the WASI target specified, if\nClean the entire build directory (not used by default)\napply to all appropriate files, not just those that have …\nCheck all targets\nclippy lints to allow\narguments for the tool\nwhether to automatically update stderr/stdout files\ncheck formatting instead of applying\nmode describing what file the actual ui output will be …\nextra options to pass the compiler when running …\nclippy lints to deny\nonly run doc tests\nonly run doc tests\ncomma-separated list of other files types to check …\nclippy lints to forbid\nrerun tests even if the inputs are unchanged\nrender the documentation in JSON format in addition to the …\ndon’t capture stdout/stderr of tests\ndo not run doc tests\ndo not run doc tests\nrun all tests regardless of failure\nrun all tests regardless of failure\nonly run tests that result has been changed\nopen the docs in a browser\nforce {check,build,run}-pass tests to this mode.\nEither the profile for <code>bootstrap.toml</code> or another setup …\nwhether to execute run-* tests\nenable this to generate a Rustfix coverage file, which is …\nClean a specific stage without touching other artifacts. …\nAdditional <code>Cargo.toml</code> to sync and vendor\nextra arguments to be passed for the test tool being used …\nextra arguments to be passed for the test tool being used …\nUse a different codegen backend when running tests.\nPass <code>--timings</code> to Cargo to get crate build timings\nPass <code>--timings</code> to Cargo to get crate build timings\nAlways include version in subdir name\nclippy lints to warn on\nEntry point for the <code>config</code> module.\nThis module interacts with Cargo metadata to collect and …\nSanity checking performed by bootstrap before actually …\nImplementation of compiling the compiler and standard …\n<code>./x.py clean</code>\nImplementation of running clippy on the compiler, standard …\nImplementation of compiling various phases of the compiler …\nImplementation of the various distribution aspects of the …\nDocumentation generation for bootstrap.\nRuns rustfmt on the repository.\nCompilation of native dependencies like GCC.\nImplementation of the install aspects of the compiler.\nCompilation of native dependencies like LLVM.\nBuild-and-run steps for in-repo tools\nFirst time setup of a dev environment\nIn some cases, parts of bootstrap need to change part of a …\nBuild-and-run steps for <code>./x.py test</code> test fixtures\nThis module handles building and managing various tools in …\nToolstate checks to keep tools building\nHandles the vendoring process for the bootstrap system.\nRepresents a compiler that can check something.\nCheck the Cranelift codegen backend.\nCheck the GCC codegen backend.\nChecks rustc using the given <code>build_compiler</code> for the given …\nChecks std using the given <code>build_compiler</code> for the given …\nRepresents a proof that rustc was <strong>checked</strong>. Contains …\nChecks rustc using <code>build_compiler</code>.\nCompiler that will check this std.\nCompiler that will check this rustc.\nConfigure the given cargo invocation so that the compiled …\nIf there are any rustc rmeta artifacts available, …\nWhether to build only a subset of crates.\nWhether to build only a subset of crates.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCopy rmeta artifacts from the given <code>stamp</code> into a sysroot …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepares a compiler that will check something with the …\nPrepare the standard library for checking something (that …\nCheck the compiler.\nUsed by the implementation of <code>Step::run</code> in <code>tool_check_step!</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRuns Clippy on in-tree sources of selected projects using …\nDisable the most spammy clippy lints\nLints the compiler.\nWhether to lint only a subset of crates.\nWhether to lint only a subset of crates.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWe need to keep the order of the given clippy lint rules …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepare a compiler sysroot.\nRepresents information about a built rustc.\nOutput of the <code>compile::GccCodegenBackend</code> step. It includes …\nBuild rustc using the passed <code>build_compiler</code>.\n<code>RustcLink</code> copies compiler rlibs from a rustc build into a …\nBuild a standard library for the given <code>target</code> using the …\nLink all libstd rlibs/dylibs into a sysroot of …\nLink some files into a rustc sysroot.\nCompiler that builds the standard library.\nThe compiler that actually built this <em>rustc</em>. This can be …\nThe <strong>previous</strong> compiler used to compile this rustc.\nThis compiler <strong>built</strong> some rustc, whose rlibs we will copy …\nTries to find LLVM’s <code>compiler-rt</code> source directory, for …\nCreates the <code>codegen-backends</code> folder for a compiler that’…\nCopies sanitizer runtime libraries into target libdir.\nCopies third party objects needed by various targets for …\nCopies third party objects needed by various targets.\nWhether to build only a subset of crates in the standard …\nNot actually used; only present to make sure the cache …\nWhether to build a subset of crates, rather than the whole …\nNot actually used; only present to make sure the cache …\nWhen using download-rustc, we need to use a new build of …\nSee <code>Std::force_recompile</code>.\nSee <code>Std::force_recompile</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCopy rlibs <strong>built</strong> by <code>build_compiler</code> into the sysroot of …\nCopy rlibs from the build compiler that build this <code>rustc</code> …\nGets the path to a dynamic codegen backend library from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWe only use LTO for stage 2+, to speed up build time of …\nNormalize the name of a dynamic codegen backend library.\nBuilds the standard library.\nLink all libstd rlibs/dylibs into the sysroot location.\nBuilds and prepare startup objects like rsbegin.o and …\nBuilds the compiler.\nSame as <code>std_link</code>, only for librustc\nReturns the sysroot that <code>compiler</code> is supposed to use. For …\nPass down configuration from the LLVM build into the build …\nReturns true if the standard library should be uplifted …\nConfigure cargo to compile the standard library, adding …\nResolves standard library crates for <code>Std::run_make</code> for any …\nThis is the compiler into whose sysroot we want to copy …\nThe target on which rustc will run (its host).\nThe compiler which we will produce in this step. Assemble …\nWrite filtered <code>files</code> into the passed build stamp and …\nThe <code>rust-analysis</code> component used to create a tarball of …\nTarball intended for internal consumption to ease …\nTarball containing a prebuilt version of the …\nCopies debugger scripts for <code>target</code> into the given compiler …\nExtended archive that contains the compiler, standard …\nTarball containing a prebuilt version of the libgccjit …\nBuilds the <code>rust-docs-json</code> installer component. It contains …\nDistributes the <code>llvm-bitcode-linker</code> tool so that it can be …\nBuilds the <code>rust-mingw</code> installer component.\nTarball containing artifacts necessary to reproduce the …\nDistribute the rust-analyzer component, which is used as a …\nTarball intended for internal consumption to ease …\nCreates the <code>rustc</code> installer component.\nTarball containing the compiler that gets downloaded and …\nBuilds the <code>rustc-docs</code> installer component. Apart from the …\nBuilds the standard library (<code>rust-std</code>) dist component for …\nCompiler that will build the standard library.\nThe compiler that will build rustc which will be shipped …\nThe linker will be compiled by this compiler.\nUse the <code>builder</code> to make a filtered copy of <code>base</code>/X for X in …\nCopy stamped files into an image’s <code>target/lib</code> directory.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaybe add LLVM object files to the given destination …\nMaybe add libLLVM.so to the runtime lib-dir for rustc …\nMaybe add libLLVM.so to the target lib-dir for linking.\nBuilds the <code>rust-docs</code> installer component.\nCreates the <code>rust-src</code> installer component\nCreates the plain source tarball\nCreates a combined installer for the specified target in …\nSysroot of a compiler into which will the debugger scripts …\nThe linker will by usable by rustc on this host.\nThis is the compiler that we will <em>ship</em> in this dist step.\nCheck that all objects in rlibs for UEFI targets are COFF. …\nDocuments the reference. It has to always be done using a …\nDocument the compiler for the given <code>target</code> using rustdoc …\nBuilds the Rust compiler book.\nName of the crates that are visible to consumers of the …\nDocument the standard library using <code>build_compiler</code>.\nCompiler whose rustdoc should be used to document things …\nCompiler whose rustdoc will be used to generated …\nBuild the documentation for public standard library crates.\nDocument <code>stage</code> compiler for the given <code>target</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepare a compiler that will be able to document something …\nInvoke <code>rustbook</code> for <code>target</code> for the doc book <code>name</code> from the …\nBuilds the book and associated stuff.\nGenerates all standalone documentation as compiled by the …\nGenerates HTML release notes to include in the final docs …\nGenerate shared resources used by other pieces of …\nCompile all standard library documentation.\nGenerates compiler documentation.\nGenerates documentation for a tool.\nGenerates documentation for a tool.\nGenerates documentation for a tool.\nGenerates documentation for a tool.\nGenerates documentation for a tool.\nGenerates documentation for a tool.\nGenerates documentation for a tool.\nGenerates documentation for a tool.\nGenerates documentation for a tool.\nGenerates documentation for a tool.\nGenerates the HTML rendered error-index by running the …\nBuilds the rustc book.\nBuilds the reference book.\nTest that the examples of lints in the book produce the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the Rust files modified between the last merge …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdates the last rustfmt version used.\nReturn whether the format cache can be reused.\nlibgccjit is already built at this path\nConfigures a Cargo invocation so that it can build the GCC …\nThe absolute path to the downloaded GCC artifacts.\nDetect whether GCC sources have been modified locally or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis returns information about whether GCC should be built …\nInstall the required libgccjit library file(s) to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the path to a libgccjit.so file in the install …\nCompile GCC (specifically <code>libgccjit</code>) for <code>target</code>.\nTries to download GCC from CI if it is enabled and GCC …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWe have to run a few shell scripts, which choke quite a …\nPaths whose changes invalidate LLVM downloads.\nLinker flags to pass to LLVM’s CMake invocation.\nCMake target used to build the runtime.\nDetect whether LLVM sources have been modified locally or …\nCMAKE_EXE_LINKER_FLAGS\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPath to llvm-config binary. NB: This is always the host …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the CI-found LLVM is currently usable.\nPath to LLVM cmake directory for the target.\nCMAKE_MODULE_LINKER_FLAGS\nLibrary filename that will be used rustc.\nPath to the built runtime library.\nThis returns whether we’ve already previously built LLVM.\nCompile LLVM for <code>target</code>.\nCompile Enzyme for <code>target</code>.\nCompile LLD for <code>target</code>.\nBuilds sanitizer runtime libraries.\nBuild crtbegin.o/crtend.o for musl target.\nBuild libunwind.a\nCMAKE_SHARED_LINKER_FLAGS\nReturns sanitizers available on a given target.\nRun compile benchmarks with a locally built compiler.\nRun <code>profile_local cachegrind</code>. This executes the compiler …\nCompare the results of two previously executed benchmark …\nRun <code>profile_local eprintln</code>. This executes the compiler on …\nRun <code>profile_local samply</code> This executes the compiler on the …\nSelect the benchmarks matching a prefix in this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSelect the benchmarks that you want to run (separated by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerforms profiling using <code>rustc-perf</code> on a built version of …\nSelect the profiles that should be benchmarked.\nSelect the scenarios that should be benchmarked.\nThe name of the base artifact to be compared.\nIdentifier to associate benchmark results with\nThe name of the modified artifact to be compared.\nStep to manually run the coverage-dump tool (…\nDummy step that can be used to deliberately trigger …\nInvoke the Miri tool on a specified file.\nThe build compiler that will build miri and the target …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn tuples of (shell, file containing completions).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUses <code>clap_complete</code> to generate shell completions.\nThe target which will miri interpret.\nSets up or displays the LSP config for one of the …\nHandles editor-specific setup differences\nInstalls <code>src/etc/pre-push.sh</code> as a Git hook\nCreates a toolchain link for stage1 using <code>rustup</code>\nCreate the recommended editor LSP config file for rustc …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA list of historical hashes of each LSP settings file New …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrompt a user for a answer, looping until they enter an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRuns <code>cargo test</code> for cargo itself. We label these tests as …\nRuns <code>cargo miri test</code> to demonstrate that …\nBuilds cargo and then runs the <code>src/tools/cargotest</code> tool, …\nRuns the tool <code>src/tools/collect-license-metadata</code> in …\nRuns the coverage test suite at <code>tests/coverage</code> in some or …\nRuns <code>cargo test</code> for standard library crates.\nRuns <code>cargo test</code> on various internal tools used by …\nRuns <code>cargo test</code> for the compiler crates in <code>compiler/</code>.\nRuns <code>cargo test</code> on the <code>src/tools/run-make-support</code> crate. …\nRustdoc is special in various ways, which is why this step …\nSome test suites are run inside emulators or on remote …\nRuns <code>cargo test</code> for rustfmt.\nTest step that does two things:\nRuns <code>src/tools/tidy</code> and <code>cargo fmt --check</code> to detect …\nRun <code>cargo miri setup</code> for the given target, return where …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven a <code>cargo test</code> subcommand, pass it the appropriate …\nRuns the <code>linkchecker</code> tool as compiled in <code>stage</code> by the <code>host</code> …\nRuns the <code>cargotest</code> tool as compiled in <code>stage</code> by the <code>host</code> …\nRuns <code>cargo test</code> for <code>cargo</code> packaged with Rust.\nRuns <code>cargo test</code> for rust-analyzer\nRuns <code>cargo test</code> for rustfmt.\nRuns <code>cargo test</code> for miri.\nTests <code>cargo miri test</code>.\nRuns <code>cargo test</code> for compiletest.\nRuns <code>cargo test</code> for clippy.\nRuns the <code>tidy</code> tool.\nRuns <code>cargo test</code> for run-make-support.\nRuns <code>cargo test</code> for build_helper.\nExecutes the <code>compiletest</code> tool to run a suite of tests.\nRuns the documentation tests for a book in <code>src/doc</code>.\nRuns the error index generator tool to execute the tests …\nRuns all unit tests plus documentation tests for a given …\nRuns <code>distcheck</code>, which is a collection of smoke tests:\nTests the build system itself.\nTests the Platform Support page in the rustc book.\nTests that the lint examples in the rustc book generate …\nEnsure the version placeholder replacement tool builds\nCompiles the <code>rust_test_helpers.c</code> library which we used in …\nGiven a <code>cargo test</code> subcommand, add the appropriate flags …\nThis runs the equivalent of <code>mdbook test</code> (via the rustbook …\nThis runs <code>rustdoc --test</code> on all <code>.md</code> files in the path.\nDeclares a test step that invokes compiletest on a …\nBuild the tool for the given <code>target</code> using rustc that …\nRepresents a built LldWrapper, the <code>lld-wrapper</code> tool …\nBuilds the cargo tool. Note that it can be built using a …\nBuild the tool so that it can be attached to the sysroot …\nThe rustc-perf benchmark suite, which is added as a …\nRepresents which compilers are involved in the compilation …\nRepresents <code>Rustdoc</code> that either comes from the external …\nThese are the submodules that are required for rustbook to …\nResult of the tool build process. Each <code>Step</code> in this module …\nDetermines how to build a <code>ToolTarget</code>, i.e. which compiler …\nBuilds the <code>wasm-component-ld</code> linker wrapper, which is …\nNightly-only features that are allowed (comma-separated …\nWhether the tool builds a binary or a library.\nCompiler that will build this tool.\nCompiler used to build the tool.\nCompiler that builds the tool and that builds …\nAdditional arguments to pass to the <code>cargo</code> invocation.\nLinks a built tool binary with the given <code>name</code> from the …\nReturns <code>LldWrapper</code> that should be <strong>used</strong> by the passed …\nReturns <code>WasmComponentLd</code> that should be <strong>used</strong> by the passed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>Cargo</code> that will be <strong>compiled</strong> by the passed …\nReturns <code>LlvmBitcodeLinker</code> that will be <strong>compiled</strong> by the …\nCreate rustc tool compilers from the build compiler.\nReturns <code>LlvmBitcodeLinker</code> that should be <strong>used</strong> by the …\nCreate rustc tool compilers from the target compiler.\nReturn a compiler that is able to build this tool for the …\nReturns compiler that is able to compile a <code>ToolTarget</code> tool …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate compilers for a <code>rustc_private</code> tool with the given …\nBuilds a tool in <code>src/tools</code>\nTarget of the tool being compiled\nIf the stage of <code>target_compiler</code> is <code>0</code>, then rustdoc is …\nCompiler to which .rlib artifacts the tool links to. The …\nArtifact path of the corresponding tool that was built.\nCreates a step that builds an extended <code>Mode::ToolRustc</code> tool\nThe tool can’t even be compiled\nDirectory where the toolstate repo is checked out.\nThe tool compiles successfully, but the test suite fails\nThe tool compiles successfully and its test suite passes\nWhether a tool can be compiled, tested or neither\nChecks out the toolstate repo into <code>TOOLSTATE_DIR</code>.\nThis function <code>commit_toolstate_change</code> provides …\nNumber of days after the last promotion of beta. Its value …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets up config and authentication for modifying the …\nUpdates the “history” files with the latest results.\nReads the latest toolstate from the toolstate repo.\nChecks tool state status.\nThe name of the directory where vendored dependencies are …\nDefines the vendoring step in the bootstrap process.\nStores the result of the vendoring step.\nReturns the cargo workspaces to vendor for <code>x vendor</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe target directory for storing vendored dependencies.\nThe root directory of the source code.\nExecutes the vendoring process.\nAdditional paths to synchronize during vendoring.\nDetermines whether vendored dependencies use versioned …\nThis trait is similar to <code>Any</code>, except that it also exposes …\nBuilds and performs different <code>Self::kind</code>s of stuff and …\nWhether this step is run by default as part of its …\nIf this value is true, then the values of <code>run.target</code> …\nResult type of <code>Step::run</code>.\nCollection of paths used to match a task rule.\nA collection of individual paths or aliases.\nMetadata that describes an executed step, mostly for …\nA “suite” of paths.\nAdds the compiler’s directory of dynamic libraries to <code>cmd</code>…\nA convenience wrapper for Steps which know they have no …\nLike <code>Builder::cargo</code>, but only passes flags that are valid …\nBuild configuration from e.g. bootstrap.toml.\nA cache of outputs of <code>Step</code>s so we can avoid running steps …\nThis will create a <code>BootstrapCommand</code> that represents a …\nCreate a Cargo command for running Clippy. The used Clippy …\nReturn a list of crate names selected by <code>run.paths</code>.\nGets the paths to all of the compiler’s codegen backends.\nObtain a compiler at a given stage and for a given host …\nSimilar to <code>compiler</code>, except handles the full-bootstrap …\nThis function can be used to provide a build compiler for …\nA description of the crates in this set, suitable for …\nIndicates it should run if the command-line selects the …\nIndicates it should run if the command-line selects any of …\nEquivalent to <code>&lt;dyn Any&gt;::downcast_ref</code>.\nEnsure that a given step is built, returning its output. …\nEnsure that a given step is built <em>only if it’s supposed </em>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn all <code>TaskPath</code>s in <code>Self</code> that contain any of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHandles individual files (not directories) within a test …\nWhat to build or what action to perform.\nReturns the compiler’s relative libdir where it stores …\nReturns if <code>std</code> should be statically linked into …\nReturn the path to <code>llvm-config</code> for the target, if it …\nCalled directly by the bootstrap <code>Step</code> handler when not …\nGiven an <code>alias</code> selected by the <code>Step</code> and the paths passed …\nReturns metadata of the step, for tests\nAdditional opaque string printed in the metadata\nsingle, non-aliased path\nMultiple aliases for the same job.\nThe paths passed on the command line. Used by steps to …\nGiven a set of requested paths, return the subset which …\nReturn qualified step name, e.g. <code>compile::Rustc</code>.\nUpdates all submodules, and exits with an error if …\nPrimary function to implement <code>Step</code> logic.\nRun all default documentation steps to build documentation.\nGets a path to the compiler specified.\nReturns the compiler’s libdir where it stores the …\nReturns a path to <code>Rustdoc</code> that “belongs” to the …\nUpdates the actual toolstate of a tool.\nDetermines if this <code>Step</code> should be run when given specific …\nA stack of <code>Step</code>s to run before we can run this builder. …\nObtain a standard library for the given target that will …\nRenders <code>step</code> using its <code>Debug</code> implementation and extract …\nGet all submodules from the src directory.\nCached list of submodules from self.build.src.\nReturns the compiler’s relative libdir where the …\nReturns the bindir for a compiler’s sysroot.\nReturns the libdir where the standard library and other …\nThe total amount of time we spent running <code>Step</code>s in …\nGets a <code>BootstrapCommand</code> which is ready to run <code>tool</code> in <code>stage</code>…\nThe stage to use. Either implicitly determined based on …\nChecks if any of the “should_run” paths is in the …\nFlags that are passed to the <code>rustc</code> shim binary. These …\nRepresents flag values in <code>String</code> form with whitespace …\nAdds nightly-only features that this invocation is allowed …\nAppend a value to an env var of the cargo command instance.\nAdds a host rustc flag.\nEncodes all the flags into a single string.\nAdd an env var to the cargo command instance. Note that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>Builder::cargo</code> and <code>Cargo::configure_linker</code> to …\nSame as <code>Cargo::new</code> except this one doesn’t configure the …\nBy default, cargo will pick up on various variables in the …\nBuild GCC from the local <code>src/gcc</code> submodule.\nThis isn’t a dry run.\nTry to download GCC from CI. If it is not available on CI, …\nExit with an error on duplicate values\nDetermines how will GCC be provided.\nSilently ignore a duplicated value\nOverride the current value, even if it’s <code>Some</code>\nDescribes how to handle conflicts in merging two <code>TomlConfig</code>\nLTO mode used for compiling rustc itself.\nThis is a dry run enabled by bootstrap itself, so it can …\nThis is a dry run enabled by the <code>--dry-run</code> flag.\nThis module defines the central <code>Config</code> struct, which …\nReturns the default <code>-Csplit-debuginfo</code> value for the …\nCommand-line interface of the bootstrap build system.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis module defines the structures that directly mirror …\nGlobal configuration for the entire build and/or bootstrap.\nEach path in this list is considered “allowed” in the …\nBootstrap embeds a version number into the name of shared …\nTry to find the relative path of <code>bindir</code>, otherwise return …\nChecks whether any of the given paths have been modified …\ncheck rustc/cargo version is same or lower with 1 apart …\nThe absolute path to the downloaded LLVM artifacts.\nDirectory where the extracted <code>rustc-dev</code> component is …\nWhether to allow running both <code>compiletest</code> self-tests and …\nCommand for visual diff display, e.g. …\nWhether to use the precompiled stage0 libtest with …\ndefaults to <code>bootstrap.toml</code>\nReturns the codegen backend that should be configured as …\nDownload a single component of a CI-built toolchain (not …\nReturn whether we will use a downloaded, pre-compiled …\n<code>None</code> if we shouldn’t download CI compiler artifacts, or …\nReturns codegen backends that should be:\nModifies the interpreter section of ‘fname’ to fix the …\nArguments appearing after <code>--</code> to be forwarded to tools, …\nReturns true if any of the <code>paths</code> have been modified …\nChecks if the given target is the same as the host target.\nReturns <code>true</code> if this is our custom, patched, version of …\nReturns <code>true</code> if this is an external version of LLVM not …\nReturns <code>true</code> if this is an external version of LLVM not …\nTry to find the relative path of <code>libdir</code>.\nDetermine whether llvm should be linked dynamically.\nLoads bootstrap TOML config and returns the config …\nCall Build::ninja() instead of this.\nCache for determining path modifications\nThe paths to work with. For example: with <code>./x check foo bar</code>…\nReturns the content of the given file at a specific commit.\nReturns the content of the given file at a specific commit.\nWhether or not <code>fix_bin_or_dylib</code> needs to be run; can only …\nSkip checking the standard library if <code>rust.download-rustc</code> …\nReturns whether or not submodules should be managed by …\nCreate a temporary directory in <code>out</code> and return its path.\nDefault value for <code>--extra-checks</code>\nSpecify build configuration specific for some tool, such …\nGiven a path to the directory of a submodule, update it.\nRuns a function if verbosity is greater than 0\nBuild and run some benchmarks\nCompile either the compiler or libraries\nCompile either the compiler or libraries, using cargo check\nClean out build directories\nRun Clippy (uses rustup/cargo-installed clippy binary)\nBuild distribution artifacts\nBuild documentation\nRun cargo fix\nDeserialized version of all flags for this compile.\nRun rustfmt\nInstall distribution artifacts\nBuild and run some test suites <em>in Miri</em>\nPerform profiling and benchmarking of the compiler using …\nRun tools contained in this repository\nSet up the environment for development\nBuild and run some test suites\nVendor dependencies\nWhether to deny warnings, emit them as warnings, or use …\nhost target of the stage0 compiler\nBuild directory, overrides <code>build.build-dir</code> in …\nBootstrap uses this value to decide whether it should …\nMake bootstrap to behave as it’s running on the CI …\nwhether to use color in cargo and rustc output\nonly build proc-macros and build scripts (for …\nTOML configuration file for build\ndry run; don’t build anything\nIndicates whether to dump the work done from bootstrap …\nEnable BOLT link flags\nbuild paths to exclude\narguments passed to subcommands\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the shell completion for a given shell, if the …\nhost targets to build\ninclude default paths in addition to the provided ones\nuse incremental compilation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nnumber of jobs to run in parallel\nuse message-format=json\nstage(s) to keep without recompiling (pass multiple times …\nstage(s) of the standard library to keep without …\ngenerate PGO profile with llvm built for rustc\nuse PGO profile for LLVM build\ncommand to run on failure\npaths for the subcommand\nAdditional reproducible artifacts that should be added to …\ngenerate PGO profile with rustc build\nuse PGO profile for rustc build\nrustc error format\noverride options in bootstrap.toml\nbuild paths to skip\nSkip stage0 compiler validation\nSkip checking the standard library if <code>rust.download-rustc</code> …\npath to the root of the rust checkout\nstage to build (indicates compiler to use/test, e.g., …\ntarget targets to build\nCheck if <code>&lt;cmd&gt; -h -v</code> was passed. If yes, print the …\nuse verbose output (-vv for very verbose)\nif value is deny, will deny warnings if value is warn, …\nClean the entire build directory (not used by default)\napply to all appropriate files, not just those that have …\nCheck all targets\nclippy lints to allow\narguments for the tool\nwhether to automatically update stderr/stdout files\ncheck formatting instead of applying\nmode describing what file the actual ui output will be …\nextra options to pass the compiler when running …\nclippy lints to deny\nonly run doc tests\nonly run doc tests\ncomma-separated list of other files types to check …\nclippy lints to forbid\nrerun tests even if the inputs are unchanged\nrender the documentation in JSON format in addition to the …\ndon’t capture stdout/stderr of tests\ndo not run doc tests\ndo not run doc tests\nrun all tests regardless of failure\nrun all tests regardless of failure\nonly run tests that result has been changed\nopen the docs in a browser\nforce {check,build,run}-pass tests to this mode.\nEither the profile for <code>bootstrap.toml</code> or another setup …\nwhether to execute run-* tests\nenable this to generate a Rustfix coverage file, which is …\nClean a specific stage without touching other artifacts. …\nAdditional <code>Cargo.toml</code> to sync and vendor\nextra arguments to be passed for the test tool being used …\nextra arguments to be passed for the test tool being used …\nUse a different codegen backend when running tests.\nPass <code>--timings</code> to Cargo to get crate build timings\nPass <code>--timings</code> to Cargo to get crate build timings\nAlways include version in subdir name\nclippy lints to warn on\nNewtype over <code>Vec&lt;TargetSelection&gt;</code> so we can implement …\nPath to the file defining the custom target, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis file is embedded in the overlay directory of the …\nStructure of the <code>bootstrap.toml</code> file that configuration is …\nThis module defines the <code>Build</code> struct, which represents the …\nThis module defines the <code>Dist</code> struct, which represents the …\nReturns the argument unchanged.\nThis module defines the <code>Gcc</code> struct, which represents the …\nThis module defines the <code>Install</code> struct, which represents …\nCalls <code>U::from(self)</code>.\nThis module defines the <code>Llvm</code> struct, which represents the …\nThis module defines the <code>Rust</code> struct, which represents the …\nThis module defines the structures and logic for handling …\nTOML representation of various global build decisions.\nConfiguration specific for some tool, e.g. which features …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis enum is used for deserializing change IDs from TOML, …\nSince we use <code>#[serde(deny_unknown_fields)]</code> on <code>TomlConfig</code>, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTOML representation of how the GCC build is configured.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTOML representation of various global install decisions.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTOML representation of how the LLVM build is configured.\nCompares the current <code>Llvm</code> options against those in the CI …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUse an externally provided <code>lld</code> binary. Note that the …\nLLD in bootstrap works like this:\nTOML representation of how the Rust build is configured.\nUse <code>rust-lld</code> from the compiler’s sysroot\nDo not use LLD\nCompares the current Rust options against those in the CI …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPer-target configuration stored in the global …\nTOML representation of how each build target is configured.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSome(path to llvm-config) if using an external LLVM.\nSome(path to FileCheck) if one was specified.\nOnly should be used for pre config initialization …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the CI rustc is available for the given …\nNOTE: rustfmt is a completely different toolchain than the …\nCreate a temporary directory in <code>out</code> and return its path.\nFor more information, see the output of …\nFor more information, see the output of …\nFor more information, see the output of …\nCollects and stores package metadata of each workspace …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvokes <code>cargo metadata</code> to get package metadata of each …\nMinimum version threshold for libstdc++ required when …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nModule for managing build stamp files.\nThis module helps you efficiently store and retrieve …\nC-compiler probing and detection.\nThis module facilitates the tracking system for major …\nBuild configuration for Rust’s release channels.\nCommand Execution Module\nVarious utility functions used throughout bootstrap.\nThis module renders the JSON output of libtest into a …\nThis module serves two purposes:\nFacilitates the management and generation of tarballs.\nWrapper macros for <code>tracing</code> macros to avoid having to write …\nManages a stamp file to track build state. The file is …\nAdds specified stamp content to the current value.\nClear out <code>dir</code> if <code>input</code> is newer.\nCargo’s output path for librustc_codegen_llvm in a given …\nReturns the argument unchanged.\nComputes a hash representing the state of a …\nCalls <code>U::from(self)</code>.\nChecks if the stamp file is up-to-date.\nCargo’s output path for librustc in a given stage, …\nCargo’s output path for the standard library in a given …\nCreates a new <code>BuildStamp</code> for a given directory.\nReturns path of the stamp file.\nRemoves the stamp file if it exists.\nReturns the value of the stamp.\nAdds a prefix to stamp’s name.\nCreates the stamp file.\nThis is essentially a <code>HashMap</code> which allows storing any …\nA global instance of <code>Interner</code> that caches common interned …\nDefines the behavior required for a type to be internable.\nRepresents an interned value of type <code>T</code>, allowing for …\nA global interner for managing interned values of common …\nA structure for managing the interning of values of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a reference to the interned value associated …\nRetrieves a cached result for the given step, if available.\nInterns an owned value, storing it uniquely.\nInterns a borrowed value, ensuring it is stored uniquely.\nInterns a string reference, ensuring it is stored uniquely.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new empty cache.\nStores the result of a computation step in the cache.\nThe compiler is targeting C.\nThe compiler is targeting C++.\nRepresenting the target programming language for a native …\nReturns the executable name for a clang-based compiler …\nDetermines the default compiler for a given target and …\nProbes for C and C++ compilers and configures the …\nProbes and configures the C and C++ compilers for a single …\nReturns the argument unchanged.\nReturns the executable name for a GCC compiler …\nCalls <code>U::from(self)</code>.\nConstructs the path to the Android NDK compiler for the …\nCreates and configures a new <code>cc::Build</code> instance for the …\nKeeps track of major changes made to the bootstrap …\nUsed when build configurations continue working as before.\nUsed when the default value of an option changes, or …\nRepresents the ID of PR caused major change on bootstrap.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides a short summary of the change that will guide …\nThis is not a git repository.\nThis is a git repository. If the info should be used (…\nThis is not a git repository, but the info can be fetched …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this is being built from a tarball.\nReturns whether this directory has a <code>.git</code> directory which …\nRead the commit information from the <code>git-commit-info</code> file …\nWrite the commit hash to the <code>git-commit-hash</code> file given …\nWrite the commit information to the <code>git-commit-info</code> file …\nWhat should be done when the command fails.\nWrapper around <code>std::process::Command</code>.\nCaptures the stream into memory.\nRepresents the output of an executed process.\nRepresents the current status of <code>BootstrapCommand</code>.\nDelay failure until the end of bootstrap invocation.\nIt was not even possible to start the command or wait for …\nImmediately stop bootstrap.\nThe command has started and finished with some status.\nIgnore the failure, the command can fail in an expected …\nHow should the output of a specific stream of the command …\nPrints the stream by inheriting it from the bootstrap …\nCache the command. If it will be executed multiple times …\nCreate a new BootstrapCommand. This is a helper function …\nIf in a CI environment, forces the command to run with …\nHelper method to format both Command and BootstrapCommand …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the source code location where this command was …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMark the command as being executed, disarming the drop …\nReport summary of executed commands file at the specified …\nRun the command, while printing stdout and stderr. Returns …\nExecute a command and return its output. Note: Ideally, …\nRun the command, while capturing and returning all its …\nRun the command, while capturing and returning stdout, and …\nExecute a command and return its output. Note: Ideally, …\nSpawn the command in background, while capturing and …\nSpawn the command in background, while capturing and …\nSpawns the command with configured stdout and stderr …\nSpawn the command in background, while capturing and …\nA wrapper around <code>std::panic::Location</code> used to track the …\nAdds a list of lookup paths to <code>cmd</code>’s dynamic library …\nCreate a <code>--check-cfg</code> argument invocation for a given name …\nExtract the beta revision from the full version string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdapted from …\nReturn the host target on which we are currently running.\nPrepares <code>BootstrapCommand</code> that runs git inside the source …\nConverts <code>T</code> into a hexadecimal <code>String</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the file name given looks like a debug …\nReturns <code>true</code> if the file name given looks like a dynamic …\nReturns the corresponding relative library directory that …\nReturns the linker arguments for rustc/rustdoc for the …\nReturns the linker arguments for rustc/rustdoc for the …\nReturns a flag that configures LLD to use only a single …\nRename a file if from and to are in the same filesystem or …\nReturns the last-modified time for <code>path</code>, or zero if it …\nSets the file times for a given file at <code>path</code>.\nReturns the path to the split debug info for the specified …\nReturn the path to the containing submodule if available.\nSymlinks two directories, using junctions on Windows and …\nReturns an RAII structure that prints out how long it took …\nReturns the filename without the hash prefix added by the …\nReturns <code>true</code> if <code>dst</code> is up to date given that the file or …\nThe time it took to execute this test suite, or <code>None</code> if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRenders the stdout characters one by one\nNumber of tests that were skipped due to already being …\nParses the <code>dylib_path_var()</code> environment variable, …\nReturns the environment variable which the dynamic library …\nGiven an executable called <code>name</code>, return the filename for …\nWrites the command invocation to a file if …\nParses the value of the “RUSTC_STAGE” environment …\nParses the value of the “RUSTC_VERBOSE” environment …\nFinds <code>key</code> and returns its value from the given list of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")