searchState.loadedDescShard("rustc_codegen_llvm", 0, "The Rust compiler.\nRaw content of Fluent resource for this crate, generated …\nSet and unset common attributes on LLVM values.\nCodegen the MIR to the LLVM IR.\nHandles codegen of callees as well as other call-related …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCode that is useful in various codegen modules.\nDebug Info Module\nDeclare various LLVM values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApply attributes to a function call.\nApply attributes to a function declaration/definition.\nIf the register is an AArch64 integer register then return …\nIf the register is an AArch64 vector register then return …\nType to use for outputs that are discarded. It doesn’t …\nHelper function to get the LLVM type for a Scalar. …\nFix up an input value to work around LLVM bugs.\nFix up an output value to work around LLVM bugs.\nOutput type to use for llvm_fixup_output.\nConverts a modifier into LLVM’s equivalent modifier.\nConverts a register class to an LLVM constraint code.\nIf the register is an xmm/ymm/zmm register then return its …\nGet the default optimizations attrs for a function.\nGet LLVM attribute for the provided inline heuristic.\nTell LLVM what instrument function to insert.\nHelper for <code>FnAbi::apply_attrs_llfn</code>: Composite function …\nGet the <code>NonLazyBind</code> LLVM attribute, if the codegen options …\nGet LLVM sanitize attributes.\nTell LLVM to emit or not emit the information necessary to …\nA helper class for dealing with static archives\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWe keep track of the computed LTO cache keys from the …\nMaps LLVM module identifiers to their corresponding LLVM …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerforms fat LTO by merging all modules into a single one …\nPerforms thin LTO by performing necessary global analysis …\nPrepare “thin” LTO to get run on these modules.\nResponsible for safely creating and disposing …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns inner <code>llvm::TargetMachine</code> type.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCode generation.\nIn what context is a dignostic handler being attached to a …\nLTO/ThinLTO postlink optimization stage.\nPrelink optimization stage.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEmbed the bitcode of an LLVM module for LTO in the LLVM …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nEmpty string, to be used where LLVM expects an instruction …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nEmits a call to <code>llvm.instrprof.increment</code>. Used by coverage …\nCalls <code>U::from(self)</code>.\nWhen differentiating <code>fn_to_diff</code>, take a <code>outer_fn</code> and …\nCodegens a reference to a fn/method item, monomorphizing …\nExtension trait for explicit casts to <code>*const c_char</code>.\nA structure representing an active landing pad for the …\nEquivalent to <code>self.as_ptr().cast()</code>, but only casts to …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the LLVM type of a <code>Value</code>.\nThere is one <code>CodegenCx</code> per codegen unit. Each one has its …\n<code>TyCtxt</code> (and related cache datastructures) can’t be move …\nAdd a global value to a list to be stored in the …\nAdd a global value to a list to be stored in the <code>llvm.used</code> …\nWhether a definition or declaration can be assumed to be …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nStatics that will be placed in the llvm.compiler.used …\nCache of emitted const globals (value -&gt; global)\nCache of constant strings,\nExtra state that is only available when coverage …\nExtra per-CGU codegen state needed when coverage …\nReturns the section name to use when embedding …\nDeclare a C ABI function.\nDeclare an entry Function\nDeclare a Rust function.\nDeclare a global value.\nDeclare a global with an intention to define it.\nDeclare a private global\nFor LLVM codegen, returns a function-specific <code>Value</code> for a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a new symbol name with the given prefix. This …\nGets declared value by name.\nGets defined or externally defined (AvailableExternally …\nCache instances of monomorphic and polymorphic items\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA counter that is used for generating local symbol names\nLooks up debug source information about a <code>BytePos</code>.\n<code>codegen_static</code> will sometimes create a second global …\nMapping of scalar types to llvm types.\nA wrapper for <code>llvm::LLVMSetMetadata</code>, but it takes <code>Metadata</code> …\nGet a pointer to a global variable.\nCreate a global constant.\nCreate a global variable.\nList of globals for static variables which need to be …\nx Creates an integer type with the given number of bits, …\nMapping of non-scalar types to llvm types.\nReturn an LLVM type that has at most the required …\nStatics that will be placed in the llvm.used variable See …\nCache generated vtables\nExtra per-CGU context/state needed for coverage …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the list of instances considered “used” in …\nCalls <code>U::from(self)</code>.\nSafe wrappers for coverage-specific FFI functions.\nAssociates function instances with an LLVM global that …\nMust match the layout of <code>LLVMRustCoverageBranchRegion</code>.\nMust match the layout of <code>LLVMRustCoverageCodeRegion</code>.\nA reference to an instance of an abstract “counter” …\nCorresponds to struct <code>llvm::coverage::CounterExpression</code>.\nMust match the layout of <code>LLVMRustCounterKind</code>.\nA span of source code coordinates to be embedded in …\nMust match the layout of <code>LLVMRustCoverageExpansionRegion</code>.\nCorresponds to enum …\nHolds tables of the various region types in one struct.\nA <code>Counter</code> of kind <code>Zero</code>. For this counter kind, the <code>id</code> is …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nConstructs a new <code>Counter</code> of kind <code>CounterValueReference</code>.\n1-based ending column of the source code span. High bit …\n1-based ending line of the source code span.\nConstructs a new <code>Counter</code> of kind <code>Expression</code>.\nLocal index into the function’s local-to-global file ID …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if none of this structure’s tables contain …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n1-based starting column of the source code span.\n1-based starting line of the source code span.\nHashes some bytes into a 64-bit hash, via LLVM’s …\nReturns LLVM’s <code>coverage::CovMapVersion::CurrentVersion</code> …\nVersion number that will be included the <code>__llvm_covmap</code> …\nAn index into the CGU’s overall list of file paths. The …\nMaps “global” (per-CGU) file ID numbers to their …\nAn index into a function’s list of global file IDs. That …\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nUsed by LLVM 18 onwards.\nHolds a mapping from “local” (per-function) file IDs …\nZero value of the index.\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nBuilds a “global file table” for this CGU, mapping …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nFor each function that was instrumented for coverage, we …\nThe file table in encoded form (possibly compressed), …\nTruncated hash of the bytes in <code>filenames_buffer</code>.\nGenerates and exports the coverage map, which is embedded …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nGenerates the contents of the covmap record for this CGU, …\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis “raw” table doesn’t include the working dir, so …\nResolves all of the filenames in this local file mapping …\nIntermediate coverage metadata for a single function, used …\nNot used directly, but helpful in debug messages.\nIterator that yields all source files referred to by this …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nPopulates the mapping region tables in the current function…\nReturns the argument unchanged.\nGenerates the contents of the covfun record for this …\nCalls <code>U::from(self)</code>.\nConvert the function’s coverage-counter expressions into …\nLine and byte-column coordinates of a source code span …\nIf <code>llvm-cov</code> sees a source region that is improperly …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\n1-based ending column (in bytes) of the source code span. …\n1-based ending line of the source code span.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConverts the span into its start line and column, and end …\nAttaches a local file ID to these coordinates to produce …\n1-based starting column (in bytes) of the source code span.\n1-based starting line of the source code span.\nHolds a dummy function instance along with its symbol …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEach CGU will normally only emit coverage metadata for the …\nPrepare sets of definitions that are relevant to deciding …\nA context object for maintaining all state needed by the …\nA source code location used to generate debug information.\nThe (1-based) column number.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nDefinitions of various DWARF-related constants.\nInformation about the original source file.\nCreates any deferred debug metadata nodes\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe (1-based) line number.\nProduces DIScope DIEs for each MIR Scope which has …\nDefined by LLVM in <code>llvm/include/llvm/BinaryFormat/Dwarf.h</code>. …\nHelper macro to let us redeclare gimli’s constants as …\nAllocates the global variable responsible for the …\nInserts a side-effect free instruction sequence that makes …\nA function that returns an empty list of generic parameter …\nBuilds the debuginfo node for a closure environment.\nCreate debuginfo for <code>dyn SomeTrait</code> types. Currently these …\nCreates a <code>DW_TAG_member</code> entry inside the DIE represented …\nCreates debuginfo for a fixed size array (e.g. <code>[u64; 123]</code>).\nComputes the type parameters for a type, if any, for the …\nCreates debug information for the given global variable.\nCreates debuginfo for built-in pointer-like things:\nCreate debuginfo for <code>[T]</code> and <code>str</code>. These are unsized.\nCreates the debuginfo node for a Rust struct type. Maybe …\nBuilds the DW_TAG_structure_type debuginfo node for a Rust …\nBuild the debuginfo node for a Rust <code>union</code> type.\nBuilds the DW_TAG_member debuginfo nodes for the upvars of …\nGenerates LLVM debuginfo for a vtable.\nCreates debug information for the given vtable, which is …\nCreates an “extension” of an existing <code>DIScope</code> into …\nGet the global variable for the vtable.\nReturns from the enclosing function if the type debuginfo …\nExtract size and alignment from a TyAndLayout.\nGet the debuginfo node for the given type.\nReturns the <code>DIFlags</code> corresponding to the visibility of the …\nBuild the debuginfo node for a C-style enum, i.e. an enum …\nBuild the struct type for describing a single coroutine …\nBuild the debuginfo node for the struct type describing a …\nBuild a DW_TAG_enumeration_type debuginfo node, with the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the discriminant value corresponding to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInformation about a single field of the top-level …\nA coroutine debuginfo node looks the same as a that of an …\nIn CPP-like mode, we generate a union with a field for …\nThis is a helper function shared between enums and …\nThis function builds a DW_AT_enumeration_type that …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInformation needed for building a <code>DW_TAG_variant</code>:\nBuild the debuginfo node for a coroutine environment. It …\nBuilds the DW_TAG_member describing where we can find the …\nBuild the debuginfo node for an enum type. The listing …\nBuild the debuginfo node for <code>DW_TAG_variant</code>:\nBuilds the DW_TAG_variant_part of an enum or coroutine …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe ID of a regular type as it shows up at the language …\nThe <code>TypeMap</code> is where the debug context holds the type …\nA unique identifier for anything that we create a …\nThe ID of the artificial type we create for VTables.\nThe ID for the single DW_TAG_variant_part nested inside …\nThe ID for the artificial struct type describing a single …\nThe ID for the additional wrapper struct type describing …\nThis function enables creating debuginfo nodes that can …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a string version of this UniqueTypeId, which can …\nAdds a <code>UniqueTypeId</code> to metadata mapping to the <code>TypeMap</code>. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a stub debuginfo node onto which fields and nested …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDetermines if <code>pointee_ty</code> is slice-like or …\nDeclare a function.\nDeclare a function with a SimpleCx.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOwning pointer to an <code>OperandBundle</code> that will dispose of …\nSafe wrapper for <code>LLVMAppendModuleInlineAsm</code>, which …\nDereferences to the underlying <code>&amp;OperandBundle</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nLLVM diagnostic reports.\nBindings to the LLVM-C API (<code>LLVM*</code>), and to our own …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafe wrapper around <code>LLVMGetParam</code>, because segfaults are no …\nSafe wrapper for <code>LLVMGetValueName2</code> Needs to allocate the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the <code>name</code>d comdat from <code>llmod</code> and assign it to <code>llglobal</code>.\nSafe wrapper for <code>LLVMSetValueName2</code> from a byte slice\nLLVM has other types that we do not wrap here.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMust match the layout of <code>LLVMInlineAsmDialect</code>.\nLLVMAtomicOrdering\nLLVMAtomicRmwBinOp\nMust match the layout of <code>LLVMRustAttributeKind</code>. …\nIn the LLVM-C API, boolean values are passed as …\nLLVM CallingConv::ID. Should we wrap this?\nLLVMRustChecksumKind\nLLVMRustCodeGenOptLevel\nLLVMRustCodeModel\nLLVMDLLStorageClass\nLLVMRustDiagnosticKind\nLLVMRustDiagnosticLevel\nLLVMRustFileType\nLLVMRustFloatABI\nLLVMIntPredicate\nAppend inline assembly to a module. See …\nCreates a legacy pass manager – only used for final …\nData layout. See Module::getDataLayout.\nCreate the specified uniqued inline asm string. See …\nAdd LLVM module flags.\nSafety\nReturns a string describing the last error caused by an …\nPrints the timing information collected by …\nPrints the statistics collected by <code>-Zprint-codegen-stats</code>.\nWrites a module to the specified path. Returns 0 on …\nMust match the layout of <code>LLVMLinkage</code>.\nLLVMRustMemoryEffects\nLLVMMetadataType\nMust match the layout of <code>LLVMRustModuleFlagMergeBehavior</code>.\nLLVMOpcode\nOpaque pointee of <code>LLVMOperandBundleRef</code>.\nLLVMRustOptStage\nLLVMRustPassBuilderOptLevel\nWrapper for a raw enum value returned from LLVM’s C APIs.\nLLVMRealPredicate\nLLVMRustRelocModel\nLLVMRustSanitizerOptions\nMust match the layout of <code>LLVMTailCallKind</code>.\nLLVMRustThinLTOModule\nLLVMThreadLocalMode\nConvenience trait to convert <code>bool</code> to <code>llvm::Bool</code> with an …\nMust match the layout of <code>LLVMTypeKind</code>.\nLLVMUnnamedAddr\nMust match the layout of <code>LLVMVisibility</code>.\nWe don’t own or consume a <code>T</code>, but we can produce one.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nCreate an LLVM Attribute with no associated value.\nCreate an LLVM Attribute with these memory effects.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nConverts this LLVM-C boolean to a Rust <code>bool</code>\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nCreates an integer type with the given number of bits, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nOpaque target type for references to an LLVM debuginfo …\nOwning pointer to a <code>DIBuilder&lt;&#39;ll&gt;</code> that will dispose of …\nMust match the layout of <code>LLVMDIFlags</code> in the LLVM-C API.\nLLVMRustDebugEmissionKind\nLLVMRustDebugNameTableKind\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the host CPU name, according to LLVM.\nThe list of LLVM features computed from CLI flags (…\nIf the given string is <code>&quot;native&quot;</code>, returns the host CPU name …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe target features for compiler flags other than …\nUsed to generate cfg variables and apply features. Must …\nConvert a Rust feature name to an LLVM feature name. …\nDetermine whether or not experimental float types are …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCopy into a temporary if the type is more aligned than the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")