searchState.loadedDescShard("rustc_mir_dataflow", 0, "The tracked value is uninitialized or was moved out of and …\nA dataflow problem with an arbitrarily complex transfer …\nDataflow that runs from the exit of a block (terminator), …\nRaw content of Fluent resource for this crate, generated …\nThe direction of this analysis. Either <code>Forward</code> or <code>Backward</code>.\nThe type that holds the dataflow state at any given point …\nThe value of an inserted drop flag.\nDataflow that runs from the entry of a block (the first …\nThe legal operations for a transfer function in a gen/kill …\nA partially ordered set that has a least upper bound for …\nExtend a lattice with a bottom value to represent an …\nA descriptive name for this analysis. Used only for …\nThe tracked value is initialized and needs to be dropped …\nThe results of a dataflow analysis that has converged to …\nAllows random access inspection of the results of a …\nA visitor over the results of an <code>Analysis</code>. Use this when …\nAuxiliary data used for analyzing <code>SwitchInt</code> terminators, …\nUpdates the current dataflow state with the effect of a …\nUpdates the current dataflow state with an “early” …\nUpdates the current dataflow state with an effect that …\nCalled by <code>iterate_to_fixpoint</code> during initial analysis …\nCalled by <code>ResultsCursor</code> to recompute the domain value for …\nUpdates the current dataflow state with the effect of …\nUpdates the current dataflow state with the effect of …\nSee comments on <code>get_switch_int_data</code>.\nReturns the initial value of the dataflow state upon entry …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCustom formatting traits used when outputting Graphviz …\nA framework that can express both gen-kill and generic …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInserts <code>elem</code> into the state vector.\nCalls <code>gen</code> for each element in <code>elems</code>.\nUsed to update the current dataflow state with the effect …\nA helpful diagram for debugging dataflow problems.\nMutates the initial value of the dataflow state upon entry …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFinds the fixpoint for this dataflow problem.\nComputes the least upper bound of two elements, storing …\nRemoves <code>elem</code> from the state vector.\nCalls <code>kill</code> for each element in <code>elems</code>.\nTraits used to represent lattices for use as the domain of …\nThe move-analysis portion of borrowck needs to work in an …\nIndicates that <code>state</code> has been modified with a custom …\nCalled after the “early” effect of the given statement …\nCalled after the “early” effect of the given …\nCalled after the “primary” effect of the given …\nCalled after the “primary” effect of the given …\nLike <code>visit_results</code>, but only for reachable blocks.\nCalls the corresponding method in <code>ResultsVisitor</code> for every …\nCalled by <code>ResultsVisitor</code> to recompute the analysis domain …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturn the set of locals that appear in debuginfo.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe tracked value is uninitialized or was moved out of and …\nThe value of an inserted drop flag.\nIndicates which variants are inactive at a <code>SwitchInt</code> edge …\nThe tracked value is initialized and needs to be dropped …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>handle_inactive_variant</code> for each child move path of …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImplements <code>fmt::Debug</code> by deferring to …\nImplements <code>fmt::Debug</code> by deferring to …\nAn extension to <code>fmt::Debug</code> for data that can be better …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nPrint the difference between <code>self</code> and <code>old</code>.\nPrint the difference between <code>self</code> and <code>old</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA dataflow problem with an arbitrarily complex transfer …\nAnalysis domains are all bitsets of various kinds. This …\nThe direction of this analysis. Either <code>Forward</code> or <code>Backward</code>.\nThe type that holds the dataflow state at any given point …\nThe “early” effect (e.g., <code>apply_early_statement_effect</code>…\nThe legal operations for a transfer function in a gen/kill …\nA descriptive name for this analysis. Used only for …\nThe “primary” effect (e.g., …\nAuxiliary data used for analyzing <code>SwitchInt</code> terminators, …\nUpdates the current dataflow state with the effect of a …\nUpdates the current dataflow state with an “early” …\nUpdates the current dataflow state with an effect that …\nUpdates the current dataflow state with the effect of …\nUpdates the current dataflow state with the effect of …\nSee comments on <code>get_switch_int_data</code>.\nReturns the initial value of the dataflow state upon entry …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nRandom access inspection of the results of a dataflow …\nCustom formatting traits used when outputting Graphviz …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInserts <code>elem</code> into the state vector.\nCalls <code>gen</code> for each element in <code>elems</code>.\nUsed to update the current dataflow state with the effect …\nA helpful diagram for debugging dataflow problems.\nMutates the initial value of the dataflow state upon entry …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFinds the fixpoint for this dataflow problem.\nRemoves <code>elem</code> from the state vector.\nCalls <code>kill</code> for each element in <code>elems</code>.\nTraits used to represent lattices for use as the domain of …\nReturns <code>true</code> if the effect at <code>self</code> should be applied …\nReturns <code>true</code> if the effect at <code>self</code> should be applied …\nDataflow analysis results.\nSome <code>ResultsCursor</code>s want to own an <code>Analysis</code>, and some want …\nAllows random access inspection of the results of a …\nReturns the <code>Analysis</code> used to generate the underlying …\nApplies <code>f</code> to the cursor’s internal state.\nReturns the body this analysis was run on.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the dataflow state at the current location.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new cursor that borrows and inspects analysis …\nReturns a new cursor that takes ownership of and inspects …\nAdvances the cursor to hold the dataflow state at <code>target</code> …\nAdvances the cursor to hold the dataflow state at <code>target</code> …\nResets the cursor to hold the state after the terminator …\nResets the cursor to hold the entry set for the given …\nResets the cursor to hold the state prior to the first …\nIndicates that <code>state</code> has been modified with a custom …\nDataflow that runs from the exit of a block (terminator), …\nDataflow that runs from the entry of a block (the first …\nCalled by <code>iterate_to_fixpoint</code> during initial analysis …\nCalled by <code>ResultsCursor</code> to recompute the domain value for …\nCalled by <code>ResultsVisitor</code> to recompute the analysis domain …\nImplements <code>fmt::Debug</code> by deferring to …\nImplements <code>fmt::Debug</code> by deferring to …\nAn extension to <code>fmt::Debug</code> for data that can be better …\nThe background color used for zebra-striping the table.\nA pair of a basic block and an index into that basic …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the path where dataflow results should be written, …\nWrites a DOT file containing the results of a dataflow …\nWrite a row with the given index and MIR, using the …\nExtends a type <code>T</code> with top and bottom elements to make it a …\nA set that has a “bottom” element, which is less than …\nA set that has a “top” element, which is greater than …\nA partially ordered set that has a least upper bound for …\nExtend a lattice with a bottom value to represent an …\nComputes the least upper bound of two elements, storing …\nUtility type used in a few places where it’s convenient …\nThe results of a dataflow analysis that has converged to …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a <code>ResultsCursor</code> that takes ownership of <code>self</code>.\nA visitor over the results of an <code>Analysis</code>. Use this when …\nCalled after the “early” effect of the given statement …\nCalled after the “early” effect of the given …\nCalled after the “primary” effect of the given …\nCalled after the “primary” effect of the given …\nLike <code>visit_results</code>, but only for reachable blocks.\nCalls the corresponding method in <code>ResultsVisitor</code> for every …\n<code>EverInitializedPlaces</code> tracks all places that might have …\nThere can be many more <code>InitIndex</code> than there are locals in …\nA dataflow analysis that tracks whether a pointer or …\n<code>MaybeInitializedPlaces</code> tracks all places that might be …\nA live-variable dataflow analysis.\nDataflow analysis that determines whether each local …\nLike <code>MaybeLiveLocals</code>, but does not mark locals as live if …\n<code>MaybeUninitializedPlaces</code> tracks all places that might be …\nThere can be many more <code>MovePathIndex</code> than there are locals …\nThe set of locals in a MIR body that do not have …\nThe set of locals that are borrowed at some point in the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA dataflow analysis that tracks whether a pointer or …\nA <code>Visitor</code> that defines the transfer function for …\nThe set of locals that are borrowed at some point in the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>EverInitializedPlaces</code> tracks all places that might have …\nThere can be many more <code>InitIndex</code> than there are locals in …\n<code>MaybeInitializedPlaces</code> tracks all places that might be …\n<code>MaybeUninitializedPlaces</code> tracks all places that might be …\nThere can be many more <code>MovePathIndex</code> than there are locals …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEnsures definitely inactive variants are excluded from the …\nReturns the argument unchanged.\nEnsures definitely inactive variants are included in the …\nCalls <code>U::from(self)</code>.\nCauses inactive enum variants to be marked as “maybe …\nCreates a <code>SmallVec</code> mapping each target in <code>targets</code> to its …\nA live-variable dataflow analysis.\nLike <code>MaybeLiveLocals</code>, but does not mark locals as live if …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>always_alive</code> set is the set of locals to which all …\nDataflow analysis that determines whether each local …\nThe set of locals in a MIR body that do not have …\nKill locals that are fully moved and have not been …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIndicates that <code>state</code> has been modified with a custom …\nExtends a type <code>T</code> with top and bottom elements to make it a …\nA set that has a “bottom” element, which is less than …\nA set that has a “top” element, which is greater than …\nA partially ordered set that has a least upper bound for …\nExtend a lattice with a bottom value to represent an …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturn whether the current state contains the given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nComputes the least upper bound of two elements, storing …\nDeep init, even on panic\n<code>Init</code> represents a point in a program that initializes some …\nAdditional information about the initialization.\nInitializations can be from an argument or from a …\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\n<code>MoveOut</code> represents a point in a program that moves out of …\n<code>MovePath</code> is a canonicalized representation of a path that …\nTables mapping from a place to its MovePathIndex.\nThis doesn’t initialize the variable on panic (and a …\nOnly does a shallow init\nZero value of the index.\nZero value of the index.\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nFor the move path <code>mpi</code>, returns the root local variable …\nReturns an iterator over the immediate children of <code>self</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nFinds the closest descendant of <code>self</code> for which <code>f</code> returns …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nEach Location <code>l</code> is mapped to the Inits that are effects of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn enumerated iterator of <code>local</code>s and their associated …\nExtra information about this initialization\nEach Location <code>l</code> is mapped to the MoveOut’s that are …\nlocation of initialization\nLocation-indexed (BasicBlock for outer index, index within …\nReturns an iterator over the parents of <code>self</code>.\npath being moved\npath being initialized\nprojections are made from a base-place and a projection …\nlocation of move\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis creates a MovePath for a given place, returning an …\nMaps between a <code>Location</code> and a <code>PointIndex</code> (and vice versa).\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nA single integer representing a <code>Location</code> in the MIR …\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nMap backward from each point to the basic block that it …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the <code>PointIndex</code> for the first statement in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTotal number of point indices\nConverts a <code>Location</code> into a <code>PointIndex</code>. O(1).\nSometimes we get point-indices back from bitsets that may …\nAdd points depending on the result of the given dataflow …\nFor each basic block, how many points are contained within?\nReturn the PointIndex for the block start of this index.\nConverts a <code>PointIndex</code> back to a location. O(1).\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis function scans <code>mir</code> for all calls to the intrinsic …\nIf <code>stmt</code> is an assignment where the LHS is the given local …\nThe iterator returned by <code>UnDerefer::iter_projections</code>.\nUsed for reverting changes made by <code>DerefSeparator</code>\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the chain of places behind <code>DerefTemp</code> locals\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates over the projections of a place and its deref …\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nPartial mapping from <code>Place</code> to <code>PlaceIndex</code>, where some …\nThis index uniquely identifies a place.\nThis is the information tracked for every <code>PlaceIndex</code> and …\nDataflow state.\nSee <code>State</code>.\nThe set of projection elements that can be used by a …\nThis index uniquely identifies a tracked place and …\nUsed as the result of an operand or r-value.\nZero value of the index.\nZero value of the index.\nApplies a single projection element, yielding the …\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nHelper method to interpret <code>target = result</code>.\nHelper method for assignments to a discriminant.\nPrecompute the list of values inside <code>root</code> and store it …\nIterate over all direct children.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns all locals with projections that have their …\nLocates the given place, if it exists in the tree.\nLocates the given place and applies <code>Discriminant</code>, if it …\nLocates the given place, if it exists in the tree.\nLocates the given place and applies <code>DerefLen</code>, if it exists …\nThe leftmost child.\nAssign <code>TOP</code> to all places that are contained in <code>place</code> or …\nAssign <code>TOP</code> to the discriminant of <code>place</code> and all places …\nAssign <code>value</code> to the discriminant of <code>place</code> and all places …\nAssign <code>value</code> to all places that are contained in <code>place</code> or …\nThis method is the most general version of the <code>flood_*</code> …\nInvoke a function on the given place and all places that …\nInvoke a function on each value in the given place and all …\nInvoke a function on each value in the given place and all …\nInvoke the given function on all the descendants of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nRetrieve the value stored for a place, or ⊤ if it is not …\nRetrieve the value stored for a place, or ⊤ if it is not …\nRetrieve the value stored for a place index, or ⊤ if it …\nRetrieve the value stored for a place, or ⊤ if it is not …\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nLow-level method that assigns to a place. This does …\nCopies <code>source</code> to <code>target</code>, including all tracked places …\nLow-level method that assigns a value to a place. This …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvokes <code>f</code> on all direct fields of <code>ty</code>.\nThis map only contains values that are not <code>⊥</code>.\nReturns a map that only tracks places whose type has …\nIndex of the sibling to the right of this node.\nThe projection used to go from parent to this node (only …\nRegister all non-excluded places that have scalar layout.\nRetrieve the value stored for a place, or <code>None</code> if it is …\nRetrieve the discriminant stored for a place, or <code>None</code> if …\nRetrieve the value stored for a place index, or <code>None</code> if it …\nRetrieve the slice length stored for a place, or <code>None</code> if …\nType of the referenced place.\nWe store a <code>ValueIndex</code> if and only if the placed is tracked …")