searchState.loadedDescShard("rustc_interface", 0, "Raw content of Fluent resource for this crate, generated …\nThroughout the compiler tree, there are several places …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRegistering limits:\nSets up the callbacks in prior crates which we want to …\nThis is a callback from <code>rustc_hir</code> as it cannot access the …\nThis is a callback from <code>rustc_query_system</code> as it cannot …\nThis is a callback from <code>rustc_query_system</code> as it cannot …\nSets up the callbacks in prior crates which we want to …\nThis is a callback from <code>rustc_errors</code> as it cannot access …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents a compiler session. Note that every <code>Compiler</code> …\nThe compiler configuration\nContains the error value\nContains the success value\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nUnparsed cfg! configuration in addition to the default …\nA reference to the current <code>GlobalCtxt</code> which we pass on to …\nAll commandline args used to invoke the compiler, with …\nAn extra set of symbols to add to the symbol interner, the …\nLoad files from sources other than the file system.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis is a callback to hash otherwise untracked state used …\nInitialize jobserver before getting <code>jobserver::client</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA jobserver reference which we pass on to <code>GlobalCtxt</code>.\nThe list of fluent resources, used for lints declared with …\nThis is a callback from the driver that is called to …\nCommand line options\nThis is a callback from the driver that is called just …\nConverts strings provided as <code>--cfg [cfgspec]</code> into a <code>Cfg</code>.\nConverts strings provided as <code>--check-cfg [specs]</code> into a …\nThis is a callback from the driver that is called when …\nThis is a callback from the driver that is called when we…\nRegistry of diagnostics codes.\nThe inner atomic value is set to true when a feature …\nRuns the type-checking, region checking and other …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nRuns the “early phases” of the compiler: initial <code>cfg</code> …\nReturns the argument unchanged.\nCompute and validate the crate name.\nCalls <code>U::from(self)</code>.\nRuns all analyses that we guarantee to run, even if errors …\nRuns the codegen backend, after which the AST and analysis …\nValidate <em>all</em> occurrences of the given “value-str” …\nFunction pointer type that constructs a new CodegenBackend.\nAdds <code>target_feature = &quot;...&quot;</code> cfgs for a variety of platform …\nEnsures that all target features required by the ABI are …\nGet the codegen backend based on the name and specified …\nReturns the version string for <code>rustc</code> itself (which may be …\nReturns a version string such as “1.46.0 (04488afe3 …")