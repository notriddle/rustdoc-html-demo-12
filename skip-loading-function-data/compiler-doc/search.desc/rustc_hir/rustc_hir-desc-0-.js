searchState.loadedDescShard("rustc_hir", 0, "HIR datatypes. See the rustc dev guide for more info.\nThe <code>HirId</code> corresponding to <code>CRATE_NODE_ID</code> and <code>CRATE_DEF_ID</code>.\nRepresents the <code>#[rustc_const_unstable]</code> and …\nStabilized in the upcoming version, whatever number that …\nRepresents the <code>#[rustc_default_body_unstable]</code> attribute.\nFailed to parse a stabilization version.\nRequirements for a <code>StableHashingContext</code> to be used in this …\nUniquely identifies a node in the HIR of the current …\nSignal local id which should never be used.\nSignal local id which should never be used.\nMethod in a <code>impl Type</code> block\nAn <code>ItemLocalId</code> uniquely identifies something within a …\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nExisting slot with equivalent key.\nAn occupied entry.\nExcludes <code>const_stable_indirect</code>. This is necessary because …\nRepresents the following attributes:\nThe available stability levels.\n<code>#[stable]</code>\nRust release in which a feature is stabilized.\nMethod in a <code>trait Trait</code> block\nMethod in a <code>impl Trait for Type</code> block\n<code>#[unstable]</code>\nThe version placeholder that recently stabilized features …\nVacant slot (no equivalent key in the map).\nA vacant entry.\nalso stores the original symbol for printing\nZero value of the index.\nThis higher-order macro declares a list of types which can …\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nData structures for representing parsed attributes in the …\nThis is true iff the <code>const_stable_indirect</code> attribute is …\nFor each definition, we track the following data. A …\nFinds attributes in sequences of attributes by pattern …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHIR walker for walking the contents of nodes.\nDefines lang items.\nwhether the function has a <code>#[rustc_promotable]</code> attribute\nwhether the function has a <code>#[rustc_promotable]</code> attribute\nThis module implements some validity checks for attributes.\nValidity checking for weak lang items\nWhether a default is provided for this method\nThis is <code>Some</code> if this item allowed to be referred to on …\nIf part of a feature is stabilized and a new feature is …\nRelevant <code>rust-lang/rust</code> issue.\nReason for the current stability level.\nRust release which stabilized this feature.\nRepresents <code>#[align(N)]</code>.\nRepresents <code>#[rustc_allow_const_fn_unstable]</code>.\nRepresents <code>#[rustc_allow_incoherent_impl]</code>.\nRepresents <code>#[allow_internal_unsafe]</code>.\nRepresents <code>#[allow_internal_unstable]</code>.\nRepresents <code>#[rustc_as_ptr]</code> (used by the …\nRepresents parsed <em>built-in</em> inert attributes.\nRepresents <code>#[automatically_derived]</code>\nRepresents <code>#[rustc_default_body_unstable]</code>.\nRepresents <code>#[rustc_coherence_is_core]</code>.\nRepresents <code>#[rustc_coinductive]</code>.\nRepresents <code>#[cold]</code>.\nRepresents <code>#[rustc_confusables]</code>.\nRepresents <code>#[const_continue]</code>.\nRepresents <code>#[rustc_const_stable]</code> and …\nRepresents <code>#[rustc_const_stable_indirect]</code>.\nRepresents <code>#[const_trait]</code>.\nRepresents <code>#[coroutine]</code>.\nRepresents <code>#[coverage(..)]</code>.\nSuccessfully-parsed value of a <code>#[coverage(..)]</code> attribute.\nRepresents <code>#[crate_name = ...]</code>\nRepresents <code>#[custom_mir]</code>.\nSame as IMPORT_NAME Name is decorated with all prefixes …\nNo <code>#[optimize(..)]</code> attribute\nRepresents <code>#[rustc_deny_explicit_impl]</code>.\nRelease in which an API is deprecated.\nRepresents <code>#[deprecated]</code>.\nRepresents <code>#[rustc_do_not_implement_via_object]</code>.\n<code>#[optimize(none)]</code>\nRepresents <code>#[doc]</code>.\nRepresents <code>#[rustc_dummy]</code>.\nDynamic library (e.g. <code>libfoo.so</code> on Linux) or an import …\nFailed to parse a deprecation version, or the deprecation …\nRepresents <code>#[export_name]</code>.\nRepresents <code>#[export_stable]</code>.\nRepresents <code>#[ffi_const]</code>.\nRepresents <code>#[ffi_pure]</code>.\n<code>#[rustc_force_inline]</code> forces inlining to happen in the MIR …\nA macOS-specific kind of dynamic libraries.\nRepresents <code>#[fundamental]</code>.\nDeprecated in the future (“to be determined”).\nRepresents <code>#[ignore]</code>\nRepresents <code>#[inline]</code> and <code>#[rustc_force_inline]</code>.\nRepresents <code>#[link]</code>.\nArgument which is passed to linker, relative order with …\nRepresents <code>#[link_name]</code>.\nRepresents <code>#[link_ordinal]</code>.\nRepresents <code>#[link_section]</code>\nPossible values for the <code>#[linkage]</code> attribute, allowing to …\nRepresents <code>#[linkage]</code>.\nRepresents <code>#[loop_match]</code>.\nRepresents <code>#[macro_escape]</code>.\nRepresents <code>#[rustc_macro_transparency]</code>.\nRepresents <code>#[macro_use]</code>.\nRepresents <code>#[marker]</code>.\nRepresents <code>#[may_dangle]</code>.\nRepresents <code>#[must_use]</code>.\nRepresents <code>#[naked]</code>\nRepresents <code>#[no_implicit_prelude]</code>\nRepresents <code>#[no_mangle]</code>\nSame as IMPORT_NAME_NOPREFIX Prefix (e.g., the leading <code>_</code> …\nRepresents <code>#[non_exhaustive]</code>\n<code>feature(staged_api)</code> is off. Deprecation versions outside …\nRepresents <code>#[optimize(size|speed)]</code>\nIMPORT_ORDINAL Uses the ordinal (i.e., a number) rather …\nRepresents <code>#[rustc_paren_sugar]</code>.\nRepresents <code>#[rustc_pass_by_value]</code> (used by the …\nRepresents <code>#[path]</code>\nDifferent ways that the PE Format can decorate a symbol …\nRepresents <code>#[pointee]</code>\nThis trait is used to print attributes in <code>rustc_hir_pretty</code>.\nRepresents <code>#[proc_macro]</code>\nRepresents <code>#[proc_macro_attribute]</code>\nRepresents <code>#[proc_macro_derive]</code>\nRepresents <code>#[rustc_pub_transparent]</code> (used by the …\nDynamic library (e.g. <code>foo.dll</code> on Windows) without a …\nRepresents <code>#[repr]</code>.\nRepresents <code>#[rustc_builtin_macro]</code>.\nRepresents <code>#[rustc_layout_scalar_valid_range_end]</code>.\nRepresents <code>#[rustc_layout_scalar_valid_range_start]</code>.\nRepresents <code>#[rustc_object_lifetime_default]</code>.\nRepresents <code>#[sanitize]</code>\nRepresents <code>#[should_panic]</code>\n<code>#[optimize(size)]</code>\nRepresents <code>#[rustc_skip_during_method_dispatch]</code>.\nRepresents <code>#[rustc_specialization_trait]</code>.\n<code>#[optimize(speed)]</code>\nRepresents <code>#[stable]</code>, <code>#[unstable]</code> and …\nStatic library (e.g. <code>libfoo.a</code> on Linux or <code>foo.lib</code> on …\nRepresents <code>#[rustc_std_internal_symbol]</code>.\nRepresents <code>#[target_feature(enable = &quot;...&quot;)]</code> and …\nRepresents <code>#[track_caller]</code>\nRepresents <code>#[type_const]</code>.\nSame as IMPORT_NAME_UNDECORATE Prefix (e.g., the leading <code>_</code> …\nRepresents <code>#[rustc_unsafe_specialization_marker]</code>.\nDeprecation version is unspecified but optional.\nThe library kind wasn’t specified, <code>Dylib</code> is currently …\nRepresents <code>#[unstable_feature_bound]</code>.\nRepresents <code>#[used]</code>\nThere are three valid forms of the attribute: <code>#[used]</code>, …\nModule imported from WebAssembly\nGet a flags value with all known bits set.\nReturn sanitizer’s name\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe note to issue a reason.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nWhether or not this will render as something meaningful, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nA text snippet used to completely replace any use of the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe name to export this item with. It may not contain \\0 …\nignore can optionally have a reason: …\nmust_use can optionally have a reason: …\nSpan of the <code>#[rustc_default_body_unstable(...)]</code> attribute\nSpan of the <code>#[rustc_const_stable(...)]</code> or …\nSpan of the attribute.\nWhether the dynamic library will be linked only if it …\nWhether the framework will be linked only if it satisfies …\nWhether to bundle objects from static library into …\nWhether to link static library without throwing any object …\nRepresents <code>#[align(N)]</code>.\nRepresents <code>#[rustc_allow_const_fn_unstable]</code>.\nRepresents <code>#[rustc_allow_incoherent_impl]</code>.\nRepresents <code>#[allow_internal_unsafe]</code>.\nRepresents <code>#[allow_internal_unstable]</code>.\nRepresents <code>#[rustc_as_ptr]</code> (used by the …\nRepresents parsed <em>built-in</em> inert attributes.\nRepresents <code>#[automatically_derived]</code>\nRepresents <code>#[rustc_default_body_unstable]</code>.\nRepresents <code>#[rustc_coherence_is_core]</code>.\nRepresents <code>#[rustc_coinductive]</code>.\nRepresents <code>#[cold]</code>.\nRepresents <code>#[rustc_confusables]</code>.\nRepresents <code>#[const_continue]</code>.\nRepresents <code>#[rustc_const_stable]</code> and …\nRepresents <code>#[rustc_const_stable_indirect]</code>.\nRepresents <code>#[const_trait]</code>.\nRepresents <code>#[coroutine]</code>.\nRepresents <code>#[coverage(..)]</code>.\nSuccessfully-parsed value of a <code>#[coverage(..)]</code> attribute.\nRepresents <code>#[crate_name = ...]</code>\nRepresents <code>#[custom_mir]</code>.\nSame as IMPORT_NAME Name is decorated with all prefixes …\nNo <code>#[optimize(..)]</code> attribute\nRepresents <code>#[rustc_deny_explicit_impl]</code>.\nRelease in which an API is deprecated.\nRepresents <code>#[deprecated]</code>.\nRepresents <code>#[rustc_do_not_implement_via_object]</code>.\n<code>#[optimize(none)]</code>\nRepresents <code>#[doc]</code>.\nRepresents <code>#[rustc_dummy]</code>.\nDynamic library (e.g. <code>libfoo.so</code> on Linux) or an import …\nFailed to parse a deprecation version, or the deprecation …\nRepresents <code>#[export_name]</code>.\nRepresents <code>#[export_stable]</code>.\nRepresents <code>#[ffi_const]</code>.\nRepresents <code>#[ffi_pure]</code>.\n<code>#[rustc_force_inline]</code> forces inlining to happen in the MIR …\nA macOS-specific kind of dynamic libraries.\nRepresents <code>#[fundamental]</code>.\nDeprecated in the future (“to be determined”).\nRepresents <code>#[ignore]</code>\nRepresents <code>#[inline]</code> and <code>#[rustc_force_inline]</code>.\nRepresents <code>#[link]</code>.\nArgument which is passed to linker, relative order with …\nRepresents <code>#[link_name]</code>.\nRepresents <code>#[link_ordinal]</code>.\nRepresents <code>#[link_section]</code>\nPossible values for the <code>#[linkage]</code> attribute, allowing to …\nRepresents <code>#[linkage]</code>.\nRepresents <code>#[loop_match]</code>.\nRepresents <code>#[macro_escape]</code>.\nRepresents <code>#[rustc_macro_transparency]</code>.\nRepresents <code>#[macro_use]</code>.\nRepresents <code>#[marker]</code>.\nRepresents <code>#[may_dangle]</code>.\nRepresents <code>#[must_use]</code>.\nRepresents <code>#[naked]</code>\nRepresents <code>#[no_implicit_prelude]</code>\nRepresents <code>#[no_mangle]</code>\nSame as IMPORT_NAME_NOPREFIX Prefix (e.g., the leading <code>_</code> …\nRepresents <code>#[non_exhaustive]</code>\n<code>feature(staged_api)</code> is off. Deprecation versions outside …\nRepresents <code>#[optimize(size|speed)]</code>\nIMPORT_ORDINAL Uses the ordinal (i.e., a number) rather …\nRepresents <code>#[rustc_paren_sugar]</code>.\nRepresents <code>#[rustc_pass_by_value]</code> (used by the …\nRepresents <code>#[path]</code>\nDifferent ways that the PE Format can decorate a symbol …\nRepresents <code>#[pointee]</code>\nRepresents <code>#[proc_macro]</code>\nRepresents <code>#[proc_macro_attribute]</code>\nRepresents <code>#[proc_macro_derive]</code>\nRepresents <code>#[rustc_pub_transparent]</code> (used by the …\nDynamic library (e.g. <code>foo.dll</code> on Windows) without a …\nRepresents <code>#[repr]</code>.\nRepresents <code>#[rustc_builtin_macro]</code>.\nRepresents <code>#[rustc_layout_scalar_valid_range_end]</code>.\nRepresents <code>#[rustc_layout_scalar_valid_range_start]</code>.\nRepresents <code>#[rustc_object_lifetime_default]</code>.\nRepresents <code>#[sanitize]</code>\nRepresents <code>#[should_panic]</code>\n<code>#[optimize(size)]</code>\nRepresents <code>#[rustc_skip_during_method_dispatch]</code>.\nRepresents <code>#[rustc_specialization_trait]</code>.\n<code>#[optimize(speed)]</code>\nRepresents <code>#[stable]</code>, <code>#[unstable]</code> and …\nStatic library (e.g. <code>libfoo.a</code> on Linux or <code>foo.lib</code> on …\nRepresents <code>#[rustc_std_internal_symbol]</code>.\nRepresents <code>#[target_feature(enable = &quot;...&quot;)]</code> and …\nRepresents <code>#[track_caller]</code>\nRepresents <code>#[type_const]</code>.\nSame as IMPORT_NAME_UNDECORATE Prefix (e.g., the leading <code>_</code> …\nRepresents <code>#[rustc_unsafe_specialization_marker]</code>.\nDeprecation version is unspecified but optional.\nThe library kind wasn’t specified, <code>Dylib</code> is currently …\nRepresents <code>#[unstable_feature_bound]</code>.\nRepresents <code>#[used]</code>\nThere are three valid forms of the attribute: <code>#[used]</code>, …\nModule imported from WebAssembly\nWhether this attribute should be encoded in metadata files.\nWhether an item marked with #[deprecated(since = “X”)] …\nThe note to issue a reason.\nA text snippet used to completely replace any use of the …\nThe name to export this item with. It may not contain \\0 …\nignore can optionally have a reason: …\nmust_use can optionally have a reason: …\nSpan of the <code>#[rustc_default_body_unstable(...)]</code> attribute\nSpan of the <code>#[rustc_const_stable(...)]</code> or …\nSpan of the attribute.\nWhether the dynamic library will be linked only if it …\nWhether the framework will be linked only if it satisfies …\nWhether to bundle objects from static library into …\nWhether to link static library without throwing any object …\nThis trait is used to print attributes in <code>rustc_hir_pretty</code>.\nWhether or not this will render as something meaningful, …\nAnonymous constant, e.g. the <code>1 + 2</code> in <code>[u8; 1 + 2]</code>.\nAssociated constant: <code>trait MyTrait { const ASSOC: usize; }</code>\nAssociated function: <code>impl MyStruct { fn associated() {} }</code> …\nAssociated type: <code>trait MyTrait { type Assoc; }</code>\nSingle-segment attribute defined by the language (<code>#[inline]</code>…\nA closure, coroutine, or coroutine-closure.\nConstructor constant automatically created by a unit …\nConstant generic parameter: …\nRefers to the struct or enum variant’s constructor.\nWhat kind of constructor something is.\nEncodes if a <code>DefKind::Ctor</code> is the constructor of an enum …\nDefinition having a unique ID (<code>DefId</code>), corresponds to …\nWhat kind of definition something is; e.g., <code>mod</code> vs <code>struct</code>. …\nSingle-segment custom attribute registered by a derive …\nSingle-segment custom attribute registered by a derive …\nHACK: This is used to recover the NodeId of an elided …\nName resolution failed. We use a dummy <code>Res</code> variant so …\nResolution failure.\nA field in a struct, enum or union. e.g.\nConstructor function automatically created by a tuple …\nAn <code>extern</code> block.\nType from an <code>extern</code> block.\nCreated a generic parameter for an anonymous lifetime.\nA use of <code>global_asm!</code>.\nThis variant is used for anonymous lifetimes that we did …\nAn inline constant, e.g. <code>const { 1 + 2 }</code>\nLifetime parameter: the <code>&#39;a</code> in <code>struct Foo&lt;&#39;a&gt; { ... }</code>\nResolution for a lifetime appearing in a type.\nA local variable or function parameter.\nA set of macro kinds, for macros that can have more than …\nThe macro namespace includes <code>macro_rules!</code> macros, …\nDifferent kinds of symbols can coexist even if they share …\nAn attribute that is <em>not</em> implemented via macro. E.g., …\nAn attribute that is not a macro; e.g., <code>#[inline]</code> or …\nOpaque type, aka <code>impl Trait</code>.\nSuccessfully linked the lifetime to a generic parameter.\nThe result of resolving a path before lowering to HIR, …\nJust a helper ‒ separate structure for each namespace.\nA primitive type such as <code>i32</code> or <code>str</code>.\nThe resolution of a path or export.\nThe <code>Self</code> constructor, along with the <code>DefId</code> of the impl it …\nThe <code>Self</code> type, as used somewhere other than within a trait.\nThe <code>Self</code> type, as used within a trait.\n<code>&#39;static</code> lifetime.\nThis <code>DefKind::Ctor</code> is a synthesized constructor of a tuple …\nRefers to the struct itself, <code>DefKind::Ctor</code> refers to its …\nThe definition of a synthetic coroutine body created by …\nMulti-segment custom attribute living in a “tool module…\nA tool attribute module; e.g., the <code>rustfmt</code> in …\nTrait alias: <code>trait IntIterator = Iterator&lt;Item = i32&gt;;</code>\nType alias: <code>type Foo = Bar;</code>\nType parameter: the <code>T</code> in <code>struct Vec&lt;T&gt; { ... }</code>\nThe type namespace includes <code>struct</code>s, <code>enum</code>s, <code>union</code>s, <code>trait</code>…\nThe value namespace includes <code>fn</code>s, <code>const</code>s, <code>static</code>s, and …\nThis <code>DefKind::Ctor</code> is a synthesized constructor of a tuple …\nRefers to the variant itself, <code>DefKind::Ctor</code> refers to its …\nGet a flags value with all known bits set.\nReturn an indefinite article (a/an) for use with <code>descr()</code>\nGets an English article for the definition.\nGets an English article for the <code>Res</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturn the <code>DefId</code> of this <code>Def</code> if it has an ID, else panic.\nConvert the MacroKinds to a static string.\nGet an English description for the item’s kind.\nA human readable name for the res kind (“function”, “…\nThe English description of the namespace.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nReturns whether such a resolved path can occur in a tuple …\nReturns whether such a resolved path can occur in a unit …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nWhether <code>query get_codegen_attrs</code> should be used with this …\nWhether the corresponding item has generic parameters, ie. …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNote: Do you really want to use this? Often you know which …\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if all the items in this collection are <code>None</code>.\nThis is a “module” in name resolution sense.\nUsers of some attributes cannot mark them as used, so they …\nYield a set of contained flags values.\nNote: Do you really want to use this? Often you know which …\nYield a set of contained named flags values.\nAlways returns <code>true</code> if <code>self</code> is <code>Res::Err</code>\nReturn the <code>DefId</code> of this <code>Res</code> if it represents a module.\nIf this is a “module” in name resolution sense, return …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns <code>None</code> if this is <code>Res::Err</code>\nReturn <code>Some(..)</code> with the <code>DefId</code> of this <code>Res</code> if it has a ID, …\nReturns an iterator over the items which are <code>Some</code>.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nWhether it’s a <code>static mut</code> or just a <code>static</code>.\nWhether it’s an anonymous static generated for nested …\nWhether it’s a <code>unsafe static</code>, <code>safe static</code> (inside extern …\nId of the introducing place. That can be:\nId of the introducing place. See <code>Param</code>.\nKind of elided lifetime\nId of the generic parameter that introduced it.\nId of the generic parameter that introduced it.\nThe item introducing the <code>Self</code> type alias. Can be used in …\nWhether the <code>Self</code> type is disallowed from mentioning …\nIs this within an <code>impl Foo for bar</code>?\nThe trait this <code>Self</code> is a generic parameter for.\nThe crate root is always assigned index 0 by the AST Map …\nA <code>DefId</code> identifies a particular <em>definition</em>, by combining a …\nA DefIndex is an index into the hir-map for a crate, …\nA <code>DefPathHash</code> is a fixed-size representation of a <code>DefPath</code> …\nItem definitions in the currently-compiled crate would …\nA <code>LocalDefId</code> is equivalent to a <code>DefId</code> with …\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nAn occupied entry.\nAn occupied entry.\nA <code>StableCrateId</code> is a 64-bit hash of a crate name, together …\nA vacant entry.\nA vacant entry.\nZero value of the index.\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the item is defined in the crate currently …\nMakes a local <code>DefId</code> from the given <code>DefIndex</code>.\nComputes the stable ID for a crate with the given name and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn anonymous associated type from an RPITIT. The symbol …\nA constant expression (see <code>{ast,hir}::AnonConst</code>).\nA closure expression.\nThe crate root (marker).\nImplicit constructor for a unit or tuple-like struct or …\nA unique identifier that we can use to lookup a definition …\nNew variants should only be added in synchronization with …\nA <code>DefPathHash</code> is a fixed-size representation of a <code>DefPath</code> …\nThe <code>DefPathTable</code> maps <code>DefIndex</code>es to <code>DefKey</code>s and vice versa.\nThe definition table containing node definitions. It holds …\nA pair of <code>DefPathData</code> and an integer disambiguator. The …\nAn <code>extern</code> block.\nA global asm item.\nAn impl.\nSomething in the lifetime namespace.\nSomething in the macro namespace.\nAdditional static data referred to by a static.\nUsed for remapped captured lifetimes in an existential …\nAn existential <code>impl Trait</code> type node. Argument position …\nA synthetic body for a coroutine’s by-move body.\nSomething in the type namespace.\nA <code>use</code> item.\nSomething in the value namespace.\nCreates a definition with a parent definition. If there …\nThe path leading from the crate root to the item.\nGets the number of definitions.\nReturns the path from the crate root to <code>index</code>. The root …\nThe identifier of this node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe crate root this path is relative to.\nReturns <code>None</code> if the <code>DefPathHash</code> does not correspond to a …\nReturns the crate-local part of the DefPathHash.\nBuilds a new DefPathHash with the given StableCrateId and …\nAdds a root definition (no parent) and a few other …\nThe parent path.\nReturns the StableCrateId identifying the crate this …\nReturns a filename-friendly string of the <code>DefPath</code>, without …\nReturns a string representation of the <code>DefPath</code> without the …\nCreates a <code>DisambiguatorState</code> where the next allocated …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll of the primitive types\nThe <code>+</code> operator (addition)\nThe <code>+=</code> operator (addition)\nA referencing operation (i.e., <code>&amp;a</code> or <code>&amp;mut a</code>).\n<code>Type: const Trait</code>\nAn uninhabited enum used to make <code>Infer</code> variants on <code>Ty</code> and …\nAn elided lifetime <code>&amp;&#39; ty</code>.\nThe <code>&amp;&amp;</code> operator (logical and)\nA constant (expression) that’s not an item or associated …\nRepresents a single arm of a <code>match</code> expression, e.g. …\nAn array (e.g., <code>[a, b, c, d]</code>).\nA fixed length array (i.e., <code>[T; n]</code>).\nAn assignment (e.g., <code>a = foo()</code>).\nA desugared <code>expr = expr</code>, where the LHS is a tuple, struct, …\nAn assignment with an operator.\nA constraint on an associated item.\nThe kind of associated item constraint.\nAn explicit <code>async</code> block or the body of an <code>async</code> function.\nWhen lowering async functions, we create locals within the …\n<code>async fn</code>\nAn explicit <code>async gen</code> block or the body of an <code>async gen</code> …\nArguments passed to an attribute macro.\nDistinguishes between <code>Attribute</code>s that decorate items and …\nAttributes owned by a HIR owner.\nAn <code>&lt;expr&gt;.await</code>.\nA desugared <code>&lt;expr&gt;.await</code>.\nA desugared <code>&lt;expr&gt;.await</code>.\nA struct expression with a “base”, an expression of …\nA <code>become</code>, with the value to be returned.\nA binary operation (e.g., <code>a + b</code>, <code>a * b</code>).\nA fresh binding <code>ref mut binding @ OPT_SUBPATTERN</code>. The <code>HirId</code>…\nThe mode of a binding (<code>mut</code>, <code>ref mut</code>, etc). Used for both …\nThe <code>&amp;</code> operator (bitwise and)\nThe <code>&amp;=</code> operator (bitwise and)\nThe <code>|</code> operator (bitwise or)\nThe <code>|=</code> operator (bitwise or)\nThe <code>^</code> operator (bitwise xor)\nThe <code>^=</code> operator (bitwise xor)\nA block of statements <code>{ .. }</code>, which may have a label (in …\nAn explicit <code>async</code>/<code>gen</code> block written by the user.\nA block (e.g., <code>&#39;label: { ... }</code>).\nThe body of a function, closure, or constant value. In the …\nThe kind of borrow in an <code>AddrOf</code> expression, e.g., <code>&amp;place</code> …\nA bound on an associated type (e.g., <code>AssocTy: Bound</code> in …\nThe constness of a trait bound.\nThe polarity of a trait bound.\nA type bound (e.g., <code>for&lt;&#39;c&gt; Foo: Send + Clone + &#39;c</code>).\nA <code>box</code> pattern.\nAn elided lifetime with elided brackets.\nA <code>break</code>, with an optional label to break.\nA function call.\nA capture clause used in closures and <code>async</code> blocks.\nA cast (e.g., <code>foo as f64</code>).\nThis is a plain closure expression.\nAn explicit <code>async</code>/<code>gen</code> closure written by the user.\nClosures\nA closure (e.g., <code>move |a, b, c| {a + b + c}</code>).\nRepresents <code>for&lt;...&gt;</code> binder before a closure\nAn elided lifetime in brackets with written brackets.\nConstants and associated constants, also including inline …\nA <code>const</code>, associated <code>const</code>, or other const context.\nAn associated constant with an optional value (otherwise …\nAn associated constant of the given type, set to the …\nA <code>const</code> item.\nA constant that enters the type system, used for arguments …\nSee <code>ConstArg</code>.\nAn inline constant expression <code>const { something }</code>.\nAllow anonymous constants from an inline <code>const</code> block\nThe kind of an item that requires const-checking.\nA <code>const fn</code>.\nA <code>continue</code>, with an optional label.\nA contract <code>#[ensures(..)]</code> attribute injects a let binding …\nThis is a coroutine expression – i.e. a closure …\nA coroutine literal created via a <code>yield</code> inside a closure.\nThis is a coroutine-closure, which is a special sugared …\nThe type of source expression that caused this coroutine …\nIn the case of a coroutine created as part of an async/gen …\nThe top-level data structure that stores the entire …\n<code>Ctor</code> refers to the constructor of an enum variant or …\nBinder is not specified.\nA struct expression with a <code>..</code> tail but no “base” …\nReturn type is not specified.\nDelimited arguments, as used in <code>#[attr()/[]/{}]</code> or …\nDelimited arguments: <code>#[attr()/[]/{}]</code>.\nThe <code>*</code> operator for dereferencing\nA <code>deref</code> pattern (currently <code>deref!()</code> macro-based syntax).\nA coroutine that comes from a desugaring.\nThe <code>/</code> operator (division)\nThe <code>/=</code> operator (division)\nWraps the expression in a terminating scope. This makes it …\nE.g. <code>Path&lt;&gt;</code>.\nNo arguments: <code>#[attr]</code>.\nAn enum definition, e.g., <code>enum Foo&lt;A, B&gt; { C&lt;A&gt;, D&lt;B&gt; }</code>.\nThe <code>==</code> operator (equality)\nArguments of a key-value attribute: <code>#[attr = &quot;value&quot;]</code>.\nAn equality predicate (unsupported).\nAn equality constraint for an associated item (e.g., …\nA placeholder for a pattern that wasn’t well formed in …\nA placeholder for a pattern that wasn’t well formed in …\nA placeholder for an expression that wasn’t …\nPlaceholder for a type that has failed to be defined.\nIndicates an illegal name was given and an error has been …\nIndicates an error during lowering (usually <code>&#39;_</code> in wrong …\nE.g. <code>&amp;&#39;_ Type</code>, <code>ContainsLifetime&lt;&#39;_&gt;</code>, <code>impl Trait + &#39;_</code>, …\nE.g. <code>&amp;&#39;a Type</code>, <code>ContainsLifetime&lt;&#39;a&gt;</code>, <code>impl Trait + &#39;a</code>, …\nAn expression.\nA literal, const block or path.\nAn expression without a trailing semi-colon (must have …\nAn <code>extern crate</code> item, with optional <em>original</em> crate name if …\nAccess of a named (e.g., <code>obj.foo</code>) or unnamed (e.g., <code>obj.0</code>) …\nThe <code>async</code>/<code>gen</code> block generated as the body of an async/gen …\nFunctions and methods.\nAn associated function with an optional body.\nAn associated function implementation with the given …\nA function declaration.\nA foreign function.\nRepresents the header (not the body) of a function …\nA function pointer (e.g., <code>fn(usize) -&gt; bool</code>).\n<code>-&gt; impl Trait</code>\nRepresents a function’s signature in a trait declaration,\nBinder is specified.\nA <code>for _ in _ { .. }</code> loop.\nA desugared <code>for _ in _ { .. }</code> loop.\nAn item within an <code>extern</code> block.\nAn external module, e.g. <code>extern { .. }</code>.\nA desugared <code>format_args!()</code>.\nSynthetic name generated when user elided a lifetime in an …\nE.g. <code>Path&lt;T&gt;</code>.\nThe <code>&gt;=</code> operator (greater than or equal to)\nAn explicit <code>gen</code> block or the body of a <code>gen</code> function.\nThe generic arguments and associated item constraints of a …\nRecords where the generic parameter originated from.\nRepresents lifetimes and type parameters attached to a …\nGlob import, e.g., <code>use foo::*</code>.\nFake body for a global asm to store its const-like value …\nModule-level inline assembly (from <code>global_asm!</code>).\nThe <code>&gt;</code> operator (greater than)\nA guard pattern (e.g., <code>x if guard(x)</code>).\nThe derived implementation of <code>HashStable_Generic</code> on …\nThe actual safety specified in syntax. We may treat its …\nUniquely identifies a node in the HIR of the current …\nAn <code>if</code> block, with an optional else block.\nRepresents a <code>fn x(self);</code>.\nRepresents an impl block declaration.\nAn implementation, e.g., <code>impl&lt;A&gt; Trait for Foo { .. }</code>.\nRepresents an associated item within an impl block.\nRepresents various kinds of content within an <code>impl</code>.\nE.g. <code>&amp;Type</code>, <code>ContainsLifetime</code>\nImplicit lifetime in a context like <code>dyn Foo</code>. This is …\nRepresents what type of implicit self a function has, if …\nAn indexing operation (<code>foo[2]</code>). Similar to …\nUser wrote an anonymous lifetime, either <code>&#39;_</code> or nothing …\nThis variant is not always used to represent inference …\nInference variables in <code>GenericArg</code> are always represented by\n<code>TyKind::Infer</code> means the type should be inferred instead of …\nActual type should be inherited from <code>DefId</code> signature\nInline assembly (from <code>asm!</code>), with its outputs and inputs.\nIs the trait definition an auto trait?\nAn item\nAn item binding.\nAn <code>ItemLocalId</code> uniquely identifies something within a …\nReference to a <code>#[lang = &quot;foo&quot;]</code> item.\nThe <code>&lt;=</code> operator (less than or equal to)\nA local (<code>let</code>) binding.\nA <code>let $pat = $expr</code> expression.\nRepresents a <code>let &lt;pat&gt;[: &lt;ty&gt;] = &lt;expr&gt;</code> expression (not a …\nRepresents a <code>let</code> statement (i.e., <code>let &lt;pat&gt;:&lt;ty&gt; = &lt;init&gt;;</code>…\nA lifetime. The valid field combinations are non-obvious …\nA lifetime definition (e.g., <code>&#39;a: &#39;b + &#39;c + &#39;d</code>).\nDegenerate list import, e.g., <code>use foo::{a, b}</code> produces an …\nA literal.\nA literal.\nA literal (e.g., <code>1</code>, <code>&quot;foo&quot;</code>).\nHints at the original code for a let statement.\nA conditionless loop (can be exited with <code>break</code>, <code>continue</code>, …\nA <code>loop { .. }</code> loop.\nThe loop type that yielded an <code>ExprKind::Loop</code>.\nThe <code>&lt;</code> operator (less than)\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nA MBE macro definition (<code>macro_rules!</code> or <code>macro</code>).\nA <code>match</code> block, with a source that indicates whether or not …\nHints at the original code for a <code>match _ { .. }</code>.\n<code>Type: ?Trait</code>\n<code>Type: [const] Trait</code>\nA full MetaItem, for recursive meta items.\nValues inside meta item lists.\nA literal in a meta item.\nA method call (e.g., <code>x.foo::&lt;&#39;static, Bar, Baz&gt;(a, b, c, d)</code>…\nE.g. <code>Path</code>.\nA missing pattern, e.g. for an anonymous param in a bare …\nA module.\nThe movability of a coroutine / closure literal: whether a …\nMust not contain self-references, <code>Unpin</code>.\nThe <code>*</code> operator (multiplication)\nThe <code>*=</code> operator (multiplication)\nRepresents a <code>fn x(mut self);</code>.\nThe <code>!=</code> operator (not equal to)\nThe <code>-</code> operator for negation\n<code>impl !Trait for Type</code>\n<code>Type: !Trait</code>\nA never pattern <code>!</code>.\n<code>Type: Trait</code>\nThe never type (<code>!</code>).\nA struct expression where all the fields are explicitly …\nRepresents when a function does not have a self argument or\nA <code>match _ { .. }</code>.\nA <code>match _ { .. }</code>.\nThe <code>!</code> operator for logical inversion\nField offset (<code>offset_of!</code>)\nAn opaque type definition itself. This is only used for …\nFrom whence the opaque type came.\nThe <code>||</code> operator (logical or)\nA list of patterns where only one needs to be satisfied\nAn or-pattern <code>A | B | C</code>. Invariant: <code>pats.len() &gt;= 2</code>.\nOther usages which have not yet been categorized. Feel …\nE.g. <code>impl Trait + &#39;_</code>, <code>impl Trait + &#39;a</code>\nFull information resulting from lowering an AST node.\nMap of all HIR nodes inside the current owner. These nodes …\nRepresents a parameter in a function header.\nNon-lifetime argument (type or const)\nUser-given names or fresh (synthetic) names.\nNon-lifetime argument (type or const)\nparenthesized function-family traits, like …\nHIR node coupled with its parent’s id in the same HIR …\nA parsed built-in attribute.\nPattern types (<code>pattern_type!(u32 is 1..)</code>)\nNeeded as its own node with its own HirId for tracking the …\nA single field in a struct pattern.\nA <code>Path</code> is essentially Rust’s notion of a name; for …\nE.g. <code>ContainsLifetime</code>, <code>ContainsLifetime&lt;&gt;</code>, …\n<strong>Note:</strong> Currently this is only used for bare const params (<code>N</code> …\nA path pattern for a unit struct/variant or a …\nPath to a definition, possibly containing lifetime or type …\nA path to a type definition (<code>module::module::...::Type</code>), …\nA segment of a path: an identifier, an optional lifetime, …\nUsed as a placeholder for unused LocalDefId.\nA pinned borrow, <code>&amp;pin const $expr</code> or <code>&amp;pin mut $expr</code>. The …\nSome user-given name like <code>T</code> or <code>&#39;x</code>.\n<code>impl Trait for Type</code>\n<code>Type: Trait</code>\nA <code>expr.match { .. }</code>.\nE.g. <code>impl Trait + use&lt;&#39;_&gt;</code>, <code>impl Trait + use&lt;&#39;a&gt;</code>\nWe need to have a <code>Node</code> for the <code>HirId</code> that we attach the …\nNot represented directly in the AST; referred to by name …\nBoth signature and body are provided in the trait.\nA raw pointer (i.e., <code>*const T</code> or <code>*mut T</code>).\nRepresents an optionally <code>Self</code>-qualified value/type path or …\nA range pattern (e.g., <code>1..=2</code> or <code>1..2</code>).\nA range pattern (e.g., <code>1..=2</code> or <code>1..2</code>).\nA raw borrow, <code>&amp;raw const $expr</code> or <code>&amp;raw mut $expr</code>. The …\nA normal borrow, <code>&amp;$expr</code> or <code>&amp;mut $expr</code>. The resulting type …\n<code>move</code> or <code>use</code> keywords were not specified.\nA reference pattern (e.g., <code>&amp;mut (a, b)</code>).\nA reference (i.e., <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>).\nRepresents a <code>fn x(&amp;self);</code>.\nRepresents a <code>fn x(&amp;mut self);</code>.\nE.g. <code>&amp;Type</code>, <code>&amp;&#39;_ Type</code>, <code>&amp;&#39;a Type</code>, <code>&amp;mut Type</code>, <code>&amp;&#39;_ mut Type</code>, …\nA lifetime predicate (e.g., <code>&#39;a: &#39;b + &#39;c</code>).\nThe <code>%</code> operator (modulus)\nThe <code>%=</code> operator (modulus)\nAn array literal constructed from one repeated element.\nNo default body in the trait, just a signature.\nPath to a definition, optionally “fully-qualified” …\nA <code>return</code>, with an optional value to be returned.\nEverything else.\nBounds for <code>feature(return_type_notation)</code>, like …\nA safe function annotated with <code>#[target_features]</code>. The …\nAn expression with a trailing semi-colon (may have any …\nThe <code>&lt;&lt;</code> operator (shift left)\nThe <code>&lt;&lt;=</code> operator (shift left)\nThe <code>&gt;&gt;</code> operator (shift right)\nThe <code>&gt;&gt;=</code> operator (shift right)\nOne import, e.g., <code>use foo::bar</code> or <code>use foo::bar as baz</code>. …\nA slice pattern, …\nA variable length slice (i.e., <code>[T]</code>).\nMay contain self-references, <code>!Unpin</code>.\nUser wrote <code>&#39;static</code> or nothing (which gets converted to <code>&#39;_</code>).\nInitializer of a <code>static</code> item.\nA <code>static</code> or <code>static mut</code>.\nA <code>static</code> item.\nA foreign static item (<code>static ext: u8</code>).\nA statement.\nThe contents of a statement.\nA struct or struct variant pattern (e.g., …\nA struct or struct-like variant literal expression.\nA struct variant.\nA struct definition, e.g., <code>struct Foo&lt;A&gt; {x: A}</code>.\nThe <code>-</code> operator (subtraction)\nThe <code>-=</code> operator (subtraction)\nA trait definition.\nA trait alias.\nA trait ascription type, which is <code>impl Trait</code> within a …\nThe modifiers on a trait bound.\nRepresents a trait method’s body (or just argument …\nRepresents an item declaration within a trait declaration, …\nRepresents a trait method or associated constant or type\nA trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …\nReferences to traits in impls.\nA desugared <code>?</code> operator.\nA tuple (e.g., <code>(a, b, c, d)</code>).\nA tuple (<code>(A, B, C, D, ...)</code>).\nA tuple pattern (e.g., <code>(a, b)</code>). If the <code>..</code> pattern fragment …\nA tuple variant.\nA tuple struct/variant pattern <code>Variant(x, y, .., z)</code>. If …\nRepresents a type in the <code>HIR</code>.\ntype aliases: <code>type Foo = impl Trait;</code>\nA type alias, e.g., <code>type Foo = Bar&lt;u8&gt;</code>.\nThe various kinds of types recognized by the compiler.\nA type ascription (e.g., <code>x: Foo</code>). See RFC 3307.\nAn associated type with (possibly empty) bounds and …\nAn associated type.\nA foreign type.\nType-related paths (e.g., <code>&lt;T&gt;::default</code> or <code>&lt;T&gt;::Output</code>). …\nUnused for now.\nUnary operator.\nA unary operation (e.g., <code>!x</code>, <code>*x</code>).\nAn explicit <code>&#39;_</code>.\nA union definition, e.g., <code>union Foo&lt;A, B&gt; {x: A, y: B}</code>.\nA unit variant.\nAn attribute that could not be parsed, out of a token-like …\nAn unsafe binder type (e.g. <code>unsafe&lt;&#39;a&gt; Foo&lt;&#39;a&gt;</code>).\nOperators which can be used to interconvert <code>unsafe</code> binder …\nA variable captured by a closure.\n<code>use |x| y + x</code>.\nAn use expression (e.g., <code>var.use</code>).\n<code>use foo::bar::*;</code> or <code>use foo::bar::baz as quux;</code>\nUp to three resolutions for type, value and macro …\n<code>move |x| y + x</code>.\nFields and constructor IDs of enum variants and structs.\nA type bound (e.g., <code>for&lt;&#39;c&gt; Foo: Send + Clone + &#39;c</code>).\nAn equality predicate (e.g., <code>T = int</code>); currently …\nA single predicate in a where-clause.\nThe kind of a single predicate in a where-clause.\nA lifetime predicate (e.g., <code>&#39;a: &#39;b + &#39;c</code>).\nA <code>while _ { .. }</code> loop.\nRepresents a wildcard pattern (i.e., <code>_</code>).\nA suspension point for coroutines (i.e., <code>yield &lt;expr&gt;</code>).\nA plain <code>yield</code>.\nThe yield kind that caused an <code>ExprKind::Yield</code>.\nZero value of the index.\nType/lifetime parameters attached to this path. They come …\nThe generic arguments for this path segment.\nReturns <code>true</code> if <code>param_def_id</code> matches the <code>bounded_ty</code> of …\nCheaply converts a meta item literal into a token literal.\nExtracts the value of this index as a <code>u32</code>.\nConverts a <code>ConstArg</code> in an ambiguous position to one in an …\nConverts a <code>Ty</code> in an ambiguous position to one in an …\nExtracts the value of this index as a <code>usize</code>.\nCollected attributes of the HIR nodes.\nContent of local bodies.\nThe expression the arm evaluates to if this arm matches.\nReturns the bool if <code>self</code> is a boolean …\nAny generics from a <code>for</code> binding.\nThe <code>&#39;a</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>.\nThe type being bounded.\nTrait and lifetime bounds (e.g., <code>Clone + Send + &#39;static</code>).\nReturns a suggestable empty span right after the “final…\nThe associated item constraints for this path segment.\nChecks if the pattern contains any <code>ref</code> or <code>ref mut</code> …\nObtain the const on the RHS of an assoc const equality …\nReturn the <code>LocalDefId</code> of this variant’s constructor, if …\nReturn the <code>HirId</code> of this variant’s constructor, if it …\nFields and constructor id of the variant.\nWhether to use default binding modes. At present, this is …\nPreprocessed <code>#[define_opaque]</code> attribute.\nLints delayed during ast lowering to be emitted after hir …\nExplicit discriminant (e.g., <code>Foo = 1</code>).\nCall <code>f</code> on every “binding” in a pattern, e.g., on <code>a</code> in …\nCall <code>f</code> on every “binding” in a pattern, e.g., on <code>a</code> in …\nElse block for a <code>let...else</code> binding.\nWhether this and the <code>other</code> expression are the same for …\nAn expression at the end of the block without a semicolon, …\nChecks if the specified expression needs parentheses for …\nReturn the fields of this variant.\nThe span of the argument block <code>|...|</code>\nThe span of the declaration block: ‘move |…| -&gt; …’\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the matching <code>PrimTy</code> for a <code>Symbol</code> such as “str” …\nConverts an arbitrary token into meta item literal.\nConverts a token literal into a meta item literal.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nOptional guard clause.\nDoes this represent an implicit self?\nReturns <code>true</code> if this list item is a MetaItem with a name …\nId of the variant (not the constructor, see …\nFor a single-segment meta item, returns its identifier; …\nFor a single-segment attribute, returns its name; …\nGet the identifier of this <code>Node</code>, if applicable.\nEither a named lifetime definition (e.g. <code>&#39;a</code>, <code>&#39;static</code>) or an\nThe identifier portion of this path segment.\nThe identifier for the field.\nName of the variant.\nGet a <code>hir::Impl</code> if the node is an impl block for the given …\nDoes the function have an implicit self?\nExtracts the value of this index as a <code>usize</code>.\nWhether to infer remaining type parameters, if any. This …\nInitializer expression to set the value, if any.\nA span from the first token past <code>{</code> to the last token until …\nThe types of the function’s parameters.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this is an <code>ItemKind::Enum</code>, <code>ItemKind::Struct</code> or …\nTo a first-order approximation, is this a pattern?\nReturns <code>true</code> if the binary operator takes its arguments by …\nAssignOps are always by value.\nReturns <code>true</code> if the unary operator takes its argument by …\nThis can happen for <code>async fn</code>, e.g. <code>async fn f&lt;&#39;_&gt;(&amp;&#39;_ self)</code>…\nCheck if node is an impl block.\nSynthetic type-parameters are inserted after normal ones. …\nReturns <code>true</code> if the variant is <code>MetaItem</code>.\nReturn <code>true</code> if self is mutable\nWhether this a never pattern.\nReturn <code>true</code> if self is <strong>not</strong> mutable\nReturns <code>true</code> if <code>param_def_id</code> matches the <code>bounded_ty</code> of …\nReturns <code>true</code> if <code>param_def_id</code> matches the <code>lifetime</code> of this …\nWhether this is a place expression.\nChecks if the specified expression is a built-in range …\nCheck if expression is an integer literal that can be used …\nCheck if this is an <code>ItemKind::Struct</code> or <code>ItemKind::Union</code>.\nWhether <code>ty</code> is a type with <code>_</code> placeholders that can be …\nWhether this looks like a place expr, without checking for …\nReturns <code>true</code> if <code>self</code> is a <code>MetaItem</code> and the meta item is a …\nA description of this const context that can appear …\nSemantics of this lifetime.\nThe “semantic” representation of the literal lowered …\nThis is <code>Some(_)</code> iff there is an explicit user-specified ’…\nIs lifetime elision allowed.\nReturns the <code>MetaItemLit</code> if <code>self</code> is a <code>MetaItemInner::Literal</code>…\nReturns the <code>MetaItem</code> if <code>self</code> is a <code>MetaItemInner::MetaItem</code>.\nGets a list of inner meta items from a list <code>MetaItem</code> type.\nReturns the <code>MetaItem</code> if <code>self</code> is a <code>MetaItemInner::MetaItem</code> …\nThe constness and polarity of the trait ref.\nReturns <code>&quot;&quot;</code> (empty string) or <code>&quot;mutably &quot;</code> depending on the …\nFor a single-segment meta item, returns its name; …\nLike <code>PrimTy::name</code>, but returns a &amp;str instead of a symbol.\nSee <code>MetaItem::name_value_literal_span</code>.\nReturns variants that are necessary to exist for the …\nWhether a macro with these arguments needs a semicolon …\nConverts an identifier to the corresponding segment.\nPanics if n &gt;= u32::MAX.\nFull HIR for the current owner.\nContents of the HIR.\nThis function returns the number of type and const generic …\nPre-computed hash of the full HIR. Used in the crate hash. …\nOrigin of the predicate.\nObtain the list of input types and the output type if the …\nObtain the output type if the generic arguments are …\nWhether the arguments were written in parenthesized form …\nMap from each nested owner to its parent’s local id.\nThe pattern the field is destructured to.\nIf this pattern and the optional guard matches, then <code>body</code> …\nIf <code>Self.kind</code> is <code>ExprKind::DropTemps(expr)</code>, drill down …\nReturns <code>&quot;&quot;</code> (empty string) or <code>&quot;mut &quot;</code> depending on the …\nReturns <code>&quot;const&quot;</code> or <code>&quot;mut&quot;</code> depending on the mutability.\nReturns the span of the qself of this <code>QPath</code>. For example, …\n<code>Recovered::Yes</code> when this let expressions is not in a …\nReturns <code>&quot;&amp;&quot;</code> or <code>&quot;&amp;mut &quot;</code> depending on the mutability.\nThe resolution for the path.\nThe resolution for the path.\nDistinguishes between <code>unsafe { ... }</code> and <code>{ ... }</code>.\nThe segments in the path: the things separated by <code>::</code>.\nThe segments in the path: the things separated by <code>::</code>.\nIf it’s a singleton list of the form <code>foo(lit)</code>, returns …\nThe context in which the lifetime occurred. See …\nCan be <code>ForLoopDesugar</code> if the <code>let</code> statement is part of a <code>for</code>…\nThe span encompassing the arguments and constraints inside …\nReturns the span of this <code>QPath</code>.\nSpan of the entire attribute\nThe span includes the curly braces <code>{</code> and <code>}</code> around the …\nSpan\nFirst span where it is accessed (there can be multiple).\nReturns span encompassing arguments and their surrounding …\nThe span encompassing the arguments, constraints and the …\nIf there are generic parameters, return where to introduce …\nIf there are generic parameters, return where to introduce …\nStatements in a block.\nDenotes if the attribute decorates the following construct …\nThe original suffix as written in the source code.\nSpan of <code>super</code> in <code>super let</code>.\nThe original literal as written in the source code.\nThe syntax that the user used to declare this lifetime. See\n<code>Span</code> where further predicates would be suggested, …\nThese errors are caught and then reported during the …\nIf true, then there may exist <code>break &#39;a</code> values that aim to …\nGets the <code>DefId</code> of the referenced trait. It <em>must</em> actually …\nWhen we are in a trait impl, link to the trait-item’s id.\nMap indicating what traits are in scope for places where …\nThe <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>.\nConverts a <code>ConstArg</code> in an unambiguous position to one in …\nConverts a <code>Ty</code> in an unambiguous position to one in an …\nObtain the type on the RHS of an assoc ty equality …\nGet the type for constants, assoc types, type aliases and …\nType annotation, if any (otherwise the type will be …\nGets the string value if <code>self</code> is a <code>MetaItem</code> and the …\nWalk the pattern in left-to-right order.\nWalk the pattern in left-to-right order.\nWalk the pattern in left-to-right order, short circuiting …\nSpan of the <code>=</code> token.\nThe “value”.\nThe span of the <code>move</code> keyword.\nThe span of the <code>use</code> keyword.\nOptional default value for the const generic param\nA fake body which stores typeck results for the global asm…\nWhether this function actually has a body. For functions …\nassociated types in impl blocks for traits.\nThe defining function.\nThe defining function.\nThe type alias or associated type parent of the TAIT/ATPIT\n<code>|x, y| {}</code>\nHIR things retrievable from <code>TyCtxt</code>, avoiding an explicit …\nWe track whether an infer var is from a <code>Ty</code>, <code>ConstArg</code>, or …\n<code>#[xxx] pub async/const/extern &quot;Abi&quot; fn foo()</code>\n<code>fn foo(&amp;self)</code>\nOverride this type to control which nested HIR are …\nThe result type of the <code>visit_*</code> methods. Can be either <code>()</code>, …\nEach method of the Visitor trait is a hook to be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the <code>Node</code> corresponding to <code>id</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf <code>type NestedFilter</code> is set to visit nested items, this …\nAll consts are treated as ambiguous consts for the …\nExtension trait method to visit consts in unambiguous …\nVisits the top-level item and (optionally) nested items / …\nInvoked to visit the body of a function, method or …\nLike <code>visit_nested_item()</code>, but for foreign items. See …\nLike <code>visit_nested_item()</code>, but for impl items. See …\nInvoked when a nested item is encountered. By default, when\nLike <code>visit_nested_item()</code>, but for trait items. See …\nAll types are treated as ambiguous types for the purposes …\nExtension trait method to visit types in unambiguous …\nWhether the visitor visits nested “item-like” things. …\nWhether the visitor visits “intra item-like” things. …\nSpecifies what nested things a visitor wants to visit. By …\nDo not visit any nested things. When you add a new “…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>add</code> lang item.\nThe <code>add_assign</code> lang item.\nThe <code>alloc_layout</code> lang item.\nThe <code>async_drop</code> lang item.\nThe <code>async_drop_in_place</code> lang item.\nThe <code>async_fn</code> lang item.\nThe <code>async_fn_kind_helper</code> lang item.\nThe <code>async_fn_kind_upvars</code> lang item.\nThe <code>async_fn_mut</code> lang item.\nThe <code>async_fn_once</code> lang item.\nThe <code>async_fn_once_output</code> lang item.\nThe <code>AsyncGenFinished</code> lang item.\nThe <code>AsyncGenPending</code> lang item.\nThe <code>AsyncGenReady</code> lang item.\nThe <code>async_iterator</code> lang item.\nThe <code>async_iterator_poll_next</code> lang item.\nThe <code>begin_panic</code> lang item. libstd panic entry point. …\nThe <code>bikeshed_guaranteed_no_drop</code> lang item.\nThe <code>bitand</code> lang item.\nThe <code>bitand_assign</code> lang item.\nThe <code>bitor</code> lang item.\nThe <code>bitor_assign</code> lang item.\nThe <code>bitxor</code> lang item.\nThe <code>bitxor_assign</code> lang item.\nThe <code>CStr</code> lang item.\nThe <code>c_void</code> lang item.\nThe <code>call_once_future</code> lang item.\nThe <code>call_ref_future</code> lang item.\nThe <code>clone</code> lang item.\nThe <code>clone_fn</code> lang item.\nThe <code>coerce_pointee_validated</code> lang item.\nThe <code>coerce_unsized</code> lang item.\nThe <code>const_panic_fmt</code> lang item.\nThe <code>const_param_ty</code> lang item.\nThe <code>Context</code> lang item.\nThe <code>contract_build_check_ensures</code> lang item.\nThe <code>contract_check_ensures</code> lang item.\nThe <code>contract_check_requires</code> lang item.\nThe <code>Break</code> lang item.\nThe <code>Continue</code> lang item.\nThe <code>copy</code> lang item.\nThe <code>coroutine</code> lang item.\nThe <code>coroutine_resume</code> lang item.\nThe <code>coroutine_return</code> lang item.\nThe <code>coroutine_state</code> lang item.\nThe <code>coroutine_yield</code> lang item.\nThe <code>default_trait1</code> lang item.\nThe <code>default_trait2</code> lang item.\nThe <code>default_trait3</code> lang item.\nThe <code>default_trait4</code> lang item.\nThe <code>deref</code> lang item.\nThe <code>deref_mut</code> lang item.\nThe <code>deref_pure</code> lang item.\nThe <code>deref_target</code> lang item.\nThe <code>destruct</code> lang item.\nThe <code>discriminant_type</code> lang item. The associated item of …\nThe <code>discriminant_kind</code> lang item.\nThe <code>dispatch_from_dyn</code> lang item.\nThe <code>div</code> lang item.\nThe <code>div_assign</code> lang item.\nThe <code>drop</code> lang item.\nThe <code>drop_in_place</code> lang item.\nThe <code>dyn_metadata</code> lang item.\nThe <code>eh_catch_typeinfo</code> lang item.\nThe <code>eh_personality</code> lang item.\nThe number of generics must match precisely as stipulated\nThe <code>exchange_malloc</code> lang item.\nThe <code>Fn</code> lang item.\nThe <code>fn_mut</code> lang item.\nThe <code>fn_once</code> lang item.\nThe <code>fn_once_output</code> lang item.\nThe <code>fn_ptr_addr</code> lang item.\nThe <code>fn_ptr_trait</code> lang item.\nThe <code>format_argument</code> lang item.\nThe <code>format_arguments</code> lang item.\nThe <code>format_count</code> lang item.\nThe <code>format_placeholder</code> lang item.\nThe <code>format_unsafe_arg</code> lang item.\nThe <code>freeze</code> lang item.\nThe <code>fused_iterator</code> lang item.\nThe <code>future_trait</code> lang item.\nThe <code>future_output</code> lang item.\nThe <code>poll</code> lang item.\nThe requirement imposed on the generics of a lang item\nThe <code>get_context</code> lang item.\nThe <code>global_alloc_ty</code> lang item.\nThe <code>index</code> lang item.\nThe <code>index_mut</code> lang item.\nThe <code>into_async_iter_into_iter</code> lang item.\nThe <code>into_future</code> lang item.\nThe <code>into_iter</code> lang item.\nThe <code>iterator</code> lang item.\nThe <code>next</code> lang item.\nA representation of all the valid lang items in Rust.\nAll of the lang items, defined or not. Defined lang items …\nThe <code>legacy_receiver</code> lang item.\nThe <code>manually_drop</code> lang item.\nThe <code>maybe_uninit</code> lang item.\nThe <code>meta_sized</code> lang item.\nThe <code>metadata_type</code> lang item.\nA minimum number of generics that is demanded on a lang …\nThe <code>mul</code> lang item.\nThe <code>mul_assign</code> lang item.\nThe <code>neg</code> lang item.\nNo restriction on the generics\nThe <code>not</code> lang item.\nThe <code>Option</code> lang item.\nThe <code>None</code> lang item.\nThe <code>Some</code> lang item.\nThe <code>Ordering</code> lang item.\nThe <code>owned_box</code> lang item.\nThe <code>panic</code> lang item.\nThe <code>panic_const_add_overflow</code> lang item. Constant panic …\nThe <code>panic_const_async_fn_resumed</code> lang item.\nThe <code>panic_const_async_fn_resumed_drop</code> lang item.\nThe <code>panic_const_async_fn_resumed_panic</code> lang item.\nThe <code>panic_const_async_gen_fn_resumed</code> lang item.\nThe <code>panic_const_async_gen_fn_resumed_drop</code> lang item.\nThe <code>panic_const_async_gen_fn_resumed_panic</code> lang item.\nThe <code>panic_bounds_check</code> lang item.\nThe <code>panic_cannot_unwind</code> lang item.\nThe <code>panic_const_coroutine_resumed</code> lang item.\nThe <code>panic_const_coroutine_resumed_drop</code> lang item.\nThe <code>panic_const_coroutine_resumed_panic</code> lang item.\nThe <code>panic_display</code> lang item.\nThe <code>panic_const_div_overflow</code> lang item.\nThe <code>panic_const_div_by_zero</code> lang item.\nThe <code>panic_fmt</code> lang item.\nThe <code>panic_const_gen_fn_none</code> lang item.\nThe <code>panic_const_gen_fn_none_drop</code> lang item.\nThe <code>panic_const_gen_fn_none_panic</code> lang item.\nThe <code>panic_impl</code> lang item.\nThe <code>panic_in_cleanup</code> lang item.\nThe <code>panic_info</code> lang item.\nThe <code>panic_invalid_enum_construction</code> lang item.\nThe <code>panic_location</code> lang item.\nThe <code>panic_misaligned_pointer_dereference</code> lang item.\nThe <code>panic_const_mul_overflow</code> lang item.\nThe <code>panic_const_neg_overflow</code> lang item.\nThe <code>panic_nounwind</code> lang item.\nThe <code>panic_null_pointer_dereference</code> lang item.\nThe <code>panic_const_rem_overflow</code> lang item.\nThe <code>panic_const_rem_by_zero</code> lang item.\nThe <code>panic_const_shl_overflow</code> lang item.\nThe <code>panic_const_shr_overflow</code> lang item.\nThe <code>panic_const_sub_overflow</code> lang item.\nThe <code>eq</code> lang item.\nThe <code>partial_ord</code> lang item.\nThe <code>phantom_data</code> lang item.\nThe <code>pin</code> lang item.\nThe <code>new_unchecked</code> lang item.\nThe <code>pointee_sized</code> lang item.\nThe <code>pointee_trait</code> lang item.\nThe <code>Poll</code> lang item.\nThe <code>Pending</code> lang item.\nThe <code>Ready</code> lang item.\nThe <code>Range</code> lang item.\nThe <code>RangeCopy</code> lang item.\nThe <code>RangeFrom</code> lang item.\nThe <code>RangeFromCopy</code> lang item.\nThe <code>RangeFull</code> lang item.\nThe <code>RangeInclusiveCopy</code> lang item.\nThe <code>range_inclusive_new</code> lang item.\nThe <code>RangeInclusive</code> lang item.\nThe <code>RangeMax</code> lang item.\nThe <code>RangeMin</code> lang item.\nThe <code>RangeSub</code> lang item.\nThe <code>RangeTo</code> lang item.\nThe <code>RangeToInclusive</code> lang item.\nThe <code>reborrow</code> lang item.\nThe <code>receiver</code> lang item.\nThe <code>receiver_target</code> lang item.\nThe <code>rem</code> lang item.\nThe <code>rem_assign</code> lang item.\nThe <code>Err</code> lang item.\nThe <code>Ok</code> lang item.\nThe <code>ResumeTy</code> lang item.\nThe <code>shl</code> lang item.\nThe <code>shl_assign</code> lang item.\nThe <code>shr</code> lang item.\nThe <code>shr_assign</code> lang item.\nThe <code>sized</code> lang item.\nThe <code>slice_len_fn</code> lang item.\nThe <code>start</code> lang item. For all binary crates without …\nThe <code>String</code> lang item.\nThe <code>structural_peq</code> lang item. Trait injected by …\nThe <code>sub</code> lang item.\nThe <code>sub_assign</code> lang item.\nThe <code>sync</code> lang item.\nThe <code>termination</code> lang item.\nThe <code>transmute_opts</code> lang item.\nThe <code>transmute_trait</code> lang item.\nThe <code>Try</code> lang item.\nThe <code>branch</code> lang item.\nThe <code>from_output</code> lang item.\nThe <code>from_residual</code> lang item.\nThe <code>from_yeet</code> lang item.\nThe <code>tuple_trait</code> lang item.\nThe <code>type_id</code> lang item.\nThe <code>unpin</code> lang item.\nThe <code>unsafe_cell</code> lang item.\nThe <code>unsafe_pinned</code> lang item.\nThe <code>unsafe_unpin</code> lang item.\nThe <code>unsize</code> lang item.\nThe <code>unsized_const_param_ty</code> lang item.\nThe <code>use_cloned</code> lang item.\nThe <code>va_list</code> lang item.\nReturns the <code>DefId</code> of the <code>add_assign</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>add</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>alloc_layout</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>async_drop_in_place</code> lang item if …\nReturns the <code>DefId</code> of the <code>async_drop</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>async_fn_kind_helper</code> lang item if …\nReturns the <code>DefId</code> of the <code>async_fn_kind_upvars</code> lang item if …\nReturns the <code>DefId</code> of the <code>async_fn_mut</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>async_fn_once_output</code> lang item if …\nReturns the <code>DefId</code> of the <code>async_fn_once</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>async_fn</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>AsyncGenFinished</code> lang item if it …\nReturns the <code>DefId</code> of the <code>AsyncGenPending</code> lang item if it …\nReturns the <code>DefId</code> of the <code>AsyncGenReady</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>async_iterator_poll_next</code> lang …\nReturns the <code>DefId</code> of the <code>async_iterator</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>begin_panic</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>bikeshed_guaranteed_no_drop</code> lang …\nReturns the <code>DefId</code> of the <code>bitand_assign</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>bitand</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>bitor_assign</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>bitor</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>bitxor_assign</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>bitxor</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>branch</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>CStr</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>c_void</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>call_once_future</code> lang item if it …\nReturns the <code>DefId</code> of the <code>call_ref_future</code> lang item if it …\nReturns the <code>DefId</code> of the <code>Break</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>Continue</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>clone_fn</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>clone</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>coerce_pointee_validated</code> lang …\nReturns the <code>DefId</code> of the <code>coerce_unsized</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>const_panic_fmt</code> lang item if it …\nReturns the <code>DefId</code> of the <code>const_param_ty</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>Context</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>contract_build_check_ensures</code> lang …\nReturns the <code>DefId</code> of the <code>contract_check_ensures</code> lang item …\nReturns the <code>DefId</code> of the <code>contract_check_requires</code> lang item …\nReturns the <code>DefId</code> of the <code>copy</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>coroutine_resume</code> lang item if it …\nReturns the <code>DefId</code> of the <code>coroutine_return</code> lang item if it …\nReturns the <code>DefId</code> of the <code>coroutine_state</code> lang item if it …\nReturns the <code>DefId</code> of the <code>coroutine</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>coroutine_yield</code> lang item if it …\nReturns the <code>DefId</code> of the <code>default_trait1</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>default_trait2</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>default_trait3</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>default_trait4</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>deref_mut</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>deref_pure</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>deref_target</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>deref</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>destruct</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>discriminant_kind</code> lang item if it …\nReturns the <code>DefId</code> of the <code>discriminant_type</code> lang item if it …\nReturns the <code>DefId</code> of the <code>dispatch_from_dyn</code> lang item if it …\nReturns the <code>DefId</code> of the <code>div_assign</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>div</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>drop_in_place</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>drop</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>dyn_metadata</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>eh_catch_typeinfo</code> lang item if it …\nReturns the <code>DefId</code> of the <code>eh_personality</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>eq</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>exchange_malloc</code> lang item if it …\nExtracts the first <code>lang = &quot;$name&quot;</code> out of a list of …\nReturns the <code>DefId</code> of the <code>fn_mut</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>fn_once_output</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>fn_once</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>fn_ptr_addr</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>fn_ptr_trait</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>Fn</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>format_argument</code> lang item if it …\nReturns the <code>DefId</code> of the <code>format_arguments</code> lang item if it …\nReturns the <code>DefId</code> of the <code>format_count</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>format_placeholder</code> lang item if …\nReturns the <code>DefId</code> of the <code>format_unsafe_arg</code> lang item if it …\nReturns the <code>DefId</code> of the <code>freeze</code> lang item if it is defined.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOpposite of <code>LangItem::name</code>\nReturns the <code>DefId</code> of the <code>from_output</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>from_residual</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>from_yeet</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>fused_iterator</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>future_output</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>poll</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>future_trait</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>get_context</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>global_alloc_ty</code> lang item if it …\nReturns the <code>DefId</code> of the <code>index_mut</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>index</code> lang item if it is defined.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>DefId</code> of the <code>into_async_iter_into_iter</code> lang …\nReturns the <code>DefId</code> of the <code>into_future</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>into_iter</code> lang item if it is …\nMappings from lang items to their possibly found <code>DefId</code>s. …\nReturns the <code>DefId</code> of the <code>iterator</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>legacy_receiver</code> lang item if it …\nReturns the <code>DefId</code> of the <code>manually_drop</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>maybe_uninit</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>meta_sized</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>metadata_type</code> lang item if it is …\nLang items that were not found during collection.\nReturns the <code>DefId</code> of the <code>mul_assign</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>mul</code> lang item if it is defined.\nReturns the <code>name</code> symbol in <code>#[lang = &quot;$name&quot;]</code>. For example, …\nReturns the <code>DefId</code> of the <code>neg</code> lang item if it is defined.\nConstruct an empty collection of lang items and no missing …\nReturns the <code>DefId</code> of the <code>new_unchecked</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>next</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>not</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>None</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>Some</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>Option</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>Ordering</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>owned_box</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>panic_bounds_check</code> lang item if …\nReturns the <code>DefId</code> of the <code>panic_cannot_unwind</code> lang item if …\nReturns the <code>DefId</code> of the <code>panic_const_add_overflow</code> lang …\nReturns the <code>DefId</code> of the <code>panic_const_async_fn_resumed</code> lang …\nReturns the <code>DefId</code> of the <code>panic_const_async_fn_resumed_drop</code> …\nReturns the <code>DefId</code> of the <code>panic_const_async_fn_resumed_panic</code>…\nReturns the <code>DefId</code> of the <code>panic_const_async_gen_fn_resumed</code> …\nReturns the <code>DefId</code> of the …\nReturns the <code>DefId</code> of the …\nReturns the <code>DefId</code> of the <code>panic_const_coroutine_resumed</code> …\nReturns the <code>DefId</code> of the <code>panic_const_coroutine_resumed_drop</code>…\nReturns the <code>DefId</code> of the …\nReturns the <code>DefId</code> of the <code>panic_const_div_by_zero</code> lang item …\nReturns the <code>DefId</code> of the <code>panic_const_div_overflow</code> lang …\nReturns the <code>DefId</code> of the <code>panic_const_gen_fn_none</code> lang item …\nReturns the <code>DefId</code> of the <code>panic_const_gen_fn_none_drop</code> lang …\nReturns the <code>DefId</code> of the <code>panic_const_gen_fn_none_panic</code> …\nReturns the <code>DefId</code> of the <code>panic_const_mul_overflow</code> lang …\nReturns the <code>DefId</code> of the <code>panic_const_neg_overflow</code> lang …\nReturns the <code>DefId</code> of the <code>panic_const_rem_by_zero</code> lang item …\nReturns the <code>DefId</code> of the <code>panic_const_rem_overflow</code> lang …\nReturns the <code>DefId</code> of the <code>panic_const_shl_overflow</code> lang …\nReturns the <code>DefId</code> of the <code>panic_const_shr_overflow</code> lang …\nReturns the <code>DefId</code> of the <code>panic_const_sub_overflow</code> lang …\nReturns the <code>DefId</code> of the <code>panic_display</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>panic_fmt</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>panic</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>panic_impl</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>panic_in_cleanup</code> lang item if it …\nReturns the <code>DefId</code> of the <code>panic_info</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>panic_invalid_enum_construction</code> …\nReturns the <code>DefId</code> of the <code>panic_location</code> lang item if it is …\nReturns the <code>DefId</code> of the …\nReturns the <code>DefId</code> of the <code>panic_nounwind</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>panic_null_pointer_dereference</code> …\nReturns the <code>DefId</code> of the <code>partial_ord</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>phantom_data</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>pin</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>pointee_sized</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>pointee_trait</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>Poll</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>Pending</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>Ready</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>RangeCopy</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>RangeFromCopy</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>RangeFrom</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>RangeFull</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>RangeInclusiveCopy</code> lang item if …\nReturns the <code>DefId</code> of the <code>range_inclusive_new</code> lang item if …\nReturns the <code>DefId</code> of the <code>RangeInclusive</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>RangeMax</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>RangeMin</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>Range</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>RangeSub</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>RangeToInclusive</code> lang item if it …\nReturns the <code>DefId</code> of the <code>RangeTo</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>reborrow</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>receiver_target</code> lang item if it …\nReturns the <code>DefId</code> of the <code>receiver</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>rem_assign</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>rem</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>Err</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>Ok</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>ResumeTy</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>shl_assign</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>shl</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>shr_assign</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>shr</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>sized</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>slice_len_fn</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>start</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>String</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>structural_peq</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>sub_assign</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>sub</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>sync</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>termination</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>transmute_opts</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>transmute_trait</code> lang item if it …\nReturns the <code>DefId</code> of the <code>Try</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>tuple_trait</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>type_id</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>unpin</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>unsafe_cell</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>unsafe_pinned</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>unsafe_unpin</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>unsize</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>unsized_const_param_ty</code> lang item …\nReturns the <code>DefId</code> of the <code>use_cloned</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>va_list</code> lang item if it is …\nReturns the name of the <code>LangItem</code> enum variant.\nDuring ast lowering, no lints can be emitted. That is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the <code>#[rustc_const_unstable]</code> and …\nStabilized in the upcoming version, whatever number that …\nRepresents the <code>#[rustc_default_body_unstable]</code> attribute.\nFailed to parse a stabilization version.\nExcludes <code>const_stable_indirect</code>. This is necessary because …\nRepresents the following attributes:\nThe available stability levels.\n<code>#[stable]</code>\nRust release in which a feature is stabilized.\n<code>#[unstable]</code>\nThe version placeholder that recently stabilized features …\nalso stores the original symbol for printing\nThis is true iff the <code>const_stable_indirect</code> attribute is …\nwhether the function has a <code>#[rustc_promotable]</code> attribute\nwhether the function has a <code>#[rustc_promotable]</code> attribute\nThe stability assigned to unmarked items when …\nThis is <code>Some</code> if this item allowed to be referred to on …\nIf part of a feature is stabilized and a new feature is …\nRelevant <code>rust-lang/rust</code> issue.\nReason for the current stability level.\nRust release which stabilized this feature.\nRequirements for a <code>StableHashingContext</code> to be used in this …\nMethod in a <code>impl Type</code> block\nMethod in a <code>trait Trait</code> block\nMethod in a <code>impl Trait for Type</code> block\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether a default is provided for this method")