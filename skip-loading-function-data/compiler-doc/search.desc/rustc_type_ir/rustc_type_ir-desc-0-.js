searchState.loadedDescShard("rustc_type_ir", 0, "Algebraic data types (ADT). For example: structures, …\nA projection, opaque type, free type alias, or inherent …\nSeparate from <code>ClauseKind::Projection</code> which is used for …\nRepresents the unprojected term of a projection goal.\nRepresents the projection of an associated, opaque, or …\nA marker predicate that is always ambiguous. Used for …\nAnalysis includes type inference, checking that items are …\nAn array with the given length. Written as <code>[T; N]</code>.\nE.g., <code>Send</code>.\n<code>Binder</code> is a binder for higher-ranked lifetimes or types. …\nThe primitive boolean type. Written as <code>bool</code>.\nThe behavior during MIR borrowck is identical to …\nBound const variable, used only when preparing a trait …\nBound type variable, used to represent the <code>&#39;a</code> in …\nA “canonicalized” type <code>V</code> is one where all free …\nRust actually has more than one category of type variables;\nInformation about a canonical variable that is included …\nA set of values corresponding to the canonical variables …\nThe primitive character type; holds a Unicode scalar value …\nProve a clause\nA clause is something that can appear in where bounds or …\nThe anonymous type of a closure. Used to represent the …\nA closure can be modeled as a struct that looks like:\nStruct returned by <code>split()</code>.\nRepresents the various closure traits in the language. This\n<code>T1</code> coerced to <code>T2</code>\nEncodes that we have to coerce <em>from</em> the <code>a</code> type to the <code>b</code> …\nWhen checking whether impls overlap, we check whether any …\nImagine you have a function <code>F: FnOnce(&amp;[T]) -&gt; R</code>, plus an …\nSome kind of const inference variable.\n<code>Type: const Trait</code>\nEnsures that a const generic argument to a parameter …\nConstants must be equal. The first component is the const …\nConstant initializer must evaluate successfully.\nRepresents a constant in Rust.\nA <strong><code>const</code></strong> <strong>v</strong>ariable <strong>ID</strong>.\nThe anonymous type of a coroutine. Used to represent the …\nSimilar to <code>ClosureArgs</code>; see the above documentation for …\nThe anonymous type of a closure. Used to represent the …\nSee docs for explanation of how each argument is used.\nA type representing the types stored inside a coroutine. …\nA De Bruijn index is a standard means of representing …\nAn unsized <code>dyn Trait</code> object\nTrait must be dyn-compatible.\nSpecifies how a trait object is represented.\nA trait object. Written as …\nSimilar to <code>Binder</code> except that it tracks early bound …\nA placeholder for a const which could not be computed; …\nA placeholder for a type which could not be computed; this …\nA <code>ProjectionPredicate</code> for an <code>ExistentialTraitRef</code>.\nAn existential reference to a trait, where <code>Self</code> is erased. …\nUnevaluated non-const-item, used by …\nThis trait is implemented for every folding traversal. …\nFloating-point type variable <code>?F</code> (that can only be unified …\nA primitive floating-point type. For example, <code>f64</code>.\nA floating-point type variable (<code>{float}</code>).\nA <strong>float</strong>ing-point (<code>f32</code> or <code>f64</code>) type <strong>v</strong>ariable <strong>ID</strong>.\nThe anonymous type of a function declaration/definition. …\nA pointer to a function. Written as <code>fn() -&gt; i32</code>.\nAn unsized FFI type that is opaque to Rust. Written as …\nA type alias that actually checks its trait bounds. …\nA top level const item not part of a trait or impl.\nA free type alias that actually checks its trait bounds. …\nA fresh const variable. See <code>infer::freshen</code> for more …\nLike <code>FreshTy</code>, but as a replacement for <code>FloatVar</code>.\nLike <code>FreshTy</code>, but as a replacement for <code>IntVar</code>.\nA <code>FreshTy</code> is one that is generated as a replacement for an …\nGeneral type variable <code>?T</code> that can be unified with …\nEnforces the constness of the predicate we’re calling. …\nInfer the value of the const.\nA type variable used during type checking.\nAn inference variable for a const, for use in const …\nA placeholder for a type that hasn’t been inferred yet.\nAn associated type in an inherent <code>impl</code>\nAn associated const in an inherent <code>impl</code>\nAn associated type in an inherent <code>impl</code>\nIntegral type variable <code>?I</code> (that can only be unified with …\nA primitive signed integer type. For example, <code>i32</code>.\nAn integral type variable (<code>{integer}</code>).\nAn <strong>int</strong>egral (<code>u32</code>, <code>i32</code>, <code>usize</code>, etc.) type <strong>v</strong>ariable <strong>ID</strong>.\nThis is the initial value used when doing upvar inference.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\n<code>Type: [const] Trait</code>\nThe movability of a coroutine / closure literal: whether a …\nMust not contain self-references, <code>Unpin</code>.\n<code>impl !Trait for Type</code>\n<code>Type: !Trait</code>\nThe never type <code>!</code>.\nUsed by the new solver to normalize an alias. This always …\nThis should only be used inside of the new solver for …\nAn opaque type (usually from <code>impl Trait</code> in type aliases or …\nAn opaque type (usually from <code>impl Trait</code> in type aliases or …\n<code>A: &#39;region</code>\nA const generic parameter.\nA type parameter; for example, <code>T</code> in <code>fn f&lt;T&gt;(x: T) {}</code>.\nA pattern newtype. Takes any type and restricts its valid …\nA placeholder const - universally quantified higher-ranked …\nA placeholder type, used during higher ranked subtyping to …\nA “placeholder” that represents “any const”.\nA “placeholder” that represents “any region”. …\nA “placeholder” that represents “any type”.\n<code>impl Trait for Type</code>\n<code>Type: Trait</code>\nAfter analysis, mostly during codegen and MIR …\nAny analysis after borrowck for a given body should be …\nPolarity for a trait predicate. May either be negative or …\nE.g., <code>Iterator::Item = T</code>.\n<code>where &lt;T as TraitRef&gt;::Name == X</code>, approximately. See the …\nA projection <code>&lt;Type as Trait&gt;::AssocType</code>. Can get …\nAn unevaluated const coming from an associated const.\nThis kind of predicate has no <em>direct</em> correspondent in the …\nA projection <code>&lt;Type as Trait&gt;::AssocType</code>. Can get …\nA raw pointer. Written as <code>*mut T</code> or <code>*const T</code>\nA higher-ranked region. These represent either late-bound …\nA region parameter; for example <code>&#39;a</code> in …\nErased region, used by trait selection, in MIR and during …\nA region that resulted from some other error. Used …\nLate-bound function parameters are represented using a …\nA placeholder region – the higher-ranked version of …\nStatic data that has an “infinite” lifetime. Top in …\nA region variable. Should not exist outside of type …\nA reference; a pointer with an associated lifetime. …\nRegion variable <code>&#39;?R</code>.\nFolds over the substructure of a type, visiting its …\nRepresentation of regions. Note that the NLL checker uses …\n<code>where &#39;a: &#39;r</code>\nA <strong>region</strong> <strong>v</strong>ariable <strong>ID</strong>.\n<code>#[rustc_reservation_impl] impl Trait for Type</code>\nThe pointee of an array slice. Written as <code>[T]</code>.\nMay contain self-references, <code>!Unpin</code>.\nThe pointee of a string slice. Written as <code>str</code>.\n<code>T1 &lt;: T2</code>\nEncodes that <code>a</code> must be a subtype of <code>b</code>. The <code>a_is_expected</code> …\nE.g., <code>Iterator</code>.\nCorresponds to <code>where Foo: Bar&lt;A, B, C&gt;</code>. <code>Foo</code> here would be …\nA <code>DefId</code> of a trait.\nA complete reference to a trait. These take numerous …\nUsed for types that are <code>Copy</code> and which <strong>do not care arena </strong>…\nA tuple type. For example, <code>(i32, bool)</code>.\nSome kind of type inference variable.\nDefines the kinds of types used by the type system.\nA type variable.\nA <strong>ty</strong>pe <strong>v</strong>ariable <strong>ID</strong>.\nFlags that we track on types. These flags are propagated …\nThis trait is implemented for every type that can be …\nThis trait is implemented for every infallible folding …\n<code>where T: &#39;r</code>\nThis trait is implemented for every type that can be …\nThis trait is implemented for every visiting traversal. …\nThe current typing mode of an inference context. We …\nA primitive unsigned integer type. For example, <code>u32</code>.\nAn unnormalized const item such as an anon const or assoc …\nAn unevaluated (potentially generic) constant used in the …\nAn unevaluated anonymous constants.\n“Universes” are used during type- and trait-checking …\nAn unsafe binder type.\nSupport marking impl as unstable.\nAn <code>Into</code>-like trait that takes <code>TyCtxt</code> to perform …\nA <code>From</code>-like trait that takes <code>TyCtxt</code> to perform …\nUsed to hold computed value.\nInfer the value of the const.\nSimilar to the <code>Try</code> trait, but also implemented for <code>()</code>.\nNo syntax: <code>T</code> well-formed.\nA helper type that you can wrap round your own type in …\nZero value of the index.\nZero value of the index.\nZero value of the index.\nThis field exists to prevent the creation of <code>AliasTerm</code> …\nThis field exists to prevent the creation of <code>AliasTy</code> …\nThis field exists to prevent the creation of …\nThis field exists to prevent the creation of <code>TraitRef</code> …\nAlways <code>RustCall</code>\nThe parameters of the associated or opaque item.\nLifetime and type parameters from the enclosing function, …\nThe parameters of the associated or opaque type.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nAlways false\nReturns <code>true</code> if <code>self</code> can name a name from <code>other</code> – in …\nReturns <code>true</code> if <code>self</code> cannot name some names from <code>other</code> – …\nRepresents the maximum calling capability of the closure.\nRepresents the maximum calling capability of the closure.\nCaptures the closure’s signature. This closure signature …\nProduce a result of type <code>Self::Output</code> from <code>iter</code>. The …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\na function pointer that has the shape …\nStores the index of a binder <em>just outside</em> the stuff we have\nAssert that the args from an <code>ExistentialTraitRef</code> or …\nThe <code>DefId</code> of the <code>TraitItem</code> or <code>ImplItem</code> for the associated …\nThe <code>DefId</code> of the <code>TraitItem</code> or <code>ImplItem</code> for the associated …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns <code>true</code> if a type that impls this closure kind must …\nThis field provides fast access to information that is …\nA folding traversal mechanism for complex data structures …\nCallback invokes for each free region. The <code>DebruijnIndex</code> …\nThe entry point for folding. To fold a value <code>t</code> with a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nTrue if there are any late-bound regions\nTrue if there are any bound variables\nTrue if there are any un-erased free regions.\nReturn <code>true</code> if this type has regions that are not a part …\n“Free” regions in this context means that it has any …\nTrue if there are any late-bound non-region variables\nReturns <code>true</code> if this type has any regions that escape …\nReturns <code>true</code> if <code>self</code> has any late-bound regions that are …\nThis is equivalent to computing the super-predicates of …\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nSet of traits which are used to emulate the inherent impls …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether this value references only ‘global’ …\nReturn <code>true</code> if self is mutable\nReturn <code>true</code> if self is <strong>not</strong> mutable\nReturns <code>true</code> if <code>self</code> is the root universe, otherwise false.\nThe coroutines returned by a coroutine-closure’s …\nReturns <code>&quot;&quot;</code> (empty string) or <code>&quot;mutably &quot;</code> depending on the …\nWhether the new trait solver is enabled. This only exists …\nReturns the “next” universe index in order – this …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nsee <code>Ty::outer_exclusive_binder</code> for details\nThis field provides fast access to information that is …\nThe outlives relation <code>T: &#39;a</code> or <code>&#39;a: &#39;b</code>. This code frequently\nThis is the args of the typeck root.\nThis is the args of the typeck root.\nThis is the args of the typeck root.\nIf polarity is Positive: we are proving that the trait is …\nReturns <code>&quot;&quot;</code> (empty string) or <code>&quot;mut &quot;</code> depending on the …\nReturns <code>&quot;const&quot;</code> or <code>&quot;mut&quot;</code> depending on the mutability.\nReturns <code>&quot;&amp;&quot;</code> or <code>&quot;&amp;mut &quot;</code> depending on the mutability.\nAlways <code>Normal</code> (safe)\nThe search graph is responsible for caching and cycle …\nUpdate this index in place by shifting it “in” through …\nUpdate in place by shifting out from <code>amount</code> binders.\nReturns the resulting index when this value is moved into …\nReturns the resulting index when this value is moved out …\nAdjusts any De Bruijn indices so as to make <code>to_binder</code> the …\nRepresents all of the relevant parts of the coroutine …\nIndicates whether this value still has …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nA convenient alternative to <code>try_super_fold_with</code> for use …\nProvides a default visit for a recursive type of interest. …\nReturns <code>true</code> if this is an <code>unsafe trait</code>.\nThe entry point for folding. To fold a value <code>t</code> with a …\nProvides a default fold for a recursive type of interest. …\nThe upvars captured by the closure. Remains an inference …\nThe upvars captured by the closure. Remains an inference …\nThe upvars captured by the closure. Remains an inference …\nThis field exists to prevent the creation of …\nA visiting traversal mechanism for complex data structures …\nThe entry point for visiting. To visit a value <code>t</code> with a …\nAn iterator over the type substructure. WARNING: this does …\n<code>a.xform(b)</code> combines the variance of a context with the …\n<code>Binder</code> is a binder for higher-ranked lifetimes or types. …\nSimilar to <code>Binder</code> except that it tracks early bound …\nNumber of region binders we have passed through while …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nWraps <code>value</code> in a binder, asserting that <code>value</code> does not …\nReturns the argument unchanged.\nMakes the identity replacement <code>T0 =&gt; T0, ..., TN =&gt; TN</code>. …\nCalls <code>U::from(self)</code>.\nThe <code>DefId</code> of the <code>TraitItem</code> for the associated type.\nSimilar to <code>instantiate_identity</code>, but on an iterator of …\nSimilar to <code>instantiate_identity</code>, but on an iterator of …\nUnwraps and returns the value within, but only if it …\nReturns the inner value, but only if it contains no bound …\nWraps a <code>value</code> in a binder, using the same bound variables …\nIt is sometimes necessary to adjust the De Bruijn indices …\nReturns the value contained inside of this <code>for&lt;&#39;a&gt;</code>. …\nSkips the binder and returns the “bound” value. …\nReturns the <code>DefId</code> of the trait of the associated item …\nObject types don’t have a self type specified. …\nGiven an existential predicate like <code>?Self: PartialEq&lt;u32&gt;</code> …\nA “canonicalized” type <code>V</code> is one where all free …\nRust actually has more than one category of type variables;\nInformation about a canonical variable that is included …\nA set of values corresponding to the canonical variables …\nSome kind of const inference variable.\nFloating-point type variable <code>?F</code> (that can only be unified …\nGeneral type variable <code>?T</code> that can be unified with …\nIntegral type variable <code>?I</code> (that can only be unified with …\nA “placeholder” that represents “any const”.\nA “placeholder” that represents “any region”. …\nA “placeholder” that represents “any type”.\nRegion variable <code>&#39;?R</code>.\nSome kind of type inference variable.\nCreates dummy var values which should not be used in a …\nAllows you to map the <code>value</code> of a canonical while keeping …\nReplaces the universe of this canonical variable with <code>ui</code>.\nBound const variable, used only when preparing a trait …\nRepresents a constant in Rust.\nA <strong><code>const</code></strong> <strong>v</strong>ariable <strong>ID</strong>.\nA placeholder for a const which could not be computed; …\nUnevaluated non-const-item, used by …\nA fresh const variable. See <code>infer::freshen</code> for more …\nInfer the value of the const.\nAn inference variable for a const, for use in const …\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nA const generic parameter.\nA placeholder const - universally quantified higher-ranked …\nAn unnormalized const item such as an anon const or assoc …\nAn unevaluated (potentially generic) constant used in the …\nUsed to hold computed value.\nInfer the value of the const.\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nA hashmap which only starts hashing after ignoring the …\nDefines the type to return when merging of two values …\nType alias for a hash map that uses the Fx hashing …\nType alias for a hash set that uses the Fx hashing …\nA struct which can never be instantiated. Used for the …\nSmall-storage-optimized implementation of a map.\nSmall-storage-optimized implementation of a set.\nThis trait is implemented by any type that can serve as a …\nTrait implemented for <strong>values</strong> associated with a unification …\nReturns the number of elements the map can hold without …\nReturns the number of elements the set can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nClears the set, removing all values.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns <code>true</code> if the set contains a value.\nReturns <code>true</code> if the map contains a value for the specified …\nClears the map, returning all key-value pairs as an …\nClears the set, returning all elements in an iterator.\nGrows the stack on demand to prevent stack overflow. Call …\nGets the given key’s corresponding entry in the map for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nReturns a reference to the value in the set, if any, that …\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\nInserts a key-value pair into the map.\nAdds a value to the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the set contains no elements.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all elements in arbitrary order. The …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nCreates an empty <code>SsoHashMap</code>.\nCreates an empty <code>SsoHashSet</code>.\nYou should return first the key that should be used as …\nRemoves a key from the map, returning the value at the key …\nRemoves a value from the set. Returns whether the value was\nRemoves a key from the map, returning the stored key and …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nShrinks the capacity of the map as much as possible. It …\nShrinks the capacity of the set as much as possible. It …\nRemoves and returns the value in the set, if any, that is …\nGiven two values, produce a new value that combines them. …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.\nCreates an empty <code>SsoHashMap</code> with the specified capacity.\nCreates an empty <code>SsoHashSet</code> with the specified capacity.\nA hashmap which only starts hashing after ignoring the …\nSmall-storage-optimized implementation of a map.\nSmall-storage-optimized implementation of a set.\nGrows the stack on demand to prevent stack overflow. Call …\nDescribes how to elaborate an obligation into a …\n“Elaboration” is the process of identifying all the …\nA filter around an iterator of predicates that makes it …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nStart elaborating <code>Sized</code> - reqd during coherence checking, …\nAdds <code>obligations</code> to the stack.\nFilter to only the supertraits of trait predicates, i.e. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the def-ids of the transitive supertraits of …\nInstantiating a type variable with the given type would …\n<code>#[rustc_force_inline]</code> functions must be inlined and must …\nSafe <code>#[target_feature]</code> functions are not assignable to …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTreat parameters as placeholders in the given environment. …\nGiven generic arguments, could they be unified after …\nTreat parameters as infer vars. This is the correct mode …\nA trait object, all of whose components are markers (e.g., …\nSee <code>simplify_type</code>.\nGeneric parameters are pretty much just bound variables, …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTreat parameters in both the lhs and the rhs as infer vars.\nTreat parameters in the lhs as rigid, and in rhs as infer …\nTreat parameters in both the lhs and the rhs as rigid.\nTries to simplify a type by only returning the outermost …\nDoes this have <code>Alias</code> or <code>ConstKind::Unevaluated</code>?\nDoes this have any binders with bound vars (e.g. that need …\nDoes this have any bound variables? Used to check if a …\nDoes this have any <code>ConstKind::Bound</code> consts?\nDoes this value have <code>InferConst::Fresh</code>?\nDoes this have <code>ConstKind::Infer</code>?\nDoes this have <code>ConstKind::Param</code>?\nDoes this have <code>ConstKind::Placeholder</code>?\nDoes this have <code>ConstKind::Unevaluated</code>?\nIs an error type/lifetime/const reachable?\n<code>true</code> if there are “names” of types and regions and so …\n<code>true</code> if there are “names” of regions and so forth that …\nDoes this have any region that “appears free” in the …\nDoes this have inference variables? Used to determine …\nDoes this have placeholders?\nDoes this have any <code>ReBound</code> regions?\nDoes this have any <code>ReErased</code> regions?\nDoes this have <code>ReVar</code>?\nDoes this have <code>ReEarlyParam</code>?\nDoes this have <code>RePlaceholder</code>?\nDoes this have any <code>Bound</code> types?\nDoes this type have any coroutines in it?\nDoes this have <code>Free</code> aliases?\nDoes this value have …\nDoes this have <code>Infer</code>?\nDoes this have <code>Inherent</code>?\nDoes this have <code>Opaque</code>?\nDoes this have <code>Param</code>?\nDoes this have <code>Placeholder</code>?\nDoes this have <code>Projection</code>?\nDoes this value have parameters/placeholders/inference …\nFlags that we track on types. These flags are propagated …\nindicates that <code>self</code> refers to something at binding level …\nindicates that <code>self</code> refers to something <em>inside</em> binding …\nGet a flags value with all known bits set.\nGet the underlying bits value.\nAdds the flags/depth from a set of types that appear …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nsee <code>Ty::outer_exclusive_binder</code> for details\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThis trait is implemented for every folding traversal. …\nFolds over the substructure of a type, visiting its …\nThis trait is implemented for every type that can be …\nThis trait is implemented for every infallible folding …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nStores the index of a binder <em>just outside</em> the stuff we have\nCallback invokes for each free region. The <code>DebruijnIndex</code> …\nThe entry point for folding. To fold a value <code>t</code> with a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA convenient alternative to <code>try_super_fold_with</code> for use …\nThe entry point for folding. To fold a value <code>t</code> with a …\nProvides a default fold for a recursive type of interest. …\nAnalysis includes type inference, checking that items are …\nThe behavior during MIR borrowck is identical to …\nWhen checking whether impls overlap, we check whether any …\nAfter analysis, mostly during codegen and MIR …\nAny analysis after borrowck for a given body should be …\nThe current typing mode of an inference context. We …\nWhile typechecking a body, we need to be able to define …\nWhether the new trait solver is enabled. This only exists …\nAnalysis outside of a body does not define any opaque …\nCommon capabilities of placeholder kinds\nChecks whether this type is an ADT that has unsafe fields.\nPerforms a instantiation suitable for going from a …\nWhether this ABI is <code>extern &quot;Rust&quot;</code>.\nWhether the number of opaques has changed in a way that …\nReturns the type of the struct tail.\nImagine you have a function <code>F: FnOnce(&amp;[T]) -&gt; R</code>, plus an …\nA <code>DefId</code> of a trait.\nProduce a result of type <code>Self::Output</code> from <code>iter</code>. The …\nAssert that the args from an <code>ExistentialTraitRef</code> or …\nThis is equivalent to computing the super-predicates of …\nReturns <code>true</code> if this is an <code>unsafe trait</code>.\nLang items used by the new trait solver. This can be …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA trait implemented for all <code>X&lt;&#39;a&gt;</code> types that can be safely …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCollect Components for <em>all</em> the args of <code>alias_ty</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPush onto <code>out</code> all the things that must outlive <code>&#39;a</code> for the …\nRepresents the unprojected term of a projection goal.\nE.g., <code>Send</code>.\nEncodes that we have to coerce <em>from</em> the <code>a</code> type to the <code>b</code> …\n<code>Type: const Trait</code>\nA <code>ProjectionPredicate</code> for an <code>ExistentialTraitRef</code>.\nAn existential reference to a trait, where <code>Self</code> is erased. …\nA top level const item not part of a trait or impl.\nA free type alias that actually checks its trait bounds. …\nAn associated const in an inherent <code>impl</code>\nAn associated type in an inherent <code>impl</code>\n<code>Type: [const] Trait</code>\n<code>impl !Trait for Type</code>\n<code>Type: !Trait</code>\nUsed by the new solver to normalize an alias. This always …\nAn opaque type (usually from <code>impl Trait</code> in type aliases or …\n<code>A: &#39;region</code>\n<code>impl Trait for Type</code>\n<code>Type: Trait</code>\nPolarity for a trait predicate. May either be negative or …\nE.g., <code>Iterator::Item = T</code>.\nAn unevaluated const coming from an associated const.\nThis kind of predicate has no <em>direct</em> correspondent in the …\nA projection <code>&lt;Type as Trait&gt;::AssocType</code>. Can get …\n<code>#[rustc_reservation_impl] impl Trait for Type</code>\nEncodes that <code>a</code> must be a subtype of <code>b</code>. The <code>a_is_expected</code> …\nE.g., <code>Iterator</code>.\nA complete reference to a trait. These take numerous …\nAn unevaluated anonymous constants.\nThis field exists to prevent the creation of <code>AliasTerm</code> …\nThis field exists to prevent the creation of …\nThis field exists to prevent the creation of <code>TraitRef</code> …\nThe parameters of the associated or opaque item.\nThe polarity marker in front of the impl trait ref if …\nThe <code>DefId</code> of the <code>TraitItem</code> or <code>ImplItem</code> for the associated …\nFlips polarity by turning <code>Positive</code> into <code>Negative</code> and …\nReturns a <code>TraitRef</code> of the form <code>P0: Foo&lt;P1..Pn&gt;</code> where <code>Pi</code> …\nExtract the own args from this projection. For example, if …\nIf polarity is Positive: we are proving that the trait is …\nTransform the generic parameters to have the given <code>impl</code> …\nExtracts the underlying existential trait reference from …\nExtracts the underlying trait reference from this …\nExtracts the underlying trait reference and own args from …\nThis field exists to prevent the creation of …\nObject types don’t have a self type specified. …\nSeparate from <code>ClauseKind::Projection</code> which is used for …\nA marker predicate that is always ambiguous. Used for …\nProve a clause\nA clause is something that can appear in where bounds or …\n<code>T1</code> coerced to <code>T2</code>\nEnsures that a const generic argument to a parameter …\nConstants must be equal. The first component is the const …\nConstant initializer must evaluate successfully.\nTrait must be dyn-compatible.\nEnforces the constness of the predicate we’re calling. …\nThis should only be used inside of the new solver for …\n<code>where &lt;T as TraitRef&gt;::Name == X</code>, approximately. See the …\n<code>where &#39;a: &#39;r</code>\n<code>T1 &lt;: T2</code>\nCorresponds to <code>where Foo: Bar&lt;A, B, C&gt;</code>. <code>Foo</code> here would be …\n<code>where T: &#39;r</code>\nSupport marking impl as unstable.\nNo syntax: <code>T</code> well-formed.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nA higher-ranked region. These represent either late-bound …\nA region parameter; for example <code>&#39;a</code> in …\nErased region, used by trait selection, in MIR and during …\nA region that resulted from some other error. Used …\nLate-bound function parameters are represented using a …\nA placeholder region – the higher-ranked version of …\nStatic data that has an “infinite” lifetime. Top in …\nA region variable. Should not exist outside of type …\nRepresentation of regions. Note that the NLL checker uses …\nA <strong>region</strong> <strong>v</strong>ariable <strong>ID</strong>.\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nContains the error value\nWe switched our variance because a generic argument occurs …\nNo additional information - this is the default. We will …\nContains the success value\nWhether aliases should be related structurally or not. Used\nExtra information about why we ended up with a particular …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGeneric relation routine suitable for most anything.\nRelate the two args for the given item. The default is to …\nSwitch variance for the purpose of relating <code>a</code> and <code>b</code>.\nRelates <code>a</code> and <code>b</code> structurally, calling the relation for all …\nRelates <code>a</code> and <code>b</code> structurally, calling the relation for all …\nMirrors <code>Variance::xform</code> - used to ‘combine’ the …\nThe index of the generic parameter being used (e.g. <code>0</code> for …\nThe generic type containing the generic parameter that …\nRegister <code>AliasRelate</code> obligation(s) that both types must be …\nRegister obligations that must hold in order for this …\nRegister predicates that must hold in order for this …\nWhether aliases should be related structurally. This is …\nEnforce that <code>a</code> is equal to or a subtype of <code>b</code>.\nThe cache only tracks the <code>ambient_variance</code> as it’s the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA path with at least one coinductive step. Such cycles …\nThe search graph does not simply use <code>Interner</code> directly to …\nAll cycle heads a given goal depends on, ordered by their …\nThe initial value when adding a goal to its own nested …\nWhether to use the provisional cache. Set to <code>false</code> by a …\nThe final result of evaluating a goal.\nA path which is treated as ambiguous. Once a path has this …\nThe kinds of cycles a cycle head was involved in.\nA path consisting of only inductive/unproductive steps. …\nThe nested goals of each stack entry and the path from the …\nIn the initial iteration of a cycle, we do not yet have a …\nTracks how nested goals have been accessed. This is …\nA provisional result of an already computed goals which …\nA path which is not be coinductive right now but we may …\nWhile <code>SearchGraph::update_parent_goal</code> can be mostly shared …\nThis adds the usages which occurred while computing a …\nGet a flags value with all known bits set.\nReturns the remaining depth allowed for nested goals.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nWhether we’re allowed to use a global cache entry which …\nEven if there is a global cache entry for a given goal, we …\nWhen reevaluating a goal with a changed provisional …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether the path from <code>head</code> to the current stack entry is …\nThe number of goals currently in the search graph. This …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nWhether evaluating the goal encountered overflow. This is …\nReturning <code>Some</code> disables the global cache for the current …\nProbably the most involved method of the whole solver.\nWhen we encounter a coinductive cycle, we have to fetch the\nReturns the path kind when merging <code>self</code> with <code>rest</code>.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nAdds the nested goals of a nested goal, given that the …\nThe implementation of this function is kind of ugly. We …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nAll cycle heads this cache entry depends on.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nWhen encountering a cycle, both inductive and coinductive, …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nTry to fetch a previously computed result from the global …\nUsed when fuzzing the global cache. Accesses the global …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe path from the highest cycle head to this goal. This …\nThe provisional cache contains entries for already …\nWhether we’ve reached a fixpoint when evaluating a cycle …\nA necessary optimization to handle complex solver cycles. …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nLazily update the stack entry for the parent goal. This …\nIf the <code>usages</code> are empty, the result of that head does not …\nThe cache entry for a given input.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to fetch a cached result, checking the recursion limit …\nInsert a final result into the global cache.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nThe stack of goals currently being computed.\nStack entries of the evaluation stack. Its fields tend to …\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nThe available depth of a given goal, immutable.\nWe want to be able to ignore head usages if they happen …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nWhether evaluating this goal encountered overflow. Lazily …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nAll cycle heads this goal depends on. Lazily updated and …\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe nested goals of this goal, see the doc comment of the …\nStarts out as <code>None</code> and gets set when rerunning this goal …\nThe maximum depth required while evaluating this goal.\nWhether proving this goal is a coinductive step.\nWhether and how this goal has been used as the root of a …\nIndicates that a <code>impl Drop for Adt</code> is <code>const</code> or not.\nIf the self type is an alias type, e.g. an opaque type or …\nConst conditions that need to hold for <code>[const]</code> alias …\nPredicate required for an alias projection to be …\nWe failed due to ambiguity. This ambiguity can either be a …\nA builtin impl generated by the compiler. When adding a …\nPossible ways the given goal can be proven.\nA candidate that is registered only during coherence to …\nContains the error value\nAdditional constraints returned on success.\nA goal is a statement, i.e. <code>predicate</code>, we want to prove …\nWhy a specific goal has to be proven.\nA user written impl.\nWe’re proving a where-bound of an impl.\nInstantiating a higher-ranked goal and re-proving it.\nWhy we failed to evaluate a goal.\n<code>MetaSized</code> trait\nSome built-in impl we don’t need to differentiate. This …\nPreferred eagerly.\nIn case normalizing aliases in nested goals cycles, …\nA built-in impl for trait objects. The index is only used …\nContains the success value\nWe gave up due to an overflow, most often by hitting the …\nAn assumption from the environment. Stores a <code>ParamEnvSource</code>…\nOpaques that are defined in the inference context before a …\nThe result of evaluating a canonical query.\n<code>Sized</code> trait\nWhich sizedness trait - <code>Sized</code>, <code>MetaSized</code>? <code>PointeeSized</code> is …\nA built-in implementation of <code>Upcast</code> for trait objects to …\nA built-in impl that is considered trivial, without any …\nA nested goal required to prove that types are …\nUse this function to merge the certainty of multiple …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nAdditional constraints returned by this query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nData structure used to inspect trait solver behavior.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>DefId</code> of corresponding language item.\nUpdates the goal to one with a different <code>predicate</code> but the …\nWe added a goal to the <code>EvalCtxt</code> which will get proven the …\nWhen evaluating a goal we also store the original values …\nA call to …\nA call to <code>probe</code> while proving the current goal. This is …\nProbe entered when normalizing the self ty during …\nTry to unify an opaque type with an existing key in the …\nA self-contained computation during trait solving. This …\nWhat kind of probe we’re in. In case the probe …\nUsed to do a probe to find out what projection type(s) …\nA trait goal was satisfied by an impl candidate.\nChecking that a rigid alias is well-formed.\nThe root inference context while proving a goal.\nLooking for param-env candidates that satisfy the trait …\nSome <code>data</code> together with information about how they relate …\nA candidate for proving a trait or alias-relate goal.\nUsed in the probe that wraps normalizing the non-self type …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat happened inside of this probe in chronological order.\nThis is always <code>ProbeKind::Root</code>.\nA helper type that you can wrap round your own type in …\nThis field provides fast access to information that is …\nThis field provides fast access to information that is …\nAlgebraic data types (ADT). For example: structures, …\nA projection, opaque type, free type alias, or inherent …\nRepresents the projection of an associated, opaque, or …\nAn array with the given length. Written as <code>[T; N]</code>.\nThe primitive boolean type. Written as <code>bool</code>.\nBound type variable, used to represent the <code>&#39;a</code> in …\nThe primitive character type; holds a Unicode scalar value …\nThe anonymous type of a closure. Used to represent the …\nThe anonymous type of a coroutine. Used to represent the …\nThe anonymous type of a closure. Used to represent the …\nA type representing the types stored inside a coroutine. …\nAn unsized <code>dyn Trait</code> object\nSpecifies how a trait object is represented.\nA trait object. Written as …\nA placeholder for a type which could not be computed; this …\nA primitive floating-point type. For example, <code>f64</code>.\nA floating-point type variable (<code>{float}</code>).\nA <strong>float</strong>ing-point (<code>f32</code> or <code>f64</code>) type <strong>v</strong>ariable <strong>ID</strong>.\nThe anonymous type of a function declaration/definition. …\nA pointer to a function. Written as <code>fn() -&gt; i32</code>.\nAn unsized FFI type that is opaque to Rust. Written as …\nA type alias that actually checks its trait bounds. …\nLike <code>FreshTy</code>, but as a replacement for <code>FloatVar</code>.\nLike <code>FreshTy</code>, but as a replacement for <code>IntVar</code>.\nA <code>FreshTy</code> is one that is generated as a replacement for an …\nA type variable used during type checking.\nA placeholder for a type that hasn’t been inferred yet.\nAn associated type in an inherent <code>impl</code>\nA primitive signed integer type. For example, <code>i32</code>.\nAn integral type variable (<code>{integer}</code>).\nAn <strong>int</strong>egral (<code>u32</code>, <code>i32</code>, <code>usize</code>, etc.) type <strong>v</strong>ariable <strong>ID</strong>.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nThe never type <code>!</code>.\nAn opaque type (usually from <code>impl Trait</code> in type aliases or …\nA type parameter; for example, <code>T</code> in <code>fn f&lt;T&gt;(x: T) {}</code>.\nA pattern newtype. Takes any type and restricts its valid …\nA placeholder type, used during higher ranked subtyping to …\nA projection <code>&lt;Type as Trait&gt;::AssocType</code>. Can get …\nA raw pointer. Written as <code>*mut T</code> or <code>*const T</code>\nA reference; a pointer with an associated lifetime. …\nThe pointee of an array slice. Written as <code>[T]</code>.\nThe pointee of a string slice. Written as <code>str</code>.\nA tuple type. For example, <code>(i32, bool)</code>.\nDefines the kinds of types used by the type system.\nA type variable.\nA <strong>ty</strong>pe <strong>v</strong>ariable <strong>ID</strong>.\nA primitive unsigned integer type. For example, <code>u32</code>.\nAn unsafe binder type.\nZero value of the index.\nZero value of the index.\nZero value of the index.\nThis field exists to prevent the creation of <code>AliasTy</code> …\nThe parameters of the associated or opaque type.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nThe <code>DefId</code> of the <code>TraitItem</code> or <code>ImplItem</code> for the associated …\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nReturns <code>true</code> when the outermost type cannot be further …\nWhether this alias type is an opaque.\nExtracts the underlying trait reference from this …\nExtracts the underlying trait reference and own args from …\nA closure can be modeled as a struct that looks like:\nStruct returned by <code>split()</code>.\nSimilar to <code>ClosureArgs</code>; see the above documentation for …\nSee docs for explanation of how each argument is used.\nInstantiates a <code>for&lt;&#39;env&gt; ...</code> binder with a specific region.\nUnlike <code>has_escaping_bound_vars</code> or …\nAlways <code>RustCall</code>\nLifetime and type parameters from the enclosing function, …\nAlways false\nRepresents the maximum calling capability of the closure.\nRepresents the maximum calling capability of the closure.\nCaptures the closure’s signature. This closure signature …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\na function pointer that has the shape …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the closure kind for this closure; only usable …\nReturns the closure kind for this closure; may return a …\nThe coroutines returned by a coroutine-closure’s …\nConstruct <code>ClosureArgs</code> from <code>ClosureArgsParts</code>, containing …\nConstruct <code>CoroutineArgs</code> from <code>CoroutineArgsParts</code>, …\nReturns the generic parameters of the closure’s parent.\nReturns the generic parameters of the coroutine’s parent.\nThis is the args of the typeck root.\nThis is the args of the typeck root.\nThis is the args of the typeck root.\nReturns the type representing the resume type of the …\nReturns the type representing the return type of the …\nAlways <code>Normal</code> (safe)\nExtracts the signature from the closure.\nReturns the “coroutine signature”, which consists of …\nReturns the <code>fn</code> pointer type representing the closure …\nRepresents all of the relevant parts of the coroutine …\nDivides the closure args into their respective components. …\nDivides the coroutine args into their respective …\nConstruct a coroutine from the closure signature. Since a …\nGiven known upvars and a <code>ClosureKind</code>, compute the coroutine\nCompute the tupled upvars that a coroutine-closure’s …\nReturns the tuple type representing the upvars for this …\nReturns the tuple type representing the upvars for this …\nThe upvars captured by the closure. Remains an inference …\nThe upvars captured by the closure. Remains an inference …\nThe upvars captured by the closure. Remains an inference …\nReturns an iterator over the list of types of captured …\nReturns an iterator over the list of types of captured …\nReturns the type representing the yield type of the …\nAn <code>Into</code>-like trait that takes <code>TyCtxt</code> to perform …\nA <code>From</code>-like trait that takes <code>TyCtxt</code> to perform …\nAn “escaping var” is a bound var whose binder is not …\nThis trait is implemented for every type that can be …\nThis trait is implemented for every visiting traversal. …\nSimilar to the <code>Try</code> trait, but also implemented for <code>()</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTrue if there are any late-bound regions\nTrue if there are any bound variables\nTrue if there are any un-erased free regions.\nReturn <code>true</code> if this type has regions that are not a part …\n“Free” regions in this context means that it has any …\nTrue if there are any late-bound non-region variables\nReturns <code>true</code> if this type has any regions that escape …\nReturns <code>true</code> if <code>self</code> has any late-bound regions that are …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether this value references only ‘global’ …\nAnything bound by <code>outer_index</code> or “above” is escaping.\nIndicates whether this value still has …\nProvides a default visit for a recursive type of interest. …\nThe entry point for visiting. To visit a value <code>t</code> with a …\nAn iterator for walking the type tree.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWe push <code>GenericArg</code>s on the stack in reverse order so as to …\nSkips the subtree corresponding to the last type returned …")