searchState.loadedDescShard("rustc_mir_transform", 0, "Raw content of Fluent resource for this crate, generated …\nThis pass adds validation calls (AcquireValid, …\nCheck that a body annotated with <code>#[rustc_force_inline]</code> …\nThis module provides a pass that removes parts of MIR that …\nThis is the implementation of the pass which transforms …\nA pass that inserts the <code>ConstEvalCounter</code> instruction into …\nA constant propagation optimization pass based on dataflow …\nThis module implements a dead store elimination (DSE) …\nWe import passes via this macro so that we can have a …\nDeduces supplementary parameter attributes from MIR.\nPropagates assignment destinations backwards in the CFG to …\nThis pass just dumps MIR at a specified point.\nThis pass transforms derefs of Box into a deref of the …\nGlobal value numbering.\nCheck if it’s even possible to satisfy the ‘where’ …\nInlining pass for MIR functions.\nPerforms various peephole optimizations.\nA jump threading optimization.\nA lint that checks for known panics like overflows, …\nThis pass statically detects code which has undefined …\nLowers intrinsic calls\nThis pass lowers calls to core::slice::len to just …\nObtain just the main MIR (no promoteds) and run some …\nCompute the MIR that is used during CTFE (and thus has no …\nFinds the full set of <code>DefId</code>s within the current crate that …\nCompute the main MIR body and the list of MIR bodies of …\nThis pass removes jumps to basic blocks containing only a …\nSee the docs for <code>RenameReturnPlace</code>.\nOptimize the MIR and prepare it for codegen.\nNormalizes MIR in <code>TypingMode::PostAnalysis</code> mode, most …\nThese two passes provide no value to the compiler, so are …\nA pass that promotes borrows of constant rvalues.\nFetch all the promoteds of an item and prepare their MIR …\nThis pass removes <code>PlaceMention</code> statement, which has no …\nThis pass removes storage markers if they won’t be …\nThis pass replaces a drop of a type that does not need …\nRemoves operations on ZST places, and convert ZST operands …\nAfter this series of passes, no lifetime analysis based on …\nReturns the sequence of passes that do the initial cleanup …\nReturns the sequence of passes that lowers analysis to …\nA number of passes which remove various redundancies in …\nWe denote as “SSA” the set of locals that verify the …\nA pass that eliminates branches on uninhabited or …\nA pass that propagates the unreachable terminator of a …\nValidates the MIR to ensure that invariants are upheld.\nA pass that runs which is targeted at ensuring that …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns true if this unwind action is code generated as an …\nCalls <code>U::from(self)</code>.\nThis pass moves values being dropped that are within a …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDetermine whether this type may contain a reference (or …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nInserts the actual alignment check’s logic. Returns a …\nCalls <code>U::from(self)</code>.\nRequires drop elaboration to have been performed.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe type that <code>Drop</code> is implemented for.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>func</code> refers to the function we are …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf we should lint on this usage, return the <code>HirId</code>, source …\nThis pass inserts checks for a valid enum discriminant …\nWe know the enum does no niche optimizations and can thus …\nRepresent the different kind of enum checks we can insert.\nA Visitor that finds the construction of enums and …\nWe know we try to create an uninhabited enum from an …\nWe try to construct an enum that has a niche.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInserts the cast of an operand (any type) to a u128 value …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the found enum creations and which checks should …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhen checking for borrows of field projections (<code>&amp;(*ptr).a</code>…\nDetails of a pointer check, the condition on which we …\nUtility for adding a check for read/write on every sized, …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not we should visit a Place with PlaceContext.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUnify locals that copy each other.\nUtility to help performing substitution of <code>*pattern</code> by …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>SsaLocals</code> computed equivalence classes between locals …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe set of <code>Local</code>s that must be saved across yield points.\nLooks for any assignments between locals (e.g., <code>_4 = _5</code>) …\nAn operation that can be performed on a coroutine.\nA <code>yield</code> point in the coroutine.\nThis pass constructs a second coroutine body sufficient …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nFor every saved local, looks for which locals are …\nDrops and async drops related logic for coroutine …\nWhich block to jump to if the coroutine is dropped in this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReplaces the entry point of <code>body</code> with a block that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over each <code>CoroutineSavedLocal</code> along …\nThe set of saved locals live at each suspension point.\nComputes which locals have to be stored in the …\nTransforms a <code>DenseBitSet&lt;Local&gt;</code> that contains only locals …\nAllocates a new local and replaces all references of <code>local</code> …\nThe block to jump to after resumption.\nWhere to move the resume argument after resumption.\nWhich locals are live across any suspension point.\nParallel vec to the above with SourceInfo for each yield …\nState discriminant used when suspending or resuming at …\nFor every saved local, the set of other saved locals that …\nSet of locals that have live storage while at this …\nFor every suspending block, the locals which are …\nTransforms the <code>body</code> of the coroutine applying the …\nTransforms the <code>body</code> of the coroutine applying the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCleanup all async drops (reset to sync)\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nExpand Drop terminator for async drops into mainline …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVerify that the callee body is compatible with the caller.\nAdd function-level costs not well-represented by the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA terminator that’s more call-like (might do a bunch of …\nInserts <code>StatementKind::Coverage</code> statements that either …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nInject any necessary coverage statements into MIR, so that …\nCalls <code>U::from(self)</code>.\nStruct containing the results of <code>prepare_bcb_counters_data</code>.\nGenerates and stores coverage counter and coverage …\nA control-flow graph can be said to have “balanced …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the physical counter for the given node, creating …\nTable of expression data, associating each expression ID …\nRemember expressions that have already been created (or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nArranges the nodes in <code>balanced_graph</code> into a list, such …\nCreates a counter whose value is <code>lhs - SUM(rhs)</code>.\nCreates a counter that is the sum of the given counters.\nCoverage counters/expressions that are associated with …\nFor each node in a control-flow graph, determines whether …\nList of places where a counter-increment statement should …\nAnalyzes the coverage graph to create intermediate data …\nA view of an underlying graph that has been augmented to …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCreates a balanced view of an underlying graph, by adding …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the number of nodes in this balanced-flow graph, …\nPart of a node’s counter expression, which is a sum of …\nEnd result of allocating physical counters and counter …\nData representing a view of some underlying graph, in …\nEach spantree edge is “claimed” by the (regular) node …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nFor the given node, returns the finished list of terms …\nAn in-progress counter expression for each node. Each …\nAsserts that all nodes have been visited, and returns the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf true, this edge in the spantree has been reversed an …\nUses the graph information in <code>node_flow_data</code>, together …\nThe node whose physical counter is represented by this …\nCreates a “merged” view of an underlying graph.\nWhether to add or subtract the value of the node’s …\nLinks supernodes to each other, gradually forming a …\nSupernode at the other end of this spantree edge. …\nGiven a supernode, finds the supernode that is the “root…\nFor each node, stores the single supernode that all of its …\nMaps each node to the supernode that contains it, …\nMust be called exactly once for each node in the …\nShared path buffer recycled by all calls to …\nRotates edges in the spantree so that <code>this</code> is the root of …\nDuring the <code>InstrumentCoverage</code> MIR pass, a BCB is a node in …\n<code>BasicCoverageBlockData</code> holds the data indexed by a …\nA coverage-specific simplification of the MIR control flow …\nWrapper around a <code>mir::BasicBlocks</code> graph that restricts …\nHolds the coverage-relevant successors of a basic block’…\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nAllows nodes to be compared in some total order such that …\nFor each node, the loop header node of its nearest …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA loop header is a node that dominates one or more of its …\nIf <code>false</code>, this terminator cannot be chained into another …\nReturns true if the terminator itself is assumed to have …\nIf true, this node’s execution count can be assumed to …\n<code>Yield</code> terminators are not chainable, because their sole …\nFor the given node, yields the subset of its predecessor …\nCoverage-relevant successors of the corresponding …\nFunction information extracted from HIR by the coverage …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe span of the function’s signature, if available. Must …\nReturns the argument unchanged.\n“Holes” are regions within the function body (or its …\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nExtracts coverage-relevant spans from MIR, and uses them …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQuery implementation for <code>coverage_attr_on</code>.\nQuery implementation for <code>coverage_ids_info</code>.\nHook implementation for <code>TyCtxt::is_eligible_for_coverage</code>.\nRegisters query/hook implementations related to coverage.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCompares two spans in (lo ascending, hi descending) order.\nDiscard all covspans that overlap a hole.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf <code>self</code> and <code>other</code> can be merged, mutates <code>self.span</code> to also …\nMacros that expand into branches (e.g. <code>assert!</code>, <code>trace!</code>) …\nTakes a list of sorted spans extracted from MIR, and “…\nWhen a span corresponds to a macro invocation that is …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nGenerates an initial set of coverage spans from the …\nIf the MIR <code>Statement</code> has a span contributive to computing …\nIf the MIR <code>Terminator</code> has a span contributive to computing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA span that has been extracted from a MIR …\nA span that has been extracted from MIR and then “…\nWalks through the expansion ancestors of <code>original_span</code> to …\nWalks through the expansion ancestors of <code>original_span</code> to …\nWalks through the expansion ancestors of <code>original_span</code> to …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe caller must have flooded <code>place</code>.\nThe caller must have flooded <code>place</code>.\nStores the assigned values for assignments where the …\nFor a given MIR location, this stores the values of the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe effect of a successful function call return should not …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nPerforms the optimization on the body\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA visitor that determines which arguments have been …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the deduced parameter attributes for a function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEach bit is indexed by argument number, starting at zero …\nReturns a new DeduceReadOnly instance.\nReturns true if values of a given type will never be …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDescribes where a statement/terminator writes to\nThe set of candidates we are considering in this …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\n<code>vec_filter_candidates</code> but for an <code>Entry</code>\nFor all candidates <code>(p, q)</code> or <code>(q, p)</code> removes the candidate …\nFilters the set of candidates to remove those that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSome locals are part of the function’s interface and can …\nIf the pair of places is being considered for merging, …\nCollects the candidates for merging.\nA reverse index of the <code>c</code> set; if the <code>c</code> set contains …\nIf this pair of locals is a candidate pair, completely …\nJust <code>Vec::retain</code>, but the condition is inverted and we add …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis pass optimizes something like\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs the projection needed to access a Box’s …\nConstructs the types used when accessing a Box’s pointer\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the value needs to be dropped depends on its drop …\nThe value is already dead at the drop location, no drop …\nAffect all nested drop flags in addition to the top-level …\nWhich drop flags to affect/check with an operation.\nDescribes how/if a value should be dropped.\nAlready in an unwind path, any panic will cause an abort.\nAn “open” drop is one where only the fields of a value …\nThe type representing paths that can be moved out of.\nOnly affect the top-level drop flag, not that of any …\nThe value is known to always be initialized at the drop …\nUnwind to this block.\nDescribes if unwinding is necessary and where to unwind to …\nReturns the subpath of indexing a fixed-size array <code>path</code>.\nModifies the MIR patch so that the drop flag of <code>path</code> (if …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the subpath of a dereference of <code>path</code> (or <code>None</code> if …\nReturns the subpath of downcasting <code>path</code> to one of its …\nCreates a block that resets the drop flag. If <code>mode</code> is …\nReturns the block to jump to in order to test the drop …\nCreates one-half of the drop ladder for a list of fields, …\nCreates a full drop ladder, consisting of 2 connected …\nCreate a loop that drops an array:\nCreates a trio of drop-loops of <code>place</code>, which drops its …\nReturns how <code>path</code> should be dropped, given <code>mode</code>.\n“Elaborates” a drop of <code>place</code>/<code>path</code> and patches <code>bb</code>’s …\nThis elaborates a single drop instruction, located at <code>bb</code>, …\nReturns the subpath of a field of <code>path</code> (or <code>None</code> if there …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the drop flag of <code>path</code> as a MIR <code>Operand</code> (or <code>None</code> if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the place and move path for each field of <code>variant</code>, …\nThe slow-path - create an “open”, elaborated drop for …\nDrops the T contained in a <code>Box&lt;T&gt;</code> if it has not been moved …\nDuring MIR building, Drop terminators are inserted in …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nRecords unwind edges which are known to be unreachable, …\ncreate a patch that elaborates all drops in the input MIR.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEmits a lint for function reference arguments bound by …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf a type is a reference or raw pointer to the anonymous …\nIf the given predicate is the trait <code>fmt::Pointer</code>, returns …\nEmits a lint for function reference arguments bound by …\nThe address of a place.\nAn aggregate value, either tuple/closure/struct/enum. This …\nEvaluated or unevaluated constant value.\nDiscriminant of the given value.\nLength of an array or slice.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nUsed to represent values we know nothing about. The <code>usize</code> …\nThis is the <em>value</em> obtained by projecting another value.\nA raw pointer aggregate built from a thin pointer and …\nThis corresponds to a <code>[value; count]</code> expression.\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nRecord that <code>local</code> is assigned <code>value</code>. <code>local</code> must be SSA.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCache the deref values.\nValues evaluated as constants if possible.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValue stored in each local.\nCreate a new <code>Value</code> for which we have no information at …\nCreate a new <code>Value::Address</code> distinct from all the others.\nCounter to generate different values.\nLocals that are assigned that value.\nSimplify the projection chain if we know better.\nRepresent the <em>value</em> which would be read from <code>place</code>, and …\nIf <code>index</code> is a <code>Value::Constant</code>, return the <code>Constant</code> to be …\nIf there is a local which is assigned <code>index</code>, and its …\nIf either <code>Self::try_as_constant</code> as <code>Self::try_as_place</code> …\nConstruct a place which holds the same value as <code>index</code> and …\nReturns <code>false</code> if we know for sure that this type has no …\nSome constants do not have a deterministic value. To avoid …\nMetadata component. This is field 1 in MIR.\nThin pointer component. This is field 0 in MIR.\nGive each borrow and pointer a different provenance, so we …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIntegrator.\nIndicates that the caller is #inline and just calls …\nHas the caller body been changed?\nIndicates that the caller body has been modified.\nIndicates that the caller body has been modified.\nReturns inlining decision that is based on the examination …\nReturns an error if inlining is not possible based on …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nIf <code>arg</code> is already a temporary, returns it. Otherwise, …\n<code>DefId</code> of caller.\n<code>DefId</code> of caller.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStack of inlined instances. We only check the <code>DefId</code> and …\nStack of inlined instances. We only check the <code>DefId</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIntroduces a new temporary into the caller body that is …\nCalled when inlining failed or was not performed.\nCalled when inlining succeeds.\nShould inlining happen for a given callee?\nHow many (multi-call) callsites have we inlined for the …\nAttempts to inline a callsite into the caller body. When …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransform boolean comparisons into logical operations.\nTransform <code>Aggregate(RawPtr, [p, ()])</code> ==&gt; <code>Cast(PtrToPtr, p)</code>.\nTransform <code>&amp;(*a)</code> ==&gt; <code>a</code>.\nSimplify <code>[x; 1]</code> to just <code>[x]</code>.\nTransform aggregates like [0, 0, 0, 0, 0] into [0; 5]. GVN …\nRepresent the following statement. If we can prove that …\nApply the opportunities on the graph.\nWe use an arena to avoid cloning the slices when cloning …\nThe list of <code>BasicBlock</code>s from the one that found the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nRecursively walk statements backwards from this bb’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor each bb, give the TOs in which it appears. The pair …\nCompute the set of loop headers in the given body. We …\nExtract the mutated place from a statement.\nCache the number of predecessors for each block, as we …\nIf we expect <code>lhs ?= A</code>, we have an opportunity if we assume …\nRecursion entry point to find threading opportunities.\nThe <code>SwitchInt</code> will be replaced by <code>Goto { target }</code>.\nA visitor that determines locals in a MIR body that can be …\nThe mode that <code>ConstProp</code> is allowed to run in for a given …\nVisits MIR nodes, performs const propagation and runs lint …\nThe <code>Local</code> can be propagated into and reads of this <code>Local</code> …\nThe maximum number of bytes that we’ll allocate space …\nThe <code>Local</code> cannot be part of propagation at all. Any …\nThe <code>Local</code> can only be propagated into and from its own …\nReturns true if <code>local</code> can be propagated\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the value, if any, of evaluating <code>c</code>.\nReturns the value, if any, of evaluating <code>op</code>. Calls upon …\nReturns the value, if any, of evaluating <code>place</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemove <code>local</code> from the pool of <code>Locals</code>. Allows writing to …\nA pass that seeks to optimize unnecessary moves of large …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCache entry of <code>drop</code> at a <code>BasicBlock</code>\nWe know that the <code>drop</code> here has no effect\nWe know that the <code>drop</code> here will invoke a destructor\nWe know nothing yet\nAssign names for anonymous or temporary values for …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nExtract binding names if available for diagnosis\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a moved place at <code>idx</code> is a part of a BID. The use …\nThe core of the lint <code>tail-expr-drop-order</code>\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEnum variant comparison type.\nIdentical statements.\nAssignment statements have the same value.\nCheck if the cast constant using <code>IntToInt</code> is equal to the …\nCheck that the BBs to be simplified satisfies all distinct …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSimplifies a match statement, returning <code>Some</code> if the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis pass looks for MIR that always copies the same local …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMIR that is eligible for the NRVO must fulfill two …\nAn adapter for <code>MirLint</code>s that implements <code>MirPass</code>.\nJust like <code>MirPass</code>, except it cannot mutate <code>Body</code>, and MIR …\nA streamlined trait that you can implement to create a …\nWhether to allow non-required optimizations\nMaps MIR pass names to a snake case form to match …\nReturns <code>true</code> if this pass can be overridden by …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this pass is enabled with the current …\nReturns <code>true</code> if this pass must be run (i.e. it is required …\nThe optional <code>phase_change</code> is applied after executing all …\nRun the sequence of passes without validating the MIR …\nConverts a MIR pass name into a snake case form to match …\nThis struct lets you “patch” a MIR body, i.e. modify …\nLike <code>add_statement</code>, but specialized for assignments.\nQueues the insertion of a statement at a given location. …\nApplies the queued changes.\nUniversal getter for block data, either it is in ‘old’ …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHas a replacement of this block’s terminator been queued …\nReturns the type of a local that’s newly-added in the …\nCreates a new, empty patch.\nQueues the addition of a new basic block.\nQueues the addition of a new temporary with additional …\nQueues the addition of a new temporary.\nQueues the replacement of a block’s terminator.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRearranges the basic blocks into a <em>reverse post-order</em>.\nRearranges the locals into <em>use</em> order.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA “root candidate” for promotion, which will become the\nOne direct assignment and any number of direct uses. A …\nA <code>MirPass</code> for promotion.\nThis temp was part of an rvalue which got extracted during …\nState of a temporary during collection and promotion.\nNo references to this temp.\nAny other combination of assignments/uses.\nChecks whether locals that appear in a promotion context (…\nIf true, add the new const (the promoted) to the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the block is “safe” for promotion, …\nIf true, all nested temps are also kept in the source MIR, …\nCopies the initialization of this temp to the promoted …\nComputes the sets of blocks of this MIR that are …\nFor backwards compatibility, we are promoting function …\nUsed to assemble the required_consts list while building …\nWe know the value to be a pointer to this place. The …\nPropagate references using SSA analysis.\nUtility to help performing substitution of <code>*pattern</code> by …\nNot a pointer, or we can’t know.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nFor each local, save the place corresponding to <code>*local</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCompute the set of locals that can be fully replaced.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe SSA analysis done by <code>SsaLocals</code> treats <code>Operand::Move</code> as …\nA pass that removes noop landing pads and replaces jumps …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRemoves <code>Drop</code> terminators whose target is known to be …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA cheap, approximate check to avoid unnecessary <code>layout_of</code> …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWe get passed a reference or a raw pointer to <code>self</code> and …\nCall a known <code>FnDef</code>.\nPass the receiver as-is.\n<code>fn shim(&amp;self) { inner(*self )}</code>.\nCall the <code>FnPtr</code> that was passed as the receiver.\n<code>fn shim(*mut self) { inner(*self )}</code>.\n<code>fn shim(&amp;mut self) { inner(*self )}</code>.\nWe get passed <code>self: Self</code> and call the target with <code>&amp;mut self</code>…\nGives the index of an upcoming BasicBlock, with an offset. …\nBuilds a “call” shim for <code>instance</code>. The shim calls the …\nBuilds a <code>Clone::clone</code> shim for <code>self_ty</code>. Here, <code>def_id</code> is …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRuns at the beginning of “analysis to runtime” …\nRuns at the end of “analysis to runtime” lowering, …\nKeeps track of used &amp; unused locals.\nCollapse a goto chain starting from <code>start</code>\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if local is used.\nConstruct the mapping while swapping out unused stuff out …\nDetermines which locals are used &amp; unused in the given …\nRemoves unused definitions. Updates the used locals to …\nReturns whether we actually simplified anything. In that …\nUpdates the use counts to reflect the removal of given …\nThis function will return <code>None</code> if\nVisits a left-hand side of an assignment.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPass to convert <code>if</code> conditions on integrals into switches …\nBasic block to apply the optimization\nStatement index of Eq/Ne assignment that can be removed. …\nConstant to use in switch target value\nType of the constant value\nCan remove Eq/Ne assignment\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEither Eq or Ne\nCurrent targets used in the switch\nPlace that needs to be switched on. This place is of type …\nVarious parts of MIR building introduce temporaries that …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is used to check that we are not leaving references …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCompute the replacement of flattened places into locals.\nIdentify all locals that are not eligible for SROA.\nPre-computed list of all “new” locals for each “old…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is only used to compute the type for …\nPerform the replacement computed by <code>compute_flattening</code>.\nWork to do.\nWe visit the body in reverse postorder, to ensure each …\nAssignments to each local. This defines whether the local …\nSet of SSA locals that are immutably borrowed.\nSet of SSA locals that are immutably borrowed.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCompute the equivalence classes for locals, based on copy …\nCopy equivalence classes between locals. See <code>copy_classes</code> …\nNumber of “direct” uses of each local, ie. uses that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a property uniform on a copy equivalence class by …\nReturn the number of uses if a local that are not “Deref…\nSet of “StorageLive” statements for each local.\nConditionally remove some of the VarDebugInfo in MIR.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nIf the basic block terminates by switching on a …\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn whether the current terminator is fully unreachable.\nThis checker covers basic properties of the control-flow …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if src can be assigned into dest. This is not …\nCheck that the given predicate definitely holds in the …\nA faster version of the validation pass that only checks …\nDescribes at which point in the pipeline this validation …")