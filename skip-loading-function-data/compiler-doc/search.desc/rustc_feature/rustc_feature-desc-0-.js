searchState.loadedDescShard("rustc_feature", 0, "Feature gates\nFormerly unstable features that have now been accepted …\nAllow use of unstable features, as on nightly.\nHow to handle multiple duplicate attributes on the same …\nA template that the attribute input must match. Only …\nAttributes that have a special meaning to rustc or rustdoc.\nErrors are bypassed for bootstrapping. This is required …\nBuiltin attribute that is only allowed at the crate level\nDisallow use of unstable features, as on beta/stable …\nDuplicates of this attribute are allowed.\nInformation about an enabled language feature.\nInformation about an enabled library feature.\nDuplicates after the first attribute will be an error.\nDuplicates preceding the last instance of the attribute …\nA set of features to be used by later passes.\nDuplicates after the first attribute will be an …\nDuplicates preceding the last instance of the attribute …\nA gated attribute which requires a feature gate to be …\nSome features are not allowed to be used together at the …\nNormal, builtin attribute that is consumed by the compiler …\nNormal attribute that does not need <code>#[unsafe(...)]</code>\nFormerly unstable features that have now been removed.\nUnstable language features that are being implemented or …\nUngated attribute, can be used on all release channels\nUnsafe attribute that requires safety obligations to be …\nDuplicates after the first attribute will be an …\nSame as <code>WarnFollowing</code>, but only issues warnings for …\nList of the accepted feature gates.\nSpan of the <code>#[feature(...)]</code> attribute.\nBuilt-in attributes and <code>cfg</code> flag gating.\nA link to the document for this attribute.\n<code>enabled_lang_features</code> + <code>enabled_lib_features</code>.\n<code>#![feature]</code> attrs for language features, for error …\n<code>#![feature]</code> attrs for non-language (library) features.\nWhether this builtin attribute is encoded cross crate. …\nWhether this attribute is encode cross crate.\nFind a gated cfg determined by the <code>pred</code>icate which is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis takes into account <code>RUSTC_BOOTSTRAP</code>.\nAvoid unsafe <code>std::env::set_var()</code> by allowing tests to …\nName of the feature gate guarding the language feature.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf <code>Some</code>, the attribute is allowed to take a list of items …\nIf <code>Some</code>, the attribute is allowed to be a name/value pair …\nIf non-empty, the attribute is allowed to take a list …\nList of the removed feature gates.\nFor unstable features: the version the feature was added …\nIf the lang feature is stable, the version number when it …\nA convenience macro for constructing attribute templates. …\nList of the unstable feature gates.\nIf <code>true</code>, the attribute is allowed to be a bare word like …\nCheck function to be called during the <code>PostExpansionVisitor</code>…\nThe feature gate, for example <code>#![feature(rustc_attrs)]</code> for …\nThe error message displayed when an attempt is made to use …\nNotes to be displayed when an attempt is made to use the …\nFormerly unstable features that have now been accepted …\nHow to handle multiple duplicate attributes on the same …\nA template that the attribute input must match. Only …\nAttributes that have a special meaning to rustc or rustdoc.\nBuiltin attribute that is only allowed at the crate level\nDuplicates of this attribute are allowed.\nDuplicates after the first attribute will be an error.\nDuplicates preceding the last instance of the attribute …\nDuplicates after the first attribute will be an …\nDuplicates preceding the last instance of the attribute …\n<code>cfg(...)</code>’s that are feature gated.\nA gated attribute which requires a feature gate to be …\nNormal, builtin attribute that is consumed by the compiler …\nNormal attribute that does not need <code>#[unsafe(...)]</code>\nUngated attribute, can be used on all release channels\nUnsafe attribute that requires safety obligations to be …\nDuplicates after the first attribute will be an …\nSame as <code>WarnFollowing</code>, but only issues warnings for …\nA link to the document for this attribute.\nWhether this builtin attribute is encoded cross crate. …\nWhether this attribute is encode cross crate.\nFind a gated cfg determined by the <code>pred</code>icate which is …\nIf <code>Some</code>, the attribute is allowed to take a list of items …\nIf <code>Some</code>, the attribute is allowed to be a name/value pair …\nIf non-empty, the attribute is allowed to take a list …\nIf <code>true</code>, the attribute is allowed to be a bare word like …\nCheck function to be called during the <code>PostExpansionVisitor</code>…\nThe feature gate, for example <code>#![feature(rustc_attrs)]</code> for …\nThe error message displayed when an attempt is made to use …\nNotes to be displayed when an attempt is made to use the …\nFormerly unstable features that have now been removed.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInformation about an enabled language feature.\nInformation about an enabled library feature.\nA set of features to be used by later passes.\nSome features are not allowed to be used together at the …\nUnstable language features that are being implemented or …\nSpan of the <code>#[feature(...)]</code> attribute.\nIs the given feature enabled (via <code>#[feature(...)]</code>)?\n<code>enabled_lang_features</code> + <code>enabled_lib_features</code>.\nReturns a list of <code>EnabledLangFeature</code> with info about:\n<code>#![feature]</code> attrs for language features, for error …\n<code>#![feature]</code> attrs for non-language (library) features.\nReturns the argument unchanged.\nName of the feature gate guarding the language feature.\nSome features are known to be incomplete and using them is …\nSome features are internal to the compiler and standard …\nCalls <code>U::from(self)</code>.\n<code>since</code> should be set for stable features that are …\nIf the lang feature is stable, the version number when it …")