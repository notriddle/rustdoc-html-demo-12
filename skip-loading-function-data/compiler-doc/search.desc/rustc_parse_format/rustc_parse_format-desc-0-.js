searchState.loadedDescShard("rustc_parse_format", 0, "Macro support for format strings\nThe value will be aligned in the center.\nThe value will be aligned to the left.\nThe value will be aligned to the right.\nThe value will take on a default alignment.\nEnum of alignments which are supported.\nRepresentation of an argument specification.\nThe argument is implied to be located at an index\nThe argument is located at a specific index given in the …\nThe argument has a name.\nA count is used for the precision and width parameters of …\nThe count is implied and cannot be explicitly specified.\nThe count is specified explicitly.\nThe count is specified by the argument with the given name.\nThe count is specified by the argument at the given index.\nThe count is specified by a star (like in <code>{:.*}</code>) that …\nEnum for the debug hex flags.\nA format string for use in diagnostic attributes.\nA normal format string as per <code>format_args!</code>.\nSpecification for the formatting of an argument in the …\nAn inline assembly template string for <code>asm!</code>.\nA literal string which should directly be emitted\nThe <code>x</code> flag in <code>{:x?}</code>.\nThe <code>-</code> flag.\nThis describes that formatting should process the next …\nThe type of format string that we are parsing.\nThe parser structure for interpreting the input format …\nA piece is a portion of the format string which represents …\nThe <code>+</code> flag.\nEnum describing where an argument for a format can be …\nRemove <code>r#</code> from identifier: <code>format!(&quot;{r#foo}&quot;)</code> -&gt; …\nReorder format parameter: <code>format!(&quot;{foo:?#}&quot;)</code> -&gt; …\nEnum for the sign flags.\nThe <code>X</code> flag in <code>{:X?}</code>.\nReplace inline argument with positional argument: …\nOptionally specified alignment.\nThe <code>#</code> flag.\nStart and end byte offset of every successfully parsed …\nParses an <code>Argument</code> structure, or what’s contained within …\nOptionally consumes the specified character. If the …\nOptionally consumes the specified character. If the …\nParses a <code>Count</code> parameter at the current position. This …\nStart position of the current line.\nCurrent position of implicit positional argument pointer\nThe <code>x</code> or <code>X</code> flag. (Only for <code>Debug</code>.)\nAlways returns an empty <code>FormatSpec</code>\nIndex to the end of the literal snippet\nError messages accumulated during parsing\nOptionally specified character to fill alignment with.\nSpan of the optionally specified fill character.\nParses a format specifier at the current position, …\nHow to format the argument\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses an inline assembly template modifier at the current …\nInput to be parsed\nTuples of the span in the code snippet (input as written …\nIndex into input_vec\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this formatting string was written directly in the …\nSpan of the last opening brace seen, used for error …\nStart and end byte offset of every line of the format …\nCalled if a closing brace was not found.\nCreates a new parser for the given unescaped input string …\nPeeks at the current position, without incrementing the …\nPeeks at the current position + 1, without incrementing …\nParses a positional argument for a format. This could …\nWhere to find this argument\nThe span of the position indicator. Includes any …\nThe integer precision to use.\nThe span of the precision formatting flag (for …\nThe <code>+</code> or <code>-</code> flag.\nParses all of a string which is to be considered a “raw …\nThe descriptor string representing the name of the format …\nThe span of the descriptor string (for diagnostics).\nThe string width requested for the resulting format.\nThe span of the width formatting flag (for diagnostics).\nParses a word starting at the current position. A word is …\nConsumes all whitespace characters until the first …\nThe <code>0</code> flag.")