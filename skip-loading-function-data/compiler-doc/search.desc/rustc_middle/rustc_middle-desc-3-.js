searchState.loadedDescShard("rustc_middle", 3, "Returns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nInverse of <code>Ty::to_opt_closure_kind</code>. See docs on that method\nLike <code>Ty::to_opt_closure_kind</code>, but it caps the “maximum”…\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nFor each FRU expression, record the normalized types of …\nCreate a typing environment with no where-clauses in scope …\nReturns the <em>generics</em> of the definition given by <code>DefId</code>.\n[query description - consider adding a doc-comment!] check …\nGets all attributes.\nGets all attributes with the given name.\nGet an attribute from the diagnostic attribute namespace\nReturns the lang items defined in another crate by loading …\nPanics in case the <code>AllocId</code> is dangling. Since that is …\nThe list of backend features computed from CLI flags (…\n[query description - consider adding a doc-comment!] …\nDetermines whether an item is annotated with an attribute.\nDetermines whether an item is annotated with a …\nTrue if there are any late-bound regions\nTrue if there are any bound variables\nTrue if there are any un-erased free regions.\nWas this variant obtained as part of recovering from a …\nReturn <code>true</code> if this type has regions that are not a part …\n[query description - consider adding a doc-comment!] …\n“Free” regions in this context means that it has any …\n[query description - consider adding a doc-comment!] …\nTrue if there are any late-bound non-region variables\n[query description - consider adding a doc-comment!] …\nChecks if <code>ty</code> has a significant drop.\nQuery backing <code>Ty::has_significant_drop_raw</code>.\nQuery backing <code>Ty::is_structural_eq_shallow</code>.\nFast path helper for testing if a type is <code>Sized</code> or …\nChecks whether this type is an ADT that has unsafe fields.\nReturns whether this variant has unsafe fields.\nReturns <code>true</code> if this type has any regions that escape …\nReturns <code>true</code> if <code>self</code> has any late-bound regions that are …\nCaches the index of the highest bound var in clauses in a …\nGives access to the HIR attributes inside the HIR owner <code>key</code>…\nGiven a node ID, gets a list of attributes associated with …\nReturns the <code>ConstContext</code> of the body associated with this …\nGiven a body owner’s id, returns the <code>BodyId</code> associated …\nReturns the <code>HirId</code> that corresponds to the definition of …\nReturns the <code>BodyOwnerKind</code> of this <code>LocalDefId</code>.\nReturns an iterator of the <code>DefId</code>s for all body-owners in …\nRepresents crate as a whole (as distinct from the …\nAll items in the crate.\nReturns the defining scope for an opaque type definition.\nReturns the nearest enclosing scope. A scope is roughly an …\nRetrieves the <code>HirId</code> for <code>id</code>’s enclosing function <em>if</em> the <code>id</code>…\nWhen on an if expression, a match arm tail expression or a …\nRetrieves the <code>OwnerId</code> for <code>id</code>’s parent item, or <code>id</code> itself …\nGet a representation of this <code>id</code> for debugging purposes. …\nWhether the expression pointed at by <code>hir_id</code> belongs to a …\nChecks if the node is left-hand side of an assignment.\nGets the attributes on the crate. This is preferable to …\nGiven a <code>LocalDefId</code>, returns the <code>BodyId</code> associated with it, …\nThe items in a module.\nRetrieves the <code>hir::Node</code> corresponding to <code>id</code>.\nRetrieves the <code>hir::Node</code> corresponding to <code>id</code>.\nReturns the HirId of <code>N</code> in …\nThe <code>HirId::owner</code> all <code>ItemLocalId</code>s in this table are …\nGives access to the HIR node’s parent for the HIR owner …\nReturns an iterator for the nodes in the ancestor tree of …\nReturns an iterator for the nodes in the ancestor tree of …\nReturns an iterator for the nodes in the ancestor tree of …\nGets the span of the definition of the specified HIR node. …\nLike <code>hir_span()</code>, but includes the body of items (instead …\nVisits all item-likes in the crate in some deterministic …\nThis method is the equivalent of …\nWalks the attributes in a crate.\nWalks the contents of the local crate. See also …\nHooks to be able to register functions in other crates …\nHygienically compares a use-site name (<code>use_name</code>) for a …\nComputes the <code>Ident</code> of this variant by looking up the <code>Span</code>\nComputes the <code>Ident</code> of this variant by looking up the <code>Span</code>\nThe <code>DefId</code> of the <code>impl AsyncDrop</code>\nMaps from associated items on a trait to the corresponding …\nIf the given <code>DefId</code> is an associated item of an impl, …\n[query description - consider adding a doc-comment!] …\nGiven an <code>impl_def_id</code>, return true if the self type is …\nThis is equivalent to computing the super-predicates of …\n[query description - consider adding a doc-comment!] …\nGiven an <code>impl_id</code>, return the trait it implements along …\nGiven a crate and a trait, look up all impls of that trait …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nReturns <code>Some</code> if the impls are the same polarity and the …\nThis module contains <code>HashStable</code> implementations for …\nResolutions for import nodes, which have multiple …\nImports all <code>SourceFile</code>s from the given crate into the …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nGets a map with the inferred outlives-predicates of every …\nReturns the <em>inferred outlives-predicates</em> of the item given …\n<code>CaptureKind</code> and expression(s) that resulted in such …\nCalculates the forest of <code>DefId</code>s from which this variant is …\n[query description - consider adding a doc-comment!] …\nDo not call this query directly: invoke …\nThis module contains logic for determining whether a type …\nSet of traits which are used to emulate the inherent impls …\nIf the given <code>DefId</code> is an associated item of an inherent …\nMaps a <code>DefId</code> of a type to a list of its inherent impls. …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the possibly-auto-generated MIR of a …\n[query description - consider adding a doc-comment!] …\nMonomorphizes a type from the AST by first applying the …\nThe “untyped” variant of <code>ConstInt</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the function is an intrinsic\nReturns <code>true</code> if an item with this visibility is accessible …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturn true if the <code>proj_possible_ancestor</code> represents an …\nTests if this is any kind of primitive pointer type …\nChecks whether values of this type <code>T</code> implement the …\nQuery backing <code>Ty::is_async_drop</code>.\nReturns <code>true</code> if this visibility is at least as accessible …\nCheck if the given <code>DefId</code> is <code>#\\[automatically_derived\\]</code>.\nTests whether this is a Box definitely using the global …\nCheck if the given <code>DefId</code> is <code>#\\[automatically_derived\\]</code>, <em>and</em>\nReturns <code>true</code> if <code>def_id</code> refers to a closure, coroutine, or …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nWhether this item is conditionally constant for the …\nChecks whether this is a <code>const fn</code>. Returns <code>false</code> for …\nReturns <code>true</code> if this <code>DefId</code> refers to the implicit …\nTrait selection queries. These are best used by invoking …\n[query description - consider adding a doc-comment!] …\nDetermines whether an item is annotated with <code>#[doc(hidden)]</code>…\nDetermines whether an item is annotated with …\n[query description - consider adding a doc-comment!] …\nReturns <code>true</code> if this def is a function-like thing that is …\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if the field list of this variant is …\nReturns <code>true</code> if this type is a floating point type.\nReturns <code>true</code> if <code>id</code> is a <code>DefId</code> of <code>Fn</code>, <code>FnMut</code> or <code>FnOnce</code> …\nReturns <code>true</code> if this is a foreign item (i.e., linked via …\nChecks whether values of this type <code>T</code> implement the <code>Freeze</code> …\nQuery backing <code>Ty::is_freeze</code>.\nIndicates whether this value references only ‘global’ …\nReturns <code>true</code> if this represents the generic parameters of …\nchecks if bound region is in Impl Item\n[query description - consider adding a doc-comment!] …\nChecks whether a type is visibly uninhabited from a …\nReturns <code>true</code> when the outermost type cannot be further …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nReturns <code>true</code> if the node pointed to by <code>def_id</code> is a mutable …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nSimilar to <code>Ty::is_primitive</code>, but also considers inferred …\nReturns whether or not the crate with CrateNum ‘cnum’ …\nReturns true if the type is uninhabited without regard to …\n[query description - consider adding a doc-comment!] …\nReturns <code>true</code> if calls to the function may be promoted.\nWhether the value is a <code>usize</code> or <code>isize</code> type.\n[query description - consider adding a doc-comment!] …\nReturns <code>true</code> if <code>self</code> is the root universe, otherwise false.\nA scalar type is one that denotes an atomic datum, with no …\nWhether the type is succinctly representable as a type …\nWhether the type is succinctly representable as a type …\nChecks whether values of this type <code>T</code> have a size known at …\nQuery backing <code>Ty::is_sized</code>.\nReturns <code>true</code> if the node pointed to by <code>def_id</code> is a <code>static</code> …\nReturns <code>true</code> if this type is a <code>str</code>.\nReturns <code>true</code> if equality for this type is both reflexive …\nWhether this makes sense to suggest in a diagnostic.\nReturns <code>true</code> if this is a <code>static</code> item with the …\nReturns <code>true</code> if <code>def_id</code> refers to a trait (i.e., …\nReturns <code>true</code> if <code>def_id</code> refers to a trait alias (i.e., …\nFast path helper for testing if a type is <code>Freeze</code>.\nFast path helper for testing if a type is <code>AsyncDrop</code>.\nFast path helper for primitives which are always <code>Copy</code> and …\nFast path helper for testing if a type is <code>Unpin</code>.\nReturns <code>true</code> if <code>def_id</code> refers to a definition that does …\nChecks whether values of this type <code>T</code> implement the <code>Unpin</code> …\nQuery backing <code>Ty::is_unpin</code>.\n[query description - consider adding a doc-comment!] …\nTrait selection queries. These are best used by invoking …\nReturn <code>true</code> if the supplied <code>CrateNum</code> is “user-visible,”…\nCheck if type is an <code>usize</code>.\nCheck if type is an <code>usize</code> or an integral type variable.\nReturns <code>true</code> if this item is visible anywhere in the local …\nReturns the (elaborated) <em>bounds</em> on the associated or …\nLook up the name and span of a definition.\nLook up the name of a definition across crates. This does …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nA jobserver reference used to release then acquire a token …\nReturns the closure kind for this closure; only usable …\nReturns the closure kind for this closure; may return a …\nThe coroutines returned by a coroutine-closure’s …\nResolutions for labels (node IDs of their corresponding …\n[query description - consider adding a doc-comment!] …\nArena-alloc of LayoutError for coroutine layout\nComputes the layout of a type. Note that this implicitly …\n[query description - consider adding a doc-comment!] …\nFor each fn, records the “liberated” types of its …\nList functions and methods for which lifetime elision was …\nCommon lifetimes, pre-interned for your convenience.\nResolutions for lifetimes.\n[query description - consider adding a doc-comment!] …\nLints that were emitted by the resolver and early lints.\n[query description - consider adding a doc-comment!] …\nFetch and return the user-visible lint level for the given …\nPerforms lint checking for the module.\n[query description - consider adding a doc-comment!] …\nReturns a list of types which (a) have a potentially …\n[query description - consider adding a doc-comment!] …\nReturn the live symbols in the crate for dead code check.\nReturns HIR ID for the given <code>LocalDefId</code>.\nReturn all <code>impl</code> blocks of the given trait in the current …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nBorrow-checks the given typeck root, e.g. functions, …\nBuild the MIR for a given <code>DefId</code> and prepare it for const …\nReturn the set of (transitive) callees that may result in …\nMaps DefId’s that have an associated <code>mir::Body</code> to the …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nObtain all the calls into other local functions\nSet of all the <code>DefId</code>s in this crate that have MIR …\n[query description - consider adding a doc-comment!] …\nGenerates a MIR body for the shim.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nWhether the intrinsic has no meaningful body and all …\nRepresents if <code>place</code> can be mutated or not.\nVariant or struct name.\n<code>&amp;str</code> gives a consistent ordering, which ensures …\n[query description - consider adding a doc-comment!] …\nLook up all native libraries this crate depends on. These …\nGet the corresponding native library from the …\nIf <code>ty.needs_async_drop(...)</code> returns <code>true</code>, then <code>ty</code> is …\nQuery backing <code>Ty::needs_async_drop</code>.\nIf <code>ty.needs_drop(...)</code> returns <code>true</code>, then <code>ty</code> is definitely …\nQuery backing <code>Ty::needs_drop</code>.\nReturns <code>true</code> if the item pointed to by <code>def_id</code> is a thread …\n[query description - consider adding a doc-comment!] …\nConstruct <code>ClosureArgs</code> from <code>ClosureArgsParts</code>, containing …\nConstruct <code>CoroutineArgs</code> from <code>CoroutineArgsParts</code>, …\nAvoid using this in favour of more specific <code>new_*</code> methods, …\nConstruct a trait environment with the given set of …\nCreates a new <code>VariantDef</code>.\nConstructs a <code>TyKind::Error</code> type with current …\nConstructs a <code>TyKind::Error</code> type and registers a …\nConstructs a <code>TyKind::Error</code> type and registers a …\nCaches the results of goal evaluation in the new solver.\nCreates a <code>&amp;mut Context&lt;&#39;_&gt;</code> <code>Ty</code> with erased lifetimes.\nWhether the new trait solver is enabled. This only exists …\nReturns the “next” universe index in order – this …\nStores the type parameters which were instantiated to …\nStores the types for various nodes in the AST. Note that …\n<code>trait_def_id</code> MUST BE the <code>DefId</code> of a trait.\nCreate a typing environment for use during analysis …\nDo not call this query directly: Invoke <code>normalize</code> instead.\nDo not call this query directly: Invoke <code>normalize</code> instead.\nDo not call this query directly: Invoke <code>normalize</code> instead.\nIf you have a <code>Binder&lt;&#39;tcx, T&gt;</code>, you can do this to strip …\nMethods for normalizing when you don’t care about …\nErase the regions in <code>value</code> and then fully normalize all the\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nGets the number of definitions in a foreign crate.\nReturns the maximum value for the given numeric type …\nReturns the minimum and maximum values for the given …\nReturns the minimum value for the given numeric type …\nReturns the <em>default lifetime</em> to be used if a trait object …\nContainer types and field indices of <code>offset_of!</code> expressions\nFor an opaque type, return the list of (captured lifetime, …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nGives access to lints emitted during ast lowering.\nGives access to the HIR nodes and bodies inside <code>key</code> if it…\nLook up the name and span of a definition.\nLook up the name of a definition across crates. This does …\nIf the <code>def_id</code> is an associated type that was desugared …\nMIR after our optimization passes have run. This is MIR …\nReturns layout of a non-async-drop coroutine. Layout might …\nChecks whether all impls in the crate pass the overlap …\nsee <code>Ty::outer_exclusive_binder</code> for details\nThis field provides fast access to information that is …\nThe outlives relation <code>T: &#39;a</code> or <code>&#39;a: &#39;b</code>. This code frequently\nReturn the filenames where output artefacts shall be …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nReverse map to the <code>index</code> field of each <code>GenericParamDef</code>.\nGets the ParameterEnvironment for a given item; this …\nSet of param indexes for type params that are in the type…\nReturns the generic parameters of the closure’s parent.\nReturns the generic parameters of the coroutine’s parent.\nThis is the args of the typeck root.\nThis is the args of the typeck root.\nThis is the args of the typeck root.\nReturns <code>HirId</code> of the parent HIR node of node with this …\nReturns parent HIR node of node with this <code>hir_id</code>. Returns …\nResolutions for nodes that have a single resolution.\nStores the types which were implicitly dereferenced in …\nStores the actual binding mode for all instances of …\nExpr Id pointing to use that resulted the corresponding …\nPeel off all [free alias types] in this type until there …\nPeel off all reference types in this type until there are …\nThe <code>Place</code> that is captured.\nGiven a pointer or reference type, returns the type of the …\nIf polarity is Positive: we are proving that the trait is …\n[query description - consider adding a doc-comment!] …\nGoals proven during HIR typeck which may be potentially …\nFor each struct with outlive bounds, maps to a vector of …\nReturns the (elaborated) <em>predicates</em> of the definition …\nThis is the types of the fields of a coroutine which are …\nThis is the types of the fields of a coroutine which are …\nLabeled spans for <code>&amp;</code>s, <code>&amp;mut</code>s, and binding modifiers …\nReturns the <code>Size</code> for primitive types (bool, uint, int, …\nIf <code>self</code> is a primitive, return its <code>Symbol</code>.\nFinds the <code>rustc_proc_macro_decls</code> item of a crate.\nA list of proc macro LocalDefIds, written out in the order …\nThe <code>DefId</code> is the <code>DefId</code> of the containing MIR body. …\nReturns the type of metadata for (potentially wide) …\nReturns the type of metadata for (potentially wide) …\n<code>pure_wrt_drop</code>, set by the (unsafe) <code>#[may_dangle]</code> attribute …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nThe parameter is marked immutable in the function and …\nGet the mutability of the reference or <code>None</code> when not a …\nthe <code>DefId</code> of the free region.\nPer-body <code>region::ScopeTree</code>. The <code>DefId</code> should be the owner …\nCollects the list of all tools registered using …\nTreat parameters in both the lhs and the rhs as infer vars.\nTreat parameters in the lhs as rigid, and in rhs as infer …\nTreat parameters in both the lhs and the rhs as rigid.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGets the rendered value of the specified constant or …\nGets the rendered precise capturing args for an opaque for …\nRepr options provided by the user.\nChecks whether a type is representable or infinitely sized\nAn implementation detail for the <code>representability</code> query\nReturns <code>DefId</code> of corresponding language item.\nReturns the <code>DefId</code> for a given <code>LangItem</code>. If not found, …\n[query description - consider adding a doc-comment!] …\nObtains a new allocation ID that can be referenced but …\nReserves a new ID <em>if</em> this allocation has not been …\nGenerates an <code>AllocId</code> for a function. Will get deduplicated.\nInterns the <code>Allocation</code> and return a new <code>AllocId</code>, even if …\nGenerates an <code>AllocId</code> for a memory allocation. If the exact …\nGenerates an <code>AllocId</code> for a static or return a cached one …\nGenerates an AllocId for a core::any::TypeId. Will get …\nGenerates an <code>AllocId</code> for a (symbolic, not-reified) vtable. …\n[query description - consider adding a doc-comment!] …\nDoes lifetime resolution on items. Importantly, we can’t …\nAttempt to resolve the given <code>DefId</code> to an <code>Instance</code>, for the …\n[query description - consider adding a doc-comment!] …\nReturns the type representing the resume type of the …\nReturns the type representing the return type of the …\n[query description - consider adding a doc-comment!] …\nTop-level patterns incompatible with Rust 2024’s match …\nReturns the Rust target features for the current target. …\nTracks the rvalue scoping rules which defines finer …\nAlways <code>Normal</code> (safe)\nSaves and writes the DepGraph to the file system.\n<code>LocalDefId</code> of the scope.\nThe search graph is responsible for caching and cycle …\nCaches the results of trait selection. This cache is used …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nFreezes an <code>AllocId</code> created with <code>reserve</code> by pointing it at …\nFreezes an <code>AllocId</code> created with <code>reserve</code> by pointing it at …\n[query description - consider adding a doc-comment!] …\nUpdate this index in place by shifting it “in” through …\nUpdate in place by shifting out from <code>amount</code> binders.\nReturns the resulting index when this value is moved into …\nReturns the resulting index when this value is moved out …\nAdjusts any De Bruijn indices so as to make <code>to_binder</code> the …\nWhen calling this after a <code>Diag</code> is constructed, the …\nWhen calling this after a <code>Diag</code> is constructed, the …\nReturns <code>true</code> if we should codegen an instance in the local …\n[query description - consider adding a doc-comment!] …\nExtracts the signature from the closure.\nReturns the “coroutine signature”, which consists of …\nReturns the <code>fn</code> pointer type representing the closure …\nRepresents all of the relevant parts of the coroutine …\nWhether the value is of a signed integer type.\nReturns the one field in this variant.\n[query description - consider adding a doc-comment!] …\nBuilds the set of functions that should be skipped for the …\nSet of reference patterns that match against a …\nReturn the span for a definition.\nThe span of this particular definition of the opaque type. …\nLooks up the span of <code>impl_did</code> if the impl is local; …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nMapping from feature name to feature name based on the …\nCompares via an ordering that will not change if modules …\nCompares via an ordering that will not change if modules …\nThe <code>stable_crate_id</code> is constructed out of the crate name …\n[query description - consider adding a doc-comment!] …\nThis returns the types of the MIR locals which had to be …\nThis returns the types of the MIR locals which had to be …\nGet the type of the pointer to the static that we use in …\nIndicates whether this value still has …\nGet all item paths that were stripped by a <code>#[cfg]</code> in a …\nSame as applying <code>struct_tail</code> on <code>source</code> and <code>target</code>, but only\nSame as applying <code>struct_tail</code> on <code>source</code> and <code>target</code>, but only\nReturns the deeply last field of nested structures, or the …\nReturns the deeply last field of nested structures, or the …\nThis module contains implementations of the <code>Lift</code>, …\nThis module contains <code>TyKind</code> and its major components.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nSuggest restricting a type param with a new bound.\nSuggest restricting a type param with a new bound.\nIf <code>true</code>, we can give a simpler suggestion solely by …\nA convenient alternative to <code>try_super_fold_with</code> for use …\nProvides a default visit for a recursive type of interest. …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nThe <code>symbol_name</code> query provides the symbol name for calling …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nComputes the tag (if any) for a given type and variant.\nReturns the last field in this variant.\nReturns the last field in this variant, if present.\nThe error guarantees from parser, if any.\nIf any errors occurred while type-checking this body, this …\nTry to build an abstract representation of the given …\nFetch the THIR for a given body. The THIR body gets stolen …\nReturns the type a reference to the thread local takes in …\nConstruct a coroutine from the closure signature. Since a …\nGiven known upvars and a <code>ClosureKind</code>, compute the coroutine\nWhen we create a closure, we record its kind (i.e., what …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n[query description - consider adding a doc-comment!] …\nReturns the explicitly user-written <em>predicates and bounds</em> …\nGiven the <code>DefId</code> of an impl, returns the <code>DefId</code> of the trait …\nIf the given <code>DefId</code> is an associated item of a trait impl, …\n[query description - consider adding a doc-comment!] …\nGiven a trait <code>trait_id</code>, return all known <code>impl</code> blocks.\nReturns <code>true</code> if this is a trait alias.\nReturns <code>true</code> if this is an <code>auto trait</code>.\nReturns <code>true</code> if this is coinductive, either because it is …\nReturns <code>true</code> if this is an <code>unsafe trait</code>.\nIf this is an item in an impl of a trait then this is the …\nIf the given <code>DefId</code> is an associated item of a trait, …\nA list of all traits in a crate, used by rustdoc and error …\nStores the types involved in calls to <code>transmute</code> intrinsic. …\nThis exists purely for testing the interactions between …\nCollects the “trimmed”, shortest accessible paths to …\nTries to destructure an <code>mir::Const</code> ADT or array into its …\nExpands the given impl trait type, stopping if the type is …\nThe entry point for folding. To fold a value <code>t</code> with a …\nReturns <code>None</code> in case the <code>AllocId</code> is dangling. An …\nMonomorphizes a type from the AST by first applying the …\nTries to erase the regions in <code>value</code> and then fully …\nDo not call this query directly: invoke …\nProvides a default fold for a recursive type of interest. …\nIterates over tuple fields. Panics when called on anything …\nCompute the tupled upvars that a coroutine-closure’s …\nReturns the tuple type representing the upvars for this …\nReturns the tuple type representing the upvars for this …\nThe upvars captured by the closure. Remains an inference …\nThe upvars captured by the closure. Remains an inference …\nThe upvars captured by the closure. Remains an inference …\nReturns the type of this field. The resulting type is not …\nThe type variable that represents the value of the opaque …\nCompute the information for the pointer stored at the …\nGets the span for the type of the definition. Panics if it …\nReturns whether the type alias given by <code>DefId</code> is lazy.\nResolved definitions for <code>&lt;T&gt;::X</code> associated paths and …\nReturns true if a type has metadata.\nCreates a hash of the type <code>Ty</code> which will be the same no …\nChecks whether <code>ty: Copy</code> holds while ignoring region …\nChecks whether <code>ty: UseCloned</code> holds while ignoring region …\nReturns the <em>type</em> of the definition given by <code>DefId</code>.\nReturns the <em>hidden type</em> of the opaque type given by <code>DefId</code> …\n[query description - consider adding a doc-comment!] …\nDo not call this query directly: part of the <code>Eq</code> type-op\nDo not call this query directly: part of the <code>Normalize</code> …\nDo not call this query directly: part of the <code>Normalize</code> …\nDo not call this query directly: part of the <code>Normalize</code> …\nDo not call this query directly: part of the <code>Normalize</code> …\nDo not call this query directly: part of the <code>ProvePredicate</code>…\nTo avoid cycles within the predicates of a single item we …\n[query description - consider adding a doc-comment!] …\nGiven the <code>DefId</code>, returns the <code>DefId</code> of the innermost item …\nCommon types, pre-interned for your convenience.\nLike <code>param_env</code>, but returns the <code>ParamEnv</code> after all opaque …\nAllows you to map the <code>value</code> of a canonical while keeping …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n[query description - consider adding a doc-comment!] …\nReturns the upstream crate that exports async-drop-glue for\nReturns the upstream crate that exports drop-glue for the …\nThe entire set of monomorphizations the local crate can …\nReturns the set of upstream monomorphizations available …\nReturns an iterator over the list of types of captured …\nReturns an iterator over the list of types of captured …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nSet of trait imports actually used in the method …\nStores the canonicalized types provided by the user. See …\nThis will either store the canonicalized types provided by …\nThe self type, in the case of a <code>&lt;T&gt;::Item</code> path (when …\nChecks whether each generic argument is simply a unique …\nMiscellaneous type-system utilities that are too small to …\nEnsure the given scalar is valid for the given type. This …\nConverts a type-level constant value into a MIR constant …\nThis stores a pointer to a <code>GlobalCtxt</code>. This is set to <code>Some</code> …\nFor this one we always use value namespace.\nName and span where the binding happens.\nFor each item with generics, maps to a vector of the …\nReturns the (inferred) variances of the item given by <code>DefId</code>…\nCalls <code>f</code> with a reference to the name of the enumerator for …\nCalls <code>f</code> with a reference to the name of the enumerator for …\nThe valid variant indices of this coroutine.\nThe valid variant indices of this coroutine.\nIf the type contains variants, returns the valid range of …\nVariants of the ADT. If this is a struct or union, then …\nComputes the visibility of the provided <code>def_id</code>.\nThe visible parent map is a map from every item to a …\nThe entry point for visiting. To visit a value <code>t</code> with a …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nAn iterator over the type substructure. WARNING: this does …\nIterator that walks <code>self</code> and any types reachable from <code>self</code>…\nIterator that walks <code>self</code> and any types reachable from <code>self</code>…\n[query description - consider adding a doc-comment!] …\nModify the <code>typing_mode</code> to <code>PostAnalysis</code> and eagerly reveal …\nReplaces the universe of this canonical variable with <code>ui</code>.\nMirrors <code>Variance::xform</code> - used to ‘combine’ the …\n<code>a.xform(b)</code> combines the variance of a context with the …\nReturns the type representing the yield type of the …\nWhether or not the impl is permitted due to the trait …\nThe index of the generic parameter being used (e.g. <code>0</code> for …\nThe generic type containing the generic parameter that …\nthir::ExprKind::As\nContains the error value\nContains the success value\nthir::ExprKind::Use\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents coercing a value to a different type of value.\nAt least for initial deployment, we want to limit …\nGo from <code>*const [T; N]</code> to <code>*const T</code>\nTake the address and produce either a <code>&amp;</code> or <code>*</code> pointer.\nAn implicit dereference before matching, such as when …\nGo from a non-capturing closure to an fn pointer or an …\nInformation for <code>CoerceUnsized</code> impls, storing information we\nDereference once, producing a place.\nGo from a mut raw pointer to a const raw pointer.\nGo from ! to any type.\nAn overloaded autoderef step, representing a …\nAn implicit call to <code>Deref(Mut)::deref(_mut)</code> before …\nRepresents implicit coercions of patterns’ types, rather …\nRepresents an implicit coercion applied to the scrutinee …\nConverts from T to *T.\nTake a pinned reference and reborrow as a <code>Pin&lt;&amp;mut T&gt;</code> or …\nConverts from T to &amp;T.\nGo from a fn-item type to a fn-pointer type.\nRecords the index of the field being coerced.\nGo from a safe fn pointer to an unsafe fn pointer.\nUnsize a pointer/reference value, e.g., <code>&amp;[T; n]</code> to <code>&amp;[T]</code>. …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nIf this is a “custom coerce” impl, then what kind of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the <code>DefId</code> of the method call for the given <code>Deref</code>/…\nCreates an <code>AutoBorrowMutability</code> from a mutability and …\nThe type of the scrutinee before the adjustment is …\nThe <code>Span</code> associated with the field access or method call …\nThe definition of a user-defined type, e.g., a <code>struct</code>, <code>enum</code>…\nIndicates whether the ADT is a struct and has a …\nIndicates whether the type is <code>Box</code>.\nIndicates whether the ADT is an enum.\nIndicates whether the type has a <code>#[fundamental]</code> attribute.\nIndicates whether the type is <code>ManuallyDrop</code>.\nIndicates whether the type is <code>PhantomData</code>.\nIndicates whether the ADT is a struct.\nIndicates whether the ADT is a union.\nIndicates whether the type is <code>UnsafeCell</code>.\nIndicates whether the type is <code>UnsafePinned</code>.\nIndicates whether the variant list of this ADT is …\nReturns the kind of the ADT.\nGet a flags value with all known bits set.\nReturns an iterator over all fields contained by this ADT …\nGet the underlying bits value.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturns a description of this abstract data type.\nThe <code>DefId</code> of the struct, enum or union item.\nThe intersection of a source flags value with the …\nYields a <code>DefId</code> for the discriminant and an offset to add …\nComputes the discriminant value used by a specific variant.\nGet a flags value with all bits unset.\nFlags of the ADT (e.g., is this a struct? is this …\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nGet a flags value with the bits of a flag with the given …\nIf this function returns <code>true</code>, it implies that <code>is_struct</code> …\nReturns <code>true</code> if this type has a destructor.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if this is <code>Box&lt;T&gt;</code>.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if this is an enum.\nReturns <code>true</code> if this type is <code>#[fundamental]</code> for the …\nReturns <code>true</code> if this is <code>ManuallyDrop&lt;T&gt;</code>.\nWhether the ADT lacks fields. Note that this includes …\nReturns <code>true</code> if this is <code>PhantomData&lt;T&gt;</code>.\nReturns <code>true</code> if this is a struct.\nReturns <code>true</code> if this is a union.\nReturns <code>true</code> if this is <code>UnsafeCell&lt;T&gt;</code>.\nReturns <code>true</code> if this is <code>UnsafePinned&lt;T&gt;</code>.\nReturns <code>true</code> if the variant list of this ADT is …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nCreates a new <code>AdtDefData</code>.\nAsserts this is a struct or union and returns its unique …\nThe intersection of a source flags value with the …\nRepr options provided by the user.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nIf this ADT is a struct, returns a type such that …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns a description of a variant of this abstract data …\nReturn the index of <code>VariantDef</code> given a constructor id.\nReturn the index of <code>VariantDef</code> given a variant id.\nReturns <code>true</code> if the variant list of this ADT is …\nReturn a <code>VariantDef</code> given a constructor id.\nReturn a <code>VariantDef</code> given a variant id.\nVariants of the ADT. If this is a struct or union, then …\nInformation about an associated item\nA list of <code>ty::AssocItem</code>s in definition order that allows …\nThe associated type comes from an RPITIT. It has no name, …\nGets the defaultness of the associated item. To get the …\nReturns an iterator over all associated items with the …\nReturns the associated item with the given identifier and …\nReturns the associated item with the given identifier and …\nReturns the associated item with the given identifier in …\nReturns an iterator over associated items in the order …\nReturns true if:\nConstructs an <code>AssociatedItems</code> map from a series of …\nIf this is an item in an impl of a trait then this is the …\nCast Kind. See RFC 401 (or …\nFloating-point types.\nFunction pointers.\nVarious types that are represented as ints and handled …\nTypes that are represented as ints.\nRaw pointers.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>Some</code> for integral/pointer casts. Casts like …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>mir::CastKind</code> from the given parameters.\nUpvar is captured by reference.\nUpvar is captured by use. This is true when the closure is …\nUpvar is captured by value. This is always true when the …\nCaptures are represented using fields inside a structure. …\nPart of <code>MinCaptureInformationMap</code>; describes the capture …\nA composite describing a <code>Place</code> that is captured by a …\nData must be immutable and is aliasable.\nGiven the closure DefId this map provides a map of root …\nPart of <code>MinCaptureInformationMap</code>; List of <code>CapturePlace</code>s.\nData is mutable and not aliasable.\nPart of <code>MinCaptureInformationMap</code>; Maps a root variable to …\nData must be immutable but not aliasable. This kind of …\nInformation describing the capture of an upvar. This is …\nUpvars do not get their own <code>NodeId</code>. Instead, we use the …\nCapture mode that was selected\nExpr Id pointing to use that resulted in selecting the …\nReturn span pointing to use that resulted in selecting the …\nReturns the <code>LocalDefId</code> of the closure that captured this …\nReturn span pointing to use that resulted in selecting the …\nReturns the hir-id of the root variable for the captured …\n<code>CaptureKind</code> and expression(s) that resulted in such …\nReturn true if the <code>proj_possible_ancestor</code> represents an …\nRepresents if <code>place</code> can be mutated or not.\nExpr Id pointing to use that resulted the corresponding …\nThe <code>Place</code> that is captured.\nReturns a mutability <code>m</code> such that an <code>&amp;m T</code> pointer could be …\nReturns a symbol of the captured upvar, which looks like …\nName and span where the binding happens.\nTrait for decoding to a reference.\nThe shorthand encoding uses an enum’s variant index <code>usize</code>\nEncode the given value or a previously cached shorthand.\nBound const variable, used only when preparing a trait …\nA placeholder for a const which could not be computed; …\nUnevaluated non-const-item, used by …\n<code>feature(generic_const_exprs)</code> anon consts are allowed to …\nInfer the value of the const.\nstable <code>min_const_generics</code> anon consts are not allowed to …\nanon consts outside of the type system, e.g. enum …\nA const generic parameter.\nA placeholder const - universally quantified higher-ranked …\nanon consts used as the length of a repeat expr are …\nAn unnormalized const item such as an anon const or assoc …\nUsed to hold computed value.\nCreates a constant with the given integer value and …\nCreates an interned bool constant.\nCreates an interned usize constant.\nLike Ty::new_error_with_message but for constants.\nLike Ty::new_error but for constants.\nPanics if <code>self.kind != ty::ConstKind::Value</code>.\nConvenience method to extract the value of a usize …\nAttempts to convert to a value.\nIterator that walks <code>self</code> and any types reachable from <code>self</code>…\nCreates an interned zst constant.\nAn enum to represent the compiler-side view of …\nError returned when a conversion from ScalarInt to char …\nA type for representing any integer. Only used for …\nThe raw bytes of a simple value.\nMake sure the <code>data</code> fits in <code>size</code>. This is guaranteed by all …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe first <code>size</code> bytes of <code>data</code> are the value. Do not try to …\nReturns the argument unchanged.\nThe “untyped” variant of <code>ConstInt</code>.\nCalls <code>U::from(self)</code>.\nWhether the value is a <code>usize</code> or <code>isize</code> type.\nWhether the value is of a signed integer type.\nExtracts the bits from the scalar without checking the …\nConverts the <code>ScalarInt</code> to i128. Panics if the size of the …\nConverts the <code>ScalarInt</code> to i16. Panics if the size of the …\nConverts the <code>ScalarInt</code> to i32. Panics if the size of the …\nConverts the <code>ScalarInt</code> to i64. Panics if the size of the …\nConverts the <code>ScalarInt</code> to i8. Panics if the size of the …\nConverts the <code>ScalarInt</code> to a signed integer of the given …\nConverts the <code>ScalarInt</code> to <code>u128</code>. Panics if the <code>size</code> of the …\nConverts the <code>ScalarInt</code> to <code>u16</code>. Panics if the size of the …\nConverts the <code>ScalarInt</code> to <code>u32</code>. Panics if the <code>size</code> of the …\nConverts the <code>ScalarInt</code> to <code>u64</code>. Panics if the <code>size</code> of the …\nConverts the <code>ScalarInt</code> to <code>u8</code>. Panics if the <code>size</code> of the …\nConverts the <code>ScalarInt</code> to an unsigned integer of the given …\nReturns the truncated result, and whether truncation …\nReturns the truncated result, and whether truncation …\nTry to convert this ScalarInt to the raw underlying bits. …\nConverts the <code>ScalarInt</code> to <code>bool</code>. Panics if the <code>size</code> of the …\nThe fields of any kind of aggregate. Structs, tuples and …\n<code>Ok(Err(ty))</code> indicates the constant was fine, but the …\nContains the error value\nintegers, <code>bool</code>, <code>char</code> are represented as scalars. See the …\nContains the success value\nAn interned valtree. Use this rather than <code>ValTreeKind</code>, …\nThis datastructure is used to represent the value of …\nA type-level constant value.\nAttempts to extract the raw bits from the constant.\nGet the values inside the ValTree as a slice of bytes. …\nReturns the zero-sized valtree: <code>Branch([])</code>.\nThis is used to get a reference to a <code>GlobalCtxt</code> if one is …\nParameter attributes that can only be determined by …\nThe same as <code>TyCtxtFeed</code>, but does not contain a <code>TyCtxt</code>. Use …\nThis struct contains information regarding a free …\nSee TyCtxt for details about this type.\nA trait implemented for all <code>X&lt;&#39;a&gt;</code> types that can be safely …\nThe central data structure of the compiler. It stores …\nThis struct should only be created by <code>create_def</code>.\nReturns the safe version of the signature of the given …\nReturns <code>true</code> if <code>callback</code> returns true for every region …\nAll traits in the crate graph, including those not visible …\nStores memory for globals (statics/consts).\nAllocates a read-only byte or string literal for …\nPre-interned values of the form: …\nPre-interned values of the form: …\nAnonymize all bound variables in <code>value</code>, this is mostly …\nReturns <code>true</code> if <code>callback</code> returns true for some region …\nThe arena that types, regions, etc. are allocated from.\nReturns a displayable description and article for the …\nExpects a body and returns its codegen attributes.\nReturns <code>&amp;&#39;static core::panic::Location&lt;&#39;static&gt;</code>.\nCaches the instantiation of a canonical binder given a set …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns a set of all late-bound regions that are …\nReturns a set of all late-bound regions that appear in …\nCommon consts, pre-interned for your convenience.\nReturns <code>true</code> if the node pointed to by <code>def_id</code> is a …\nReturns <code>true</code> if the node pointed to by <code>def_id</code> is a …\nReturns <code>true</code> if the node pointed to by <code>def_id</code> is a …\nReturns the movability of the coroutine of <code>def_id</code>, or …\nFind the appropriate span where <code>use</code> and outer attributes …\n<code>tcx</code>-dependent operations performed for every created …\nCreates a type context. To use the context call <code>fn enter</code> …\nNote that this is <em>untracked</em> and should only be used within …\nData layout specification for the current target.\nWith <code>cfg(debug_assertions)</code>, assert that args are …\nConverts a <code>DefId</code> into its fully expanded <code>DefPath</code> (every …\nConverts a <code>DefPathHash</code> to its corresponding <code>DefId</code> in the …\nTraits added on all bounds by default, excluding <code>Sized</code> …\nNote that this is <em>untracked</em> and should only be used within …\nWhether this is a trait implementation that has …\nEmit a lint from a lint struct (some type that implements …\nEmit a lint at <code>span</code> from a lint struct (some type that …\nInstalls <code>self</code> in a <code>TyCtxt</code> and <code>ImplicitCtxt</code> for the …\nHelper to get a tracked environment variable via. …\nReturns an equivalent value with all free regions removed …\nCaches the results of trait evaluation. This cache is used …\nReturn the crate imported by given use item.\nInvoke <code>callback</code> on every region appearing free in <code>value</code>.\nPre-interned <code>Infer(ty::FreshFloatTy(n))</code> for small values …\nPre-interned <code>Infer(ty::FreshIntTy(n))</code> for small values of <code>n</code>…\nPre-interned <code>Infer(ty::FreshTy(n))</code> for small values of <code>n</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nObtain the given diagnostic item’s <code>DefId</code>. Use …\nObtain the diagnostic item’s name\nDetermines whether identifiers in the assembly have strict …\nCaches the index of the highest bound var in clauses in a …\nHooks to be able to register functions in other crates …\nGiven an <code>impl_id</code>, return the trait it implements. Return …\nReplaces all regions bound by the given <code>Binder</code> with the …\nReplaces any late-bound regions bound in <code>value</code> with <code>&#39;erased</code>…\nInterns a const. (Use <code>mk_*</code> functions instead, where …\nInterns a predicate. (Use <code>mk_predicate</code> instead, where …\nInterns a type. (Use <code>mk_*</code> functions instead, where …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the bound region is in Impl Item.\nWhether the trait impl is marked const. This does not …\nCheck whether the diagnostic item with the given <code>name</code> has …\nWhether this def is one of the special bin crate …\nReturns <code>true</code> if the node pointed to by <code>def_id</code> is a general …\nchecks if bound region is in Impl Item\nWhether <code>def_id</code> is a stable const fn (i.e., doesn’t need …\nReturns the <code>DefId</code> and the <code>BoundRegionKind</code> corresponding to …\nA jobserver reference used to release then acquire a token …\nObtain all lang items of this crate and all dependencies …\nReturns a range of the start/end indices specified with the\nReplaces any late-bound regions bound in <code>value</code> with free …\nCommon lifetimes, pre-interned for your convenience.\nReturns the origin of the opaque type <code>def_id</code>.\nGiven the def-id of an early-bound lifetime on an opaque …\nThis method copies <code>Place</code>’s projection, add an element …\nNamed module children from all kinds of items, including …\nCaches the results of goal evaluation in the new solver.\nEmit a lint at the appropriate level for a hir node.\nEmit a lint at the appropriate level for a hir node, with …\nErased region, used outside of type inference.\n<code>ReStatic</code>\nPre-interned <code>ReVar(ty::RegionVar(n))</code> for small values of <code>n</code>.\nThe parameter is marked immutable in the function and …\nthe <code>DefId</code> of the free region.\nReplaces all types or regions bound by the given <code>Binder</code>. …\nReplaces all escaping bound vars. The <code>fld_r</code> closure …\nGiven a <code>DefId</code> for an <code>fn</code>, return all the <code>dyn</code> and <code>impl</code> …\nGiven a <code>DefId</code> for an <code>fn</code>, return all the <code>dyn</code> and <code>impl</code> …\nGiven a <code>fn</code> type, returns an equivalent <code>unsafe fn</code> type; …\n<code>LocalDefId</code> of the scope.\nCaches the results of trait selection. This cache is used …\nGiven a closure signature, returns an equivalent fn …\nNote that this is <em>untracked</em> and should only be used within …\nThe <code>stable_crate_id</code> is constructed out of the crate name …\nMaps a StableCrateId to the corresponding CrateNum. This …\nGiven the def_id of a Trait <code>trait_def_id</code> and the name of …\nDummy type used for the <code>Self</code> of a <code>TraitRef</code> created for …\nGiven a <code>ty</code>, return whether it’s an <code>impl Future&lt;...&gt;</code>.\nGets a <code>Ty</code> representing the <code>LangItem::OrderingEnum</code>\nPre-interned <code>Infer(ty::TyVar(n))</code> for small values of <code>n</code>.\nCommon types, pre-interned for your convenience.\nGive out access to the untracked data without any sanity …\nUse <code>ty::ValTree::zst</code> instead.\nThis stores a pointer to a <code>GlobalCtxt</code>. This is set to <code>Some</code> …\nAll traits that are visible within the crate graph (i.e. …\nThis is the implicit state of rustc. It contains the …\nSets <code>context</code> as the new current <code>ImplicitCtxt</code> for the …\nThe current query job, if any. This is updated by …\nUsed to prevent queries from calling too deeply.\nThe current dep graph task. This is used to add …\nThe current <code>TyCtxt</code>.\nAllows access to the <code>TyCtxt</code> in the current <code>ImplicitCtxt</code>. …\nAllows access to the current <code>ImplicitCtxt</code>. Panics if there …\nAllows access to the current <code>ImplicitCtxt</code> in a closure if …\nAllows access to the <code>TyCtxt</code> in the current <code>ImplicitCtxt</code>. …\nAllows access to the current <code>ImplicitCtxt</code> whose tcx field …\nA hashmap which only starts hashing after ignoring the …\nDefines the type to return when merging of two values …\nType alias for a hash map that uses the Fx hashing …\nType alias for a hash set that uses the Fx hashing …\nA struct which can never be instantiated. Used for the …\nSmall-storage-optimized implementation of a map.\nSmall-storage-optimized implementation of a set.\nThis trait is implemented by any type that can serve as a …\nTrait implemented for <strong>values</strong> associated with a unification …\nReturns the number of elements the map can hold without …\nReturns the number of elements the set can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nClears the set, removing all values.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns <code>true</code> if the set contains a value.\nReturns <code>true</code> if the map contains a value for the specified …\nClears the map, returning all key-value pairs as an …\nClears the set, returning all elements in an iterator.\nGrows the stack on demand to prevent stack overflow. Call …\nGets the given key’s corresponding entry in the map for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nReturns a reference to the value in the set, if any, that …\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\nInserts a key-value pair into the map.\nAdds a value to the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the set contains no elements.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all elements in arbitrary order. The …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nCreates an empty <code>SsoHashMap</code>.\nCreates an empty <code>SsoHashSet</code>.\nYou should return first the key that should be used as …\nRemoves a key from the map, returning the value at the key …\nRemoves a value from the set. Returns whether the value was\nRemoves a key from the map, returning the stored key and …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nShrinks the capacity of the map as much as possible. It …\nShrinks the capacity of the set as much as possible. It …\nRemoves and returns the value in the set, if any, that is …\nGiven two values, produce a new value that combines them. …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.\nCreates an empty <code>SsoHashMap</code> with the specified capacity.\nCreates an empty <code>SsoHashSet</code> with the specified capacity.\nCollect al types that have an implicit <code>&#39;static</code> obligation …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this makes sense to suggest in a diagnostic.\nSuggest restricting a type param with a new bound.\nSuggest restricting a type param with a new bound.\nDescribes how to elaborate an obligation into a …\n“Elaboration” is the process of identifying all the …\nA filter around an iterator of predicates that makes it …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nStart elaborating <code>Sized</code> - reqd during coherence checking, …\nFilter to only the supertraits of trait predicates, i.e. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the def-ids of the transitive supertraits of …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInstantiating a type variable with the given type would …\n<code>#[rustc_force_inline]</code> functions must be inlined and must …\nSafe <code>#[target_feature]</code> functions are not assignable to …\nExplains the source of a type err in a short, human …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTreat parameters as placeholders in the given environment. …\nTreat parameters as infer vars. This is the correct mode …\nA trait object, all of whose components are markers (e.g., …\nGeneric parameters are pretty much just bound variables, …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTries to simplify a type by only returning the outermost …\nReplaces the escaping bound vars (late bound regions or …\nA delegate used when instantiating bound vars.\nA simple delegate taking 3 mutable functions. The used …\nThis cache only tracks the <code>DebruijnIndex</code> and assumes that …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nAs with <code>RegionFolder</code>, represents the index of a binder …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn entity in the Rust type system, which can be one of …\nList of generic arguments that are gonna be used to …\nStores the user-given args to reach some fully qualified …\nSpecifies the user-given self type. In the case of a path …\nThe args for the item as given by the user.\nInterpret these generic args as the args of a closure type.\nInterpret these generic args as the args of a coroutine …\nInterpret these generic args as the args of a …\nInterpret these generic args as the args of an inline …\nUnpack the <code>GenericArg</code> as a const when it is known …\nUnpack the <code>GenericArg</code> as a region when it is known …\nUnpack the <code>GenericArg</code> as a type when it is known certainly …\nCreates a <code>GenericArgs</code> for generic parameter definitions, …\nCreates a <code>GenericArgs</code> that maps each generic parameter to …\nConverts generic args to a type list.\nReturns generic arguments that are not lifetimes.\nTransform from generic args for a child of <code>source_ancestor</code> …\nTruncates this list of generic args to have at most the …\nThe self type, in the case of a <code>&lt;T&gt;::Item</code> path (when …\nIterator that walks <code>self</code> and any types reachable from <code>self</code>…\n<code>[const]</code> bounds for a given item. This is represented using …\nBounds on generics.\nInformation about the formal type/lifetime parameters …\nReturns true if a concrete type is specified after a …\nReturns the <code>GenericParamDef</code> associated with this <code>ParamConst</code>…\nReturns <code>true</code> if <code>params</code> has <code>impl Trait</code>.\nReturns the args corresponding to the generic parameters …\nReturns the args corresponding to the generic parameters …\nReturns the <code>GenericParamDef</code> with the given index.\nLooks through the generics and all parents to find the …\nReverse map to the <code>index</code> field of each <code>GenericParamDef</code>.\n<code>pure_wrt_drop</code>, set by the (unsafe) <code>#[may_dangle]</code> attribute …\nReturns the <code>GenericParamDef</code> associated with this …\nReturns the <code>GenericParamDef</code> associated with this <code>ParamTy</code>.\nReturns an <code>InhabitedPredicate</code> that is generic over type …\nN.B. this query should only be called through …\nA AND B\nUninhabited when a const value is non-zero. This occurs …\nUninhabited\nInhabited if some generic type is inhabited. These are …\nRepresents whether some type is inhabited in a given …\nUninhabited if within a certain module. This occurs when …\nInhabited if either we don’t know the hidden type or we …\nA OR B\nInhabited\nReturns true if the corresponding type is inhabited in the …\nSame as <code>apply</code>, but returns <code>None</code> if self contains a module …\nSame as <code>apply</code>, but <code>NotInModule(_)</code> predicates yield <code>false</code>. …\nReturns true if the corresponding type is inhabited in the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReplaces generic types with its corresponding predicate\nSame as <code>Self::instantiate</code>, but if there is no generics to …\nCalls <code>U::from(self)</code>.\nCommon capabilities of placeholder kinds\nChecks whether this type is an ADT that has unsafe fields.\nPerforms a instantiation suitable for going from a …\nWhether this ABI is <code>extern &quot;Rust&quot;</code>.\nWhether the number of opaques has changed in a way that …\nReturns the type of the struct tail.\n…\n<code>core::future::async_drop::async_drop_in_place::&lt;&#39;_, T&gt;</code>.\nCompiler-generated <code>&lt;T as Clone&gt;::clone</code> implementation.\n<code>&lt;[FnMut/Fn closure] as FnOnce&gt;::call_once</code>.\n<code>&lt;[FnMut/Fn coroutine-closure] as FnOnce&gt;::call_once</code>\n<code>core::ptr::drop_in_place::&lt;T&gt;</code>.\nThe <code>ReifyShim</code> was created to produce a function pointer. …\nCompiler-generated <code>&lt;T as FnPtr&gt;::addr</code> implementation.\n<code>&lt;fn() as FnTrait&gt;::call_*</code> (generated <code>FnTrait</code> …\nProxy shim for async drop of future (def_id, proxy_cor_ty, …\nAn <code>InstanceKind</code> along with the args that are needed to …\nAn intrinsic <code>fn</code> item (with<code>#[rustc_intrinsic]</code>).\nA user-defined callable item.\nDescribes why a <code>ReifyShim</code> was created. This is needed to …\n<code>fn()</code> pointer where the function itself cannot be turned …\nCompiler-generated accessor for thread locals which …\n<code>&lt;T as Trait&gt;::method</code> where <code>method</code> receives unsizeable …\nDynamic dispatch to <code>&lt;dyn Trait as Trait&gt;::fn</code>.\nThis <code>ReifyShim</code> was created to populate a vtable. …\nDepending on the kind of <code>InstanceKind</code>, the MIR body …\nReturns the <code>DefId</code> of instances which might not require …\nReturns <code>true</code> when the MIR body associated with this …\nCreates a new <code>InstanceKind::Item</code> from the <code>def_id</code> and <code>args</code>.\nReturns <code>true</code> if the LLVM version of this instance is …\nResolves a <code>(def_id, args)</code> pair to an (optional) instance …\nReturns the <code>Ty</code> corresponding to this <code>Instance</code>, with …\nFinds a crate that contains a monomorphization of this …\nWhether the intrinsic can be invoked from stable const fn\nWhether the intrinsic has no meaningful body and all …\nLang items used by the new trait solver. This can be …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA type has cyclic layout, i.e. the type contains itself …\nError produced by attempting to compute or adjust a <code>FnAbi</code>.\nBlanket extension trait for contexts that can compute <code>FnAbi</code>…\nTrait for contexts that want to be able to compute <code>FnAbi</code>s. …\nThe <code>&amp;FnAbi</code>-wrapping type (or <code>&amp;FnAbi</code> itself), which will be …\nThis is a generic const expression (i.e. N * 2), which may …\nAny statically computable Layout. Alignment can be <code>None</code> if …\nError produced by a <code>layout_of</code> call, while computing <code>FnAbi</code> …\nBlanket extension trait for contexts that can compute …\nTrait for contexts that want to be able to compute layouts …\nThe <code>TyAndLayout</code>-wrapping type (or <code>TyAndLayout</code> itself), …\nAn alias failed to normalize.\nA potentially-wide pointer.\nA non-layout error is reported elsewhere.\nThe size of a type exceeds <code>TargetDataLayout::obj_size_bound</code>…\nType size “skeleton”, i.e., the only information …\nThe layout can vary due to a generic parameter.\nTrue uninitialized memory.\nThe return value of mem::uninitialized, 0x01 (unless …\nA type doesn’t have a sensible layout.\nUsed in <code>check_validity_requirement</code> to indicate the kind of …\nThe first half of a wide pointer.\nThe second half of a wide pointer.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCompute a <code>FnAbi</code> suitable for indirect calls, i.e. to <code>fn</code> …\nCompute a <code>FnAbi</code> suitable for declaring/defining an <code>fn</code> …\nCalculates whether a function’s ABI can unwind or not.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper used for <code>fn_abi_of_*</code>, to adapt <code>tcx.fn_abi_of_*(...)</code> …\nHelper used for <code>layout_of</code>, to adapt <code>tcx.layout_of(...)</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the layout of a type. Note that this implicitly …\n<code>Span</code> to use for <code>tcx.at(span)</code>, from <code>layout_of</code>.\nFIXME(#132279): This method should not be used as in the …\nFinds the appropriate Integer type and signedness for the …\nComputes the layout of a type, at <code>span</code>. Note that this …\nReturn an <em>integer</em> type matching this primitive. Useful in …\nIf true, this pointer is never null.\nThe type which determines the unsized metadata, if any, of …\nA trait implemented for all <code>X&lt;&#39;a&gt;</code> types that can be safely …\n<code>List&lt;T&gt;</code> is a bit like <code>&amp;[T]</code>, but with some critical …\nA <code>RawList</code> without the unsized tail. This type is used for …\nA <code>List</code> that additionally stores type information inline to …\nA dummy type used to force <code>List</code> to be unsized while not …\nA generic type that can be used to prepend a <code>List</code> with …\nThe additional info that is stored in …\nInterpret these generic args as the args of a closure type.\nInterpret these generic args as the args of a coroutine …\nInterpret these generic args as the args of a …\nInterpret these generic args as the args of an inline …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nAlthough this claims to be a zero-length array, in …\nReturns a reference to the (per header unique, static) …\nReturns a reference to the (per header unique, static) …\nCreates a <code>GenericArgs</code> for generic parameter definitions, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAllocates a list from <code>arena</code> and copies the contents of …\nCreates a <code>GenericArgs</code> that maps each generic parameter to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts generic args to a type list.\nReturns generic arguments that are not lifetimes.\nReturns the “principal <code>DefId</code>” of this set of …\nReturns the “principal <code>DefId</code>” of this set of …\nTransform from generic args for a child of <code>source_ancestor</code> …\nTruncates this list of generic args to have at most the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts generic params of a TypeFoldable from one item’…\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nsee call sites to fold_kind_no_missing_regions_error for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSpan of function being checked.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCollect Components for <em>all</em> the args of <code>alias_ty</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPush onto <code>out</code> all the things that must outlive <code>&#39;a</code> for the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSeparate from <code>ClauseKind::Projection</code> which is used for …\nA marker predicate that is always ambiguous. Used for …\nE.g., <code>Send</code>.\nA subset of predicates which can be assumed by the trait …\nProve a clause\n<code>T1</code> coerced to <code>T2</code>\nEnsures that a const generic argument to a parameter …\nConstants must be equal. The first component is the const …\nConstant initializer must evaluate successfully.\nTrait must be dyn-compatible.\nEnforces the constness of the predicate we’re calling. …\nThis should only be used inside of the new solver for …\nA statement that can be proven by a trait solver. This …\nE.g., <code>Iterator::Item = T</code>.\n<code>where &lt;T as TraitRef&gt;::Name == X</code>, approximately. See the …\n<code>where &#39;a: &#39;r</code>\n<code>T1 &lt;: T2</code>\nE.g., <code>Iterator</code>.\nCorresponds to <code>where Foo: Bar&lt;A, B, C&gt;</code>. <code>Foo</code> here would be …\n<code>where T: &#39;r</code>\nSupport marking impl as unstable.\nNo syntax: <code>T</code> well-formed.\nWhether this projection can be soundly normalized.\nThe parameters of the associated or opaque item.\nMatches a <code>PredicateKind::Clause</code> and turns it into a <code>Clause</code>…\nThe <code>DefId</code> of the <code>TraitItem</code> or <code>ImplItem</code> for the associated …\nAssert that the predicate is a clause.\nFlips the polarity of a Predicate.\nPerforms a instantiation suitable for going from a …\nGets the inner <code>ty::Binder&lt;&#39;tcx, PredicateKind&lt;&#39;tcx&gt;&gt;</code>.\nIf polarity is Positive: we are proving that the trait is …\nCompares via an ordering that will not change if modules …\nPrint the RTN type as an impl trait with its path, i.e.e …\nPrint the RTN type as an impl trait, i.e. <code>impl Sized</code>.\nPrint the RTN type as a value path, i.e. <code>T::method(..): ...</code>…\nTrait for printers that pretty-print using <code>fmt::Write</code> to …\nA trait that “prints” user-facing type system …\nThe “region highlights” are used to control region …\nRendering style for RTN types.\nWrapper type for <code>ty::TraitRef</code> which opts-in to pretty …\nWrapper type for <code>ty::TraitRef</code> which opts-in to pretty …\nWrapper type for <code>ty::TraitRef</code> which opts-in to pretty …\nAs a heuristic, when we see an impl, if we see that the ‘…\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nPrints comma-separated elements.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPrints <code>&lt;...&gt;</code> around what <code>f</code> prints.\nIf enabled, when printing a “free region” that …\nIf enabled, when we see the selected region, use “<code>&#39;N</code>” …\nInsert the trait ref and optionally a projection type …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrints <code>(...)</code> around what <code>f</code> prints if <code>parenthesized</code> is …\nPrints <code>(...)</code> around what <code>f</code> prints.\nThis is overridden for MIR printing because we only want …\nLike <code>print_def_path</code> but for value paths.\nAppends a representation of a const.\nAppends a representation of a crate name, e.g. <code>std</code>, or …\nAppends a representation of an entity with a normal path, …\nAppends a representation of a list of …\nLike <code>print_def_path</code>, but for <code>DefPathData::Impl</code>.\nAppends a representation of a path ending in generic args, …\nSimilar to <code>print_path_with_simple</code>, but the final segment …\nAppends a representation of a qualified path segment, e.g. …\nAppends a representation of a (full or partial) simple …\nAppends a representation of a region.\nAppends a representation of a type.\nReturns <code>true</code> if the region should be printed in optional …\nThe purpose of this function is to collect public symbols …\nTry to see if this path can be trimmed to a unique symbol …\nIf possible, this returns a global path resolving to <code>def_id</code>…\nDoes the work of <code>try_print_visible_def_path</code>, building the …\nPrints <code>{f: t}</code> or <code>{f as t}</code> depending on the <code>cast</code> argument\nAdds the <code>crate::</code> prefix to paths where appropriate.\nForce us to name impls with just the filename/line number. …\nAvoids running any queries during prints.\nPrevent path trimming if it is turned on. Path trimming …\nPrevent selection of visible paths. <code>Display</code> impl of DefId …\nPrevent selection of visible paths if the paths are …\nAvoids running select queries during any prints that occur …\nPrint types for the purposes of a signature suggestion.\nPrint types for the purposes of a suggestion.\nPrint the RTN type as an impl trait with its path, i.e.e …\nPrint the RTN type as an impl trait, i.e. <code>impl Sized</code>.\nPrint the RTN type as a value path, i.e. <code>T::method(..): ...</code>…\nTrait for printers that pretty-print using <code>fmt::Write</code> to …\nFolds through bound vars and placeholders, naming them\nThe “region highlights” are used to control region …\nRendering style for RTN types.\nWrapper type for <code>ty::TraitRef</code> which opts-in to pretty …\nWrapper type for <code>ty::TraitRef</code> which opts-in to pretty …\nWrapper type for <code>ty::TraitRef</code> which opts-in to pretty …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nPrints comma-separated elements.\nReturns the argument unchanged.\nPrints <code>&lt;...&gt;</code> around what <code>f</code> prints.\nIf enabled, when printing a “free region” that …\nIf enabled, when we see the selected region, use “<code>&#39;N</code>” …\nHighlight the given bound region. We can only highlight …\nHighlights the region inference variable <code>vid</code> as <code>&#39;N</code>.\nConvenience wrapper for <code>highlighting_region</code>.\nInsert the trait ref and optionally a projection type …\nCalls <code>U::from(self)</code>.\nIf <code>region</code> and <code>number</code> are both <code>Some</code>, invokes …\nPrints <code>(...)</code> around what <code>f</code> prints if <code>parenthesized</code> is …\nPrints <code>(...)</code> around what <code>f</code> prints.\nThis is overridden for MIR printing because we only want …\nLike <code>print_def_path</code> but for value paths.\nReturns <code>Some(n)</code> with the number to use for the given …\nReturns <code>true</code> if the region should be printed in optional …\nThe purpose of this function is to collect public symbols …\nTry to see if this path can be trimmed to a unique symbol …\nIf possible, this returns a global path resolving to <code>def_id</code>…\nDoes the work of <code>try_print_visible_def_path</code>, building the …\nPrints <code>{f: t}</code> or <code>{f as t}</code> depending on the <code>cast</code> argument\nAdds the <code>crate::</code> prefix to paths where appropriate.\nForce us to name impls with just the filename/line number. …\nAvoids running any queries during prints.\nPrevent path trimming if it is turned on. Path trimming …\nPrevent selection of visible paths. <code>Display</code> impl of DefId …\nPrevent selection of visible paths if the paths are …\nAvoids running select queries during any prints that occur …\nPrint types for the purposes of a signature suggestion.\nPrint types for the purposes of a suggestion.\nAn anonymous region parameter for a given fn (&amp;T)\nAn anonymous region parameter for a given fn (&amp;T)\nAnonymous region for the implicit env pointer parameter to …\nAnonymous region for the implicit env pointer parameter to …\nThe parameter representation of late-bound function …\nWhen liberating bound regions, we map their <code>BoundRegionKind</code>\nLate-bound regions that appear in the AST.\nLate-bound regions that appear in the AST.\nAn anonymous region parameter with a <code>Symbol</code> name.\nAn anonymous region parameter with a <code>Symbol</code> name.\nA higher-ranked region. These represent either late-bound …\nA region parameter; for example <code>&#39;a</code> in …\nErased region, used by trait selection, in MIR and during …\nA region that resulted from some other error. Used …\nLate-bound function parameters are represented using a …\nA placeholder region – the higher-ranked version of …\nStatic data that has an “infinite” lifetime. Top in …\nA region variable. Should not exist outside of type …\nUse this rather than <code>RegionKind</code>, whenever possible.\nA <strong>region</strong> <strong>v</strong>ariable <strong>ID</strong>.\nTrue for free region in the current context.\nIs this region named by the user?\nDoes this early bound region have a name? Early bound …\nTrue for free regions other than <code>&#39;static</code>.\nConstructs a <code>RegionKind::ReError</code> region.\nConstructs a <code>RegionKind::ReError</code> region and registers a …\nConstructs a <code>RegionKind::ReError</code> region and registers a …\nAvoid this in favour of more specific <code>new_*</code> methods, where …\nGiven some item <code>binding_item</code>, check if this region is a …\nContains the error value\nWe switched our variance because a generic argument occurs …\nNo additional information - this is the default. We will …\nContains the success value\nWhether aliases should be related structurally or not. Used\nExtra information about why we ended up with a particular …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGeneric relation routine suitable for most anything.\nRelate the two args for the given item. The default is to …\nSwitch variance for the purpose of relating <code>a</code> and <code>b</code>.\nRelates <code>a</code> and <code>b</code> structurally, calling the relation for all …\nRelates <code>a</code> and <code>b</code> structurally, calling the relation for all …\nThe index of the generic parameter being used (e.g. <code>0</code> for …\nThe generic type containing the generic parameter that …\nRegister <code>AliasRelate</code> obligation(s) that both types must be …\nRegister obligations that must hold in order for this …\nRegister predicates that must hold in order for this …\nWhether aliases should be related structurally. This is …\nContains the error value\nWe switched our variance because a generic argument occurs …\nNo additional information - this is the default. We will …\nContains the success value\nEnforce that <code>a</code> is equal to or a subtype of <code>b</code>.\nWhether aliases should be related structurally or not. Used\nExtra information about why we ended up with a particular …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGeneric relation routine suitable for most anything.\nRelate the two args for the given item. The default is to …\nSwitch variance for the purpose of relating <code>a</code> and <code>b</code>.\nRelates <code>a</code> and <code>b</code> structurally, calling the relation for all …\nRelates <code>a</code> and <code>b</code> structurally, calling the relation for all …\nThe index of the generic parameter being used (e.g. <code>0</code> for …\nThe generic type containing the generic parameter that …\n<code>RvalueScopes</code> is a mapping from sub-expressions to <em>extended</em> …\nMake an association between a sub-expression and an …\nReturns the scope when the temp created by <code>expr_id</code> will be …\nA path with at least one coinductive step. Such cycles …\nThe search graph does not simply use <code>Interner</code> directly to …\nThe initial value when adding a goal to its own nested …\nWhether to use the provisional cache. Set to <code>false</code> by a …\nA path which is treated as ambiguous. Once a path has this …\nA path consisting of only inductive/unproductive steps. …\nIn the initial iteration of a cycle, we do not yet have a …\nTracks how nested goals have been accessed. This is …\nA path which is not be coinductive right now but we may …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe number of goals currently in the search graph. This …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nReturning <code>Some</code> disables the global cache for the current …\nProbably the most involved method of the whole solver.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the list of types with a “potentially significant…\nAn additional filter to exclude well-known types from the …\nExtract the span of the custom destructor of a type …\nIndicates that a <code>impl Drop for Adt</code> is <code>const</code> or not.\nIf the self type is an alias type, e.g. an opaque type or …\nConst conditions that need to hold for <code>[const]</code> alias …\nPredicate required for an alias projection to be …\nWe failed due to ambiguity. This ambiguity can either be a …\nA builtin impl generated by the compiler. When adding a …\nPossible ways the given goal can be proven.\nA candidate that is registered only during coherence to …\nContains the error value\nAdditional constraints returned on success.\nA goal is a statement, i.e. <code>predicate</code>, we want to prove …\nWhy a specific goal has to be proven.\nA user written impl.\nWe’re proving a where-bound of an impl.\nInstantiating a higher-ranked goal and re-proving it.\nWhy we failed to evaluate a goal.\n<code>MetaSized</code> trait\nSome built-in impl we don’t need to differentiate. This …\nPreferred eagerly.\nIn case normalizing aliases in nested goals cycles, …\nA built-in impl for trait objects. The index is only used …\nContains the success value\nWe gave up due to an overflow, most often by hitting the …\nAn assumption from the environment. Stores a <code>ParamEnvSource</code>…\nOpaques that are defined in the inference context before a …\nThe result of evaluating a canonical query.\n<code>Sized</code> trait\nWhich sizedness trait - <code>Sized</code>, <code>MetaSized</code>? <code>PointeeSized</code> is …\nA built-in implementation of <code>Upcast</code> for trait objects to …\nA built-in impl that is considered trivial, without any …\nA nested goal required to prove that types are …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nAdditional constraints returned by this query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nData structure used to inspect trait solver behavior.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdates the goal to one with a different <code>predicate</code> but the …\nWe added a goal to the <code>EvalCtxt</code> which will get proven the …\nWhen evaluating a goal we also store the original values …\nA call to …\nA call to <code>probe</code> while proving the current goal. This is …\nProbe entered when normalizing the self ty during …\nTry to unify an opaque type with an existing key in the …\nA self-contained computation during trait solving. This …\nWhat kind of probe we’re in. In case the probe …\nUsed to do a probe to find out what projection type(s) …\nA trait goal was satisfied by an impl candidate.\nChecking that a rigid alias is well-formed.\nThe root inference context while proving a goal.\nLooking for param-env candidates that satisfy the trait …\nSome <code>data</code> together with information about how they relate …\nA candidate for proving a trait or alias-relate goal.\nUsed in the probe that wraps normalizing the non-self type …\nWhat happened inside of this probe in chronological order.\nThis is always <code>ProbeKind::Root</code>.\nAlgebraic data types (ADT). For example: structures, …\nA projection, opaque type, free type alias, or inherent …\nAnalysis includes type inference, checking that items are …\nAn array with the given length. Written as <code>[T; N]</code>.\nThe primitive boolean type. Written as <code>bool</code>.\nThe behavior during MIR borrowck is identical to …\nBound type variable, used to represent the <code>&#39;a</code> in …\nThe primitive character type; holds a Unicode scalar value …\nThe anonymous type of a closure. Used to represent the …\nWhen checking whether impls overlap, we check whether any …\nThe anonymous type of a coroutine. Used to represent the …\nThe anonymous type of a closure. Used to represent the …\nA type representing the types stored inside a coroutine. …\nA trait object. Written as …\nA placeholder for a type which could not be computed; this …\nA primitive floating-point type. For example, <code>f64</code>.\nThe anonymous type of a function declaration/definition. …\nA pointer to a function. Written as <code>fn() -&gt; i32</code>.\nAn unsized FFI type that is opaque to Rust. Written as …\nA type variable used during type checking.\nAn inline const is modeled like\nStruct returned by <code>split()</code>.\nA primitive signed integer type. For example, <code>i32</code>.\nThe never type <code>!</code>.\nCoroutine has been poisoned.\nA type parameter; for example, <code>T</code> in <code>fn f&lt;T&gt;(x: T) {}</code>.\nA pattern newtype. Takes any type and restricts its valid …\nA placeholder type, used during higher ranked subtyping to …\nAfter analysis, mostly during codegen and MIR …\nAny analysis after borrowck for a given body should be …\nNumber of variants to reserve in coroutine state. …\nCoroutine has returned or is completed.\nA raw pointer. Written as <code>*mut T</code> or <code>*const T</code>\nA reference; a pointer with an associated lifetime. …\nThe pointee of an array slice. Written as <code>[T]</code>.\nThe pointee of a string slice. Written as <code>str</code>.\nA tuple type. For example, <code>(i32, bool)</code>.\nCoroutine has not been resumed yet.\nA primitive unsigned integer type. For example, <code>u32</code>.\nAn unsafe binder type.\nThe parameters of the associated or opaque type.\nGeneric parameters from the enclosing item, concatenated …\nThe <code>DefId</code> of the <code>TraitItem</code> or <code>ImplItem</code> for the associated …\nThe type of the state discriminant used in the coroutine …\nThe discriminant for the given variant. Panics if the …\nThe set of all discriminants for the coroutine, enumerated …\nConstruct <code>InlineConstArgs</code> from <code>InlineConstArgsParts</code>.\nReturns the generic parameters of the inline const’s …\nThis is the types of the fields of a coroutine which are …\nDivides the inline const args into their respective …\nThis returns the types of the MIR locals which had to be …\nReturns the type of this inline const.\nReturns an iterator over the list of types of captured …\nCalls <code>f</code> with a reference to the name of the enumerator for …\nThe valid variant indices of this coroutine.\nThis is the implicit state of rustc. It contains the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nSets <code>context</code> as the new current <code>ImplicitCtxt</code> for the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe current query job, if any. This is updated by …\nUsed to prevent queries from calling too deeply.\nThe current dep graph task. This is used to add …\nThe current <code>TyCtxt</code>.\nAllows access to the <code>TyCtxt</code> in the current <code>ImplicitCtxt</code>. …\nAllows access to the current <code>ImplicitCtxt</code>. Panics if there …\nAllows access to the current <code>ImplicitCtxt</code> in a closure if …\nAllows access to the <code>TyCtxt</code> in the current <code>ImplicitCtxt</code>. …\nAllows access to the current <code>ImplicitCtxt</code> whose tcx field …\nSpecializing on this trait is allowed because all of the …\nSpecializing on this trait is allowed because it doesn’t …\nThe default. Specializing on this trait is not allowed.\nA trait’s definition with type information.\nWhether this trait is treated specially by the standard …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nWhether this trait is <code>const</code>.\nWhether a trait is fully built-in, and any implementation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether to add a builtin <code>dyn Trait: Trait</code> implementation. …\nQuery provider for <code>incoherent_impls</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf <code>true</code>, then this trait has the <code>#[rustc_coinductive]</code> …\nIf <code>true</code>, then this trait has the <code>#[fundamental]</code> attribute. …\nIf <code>true</code>, then this trait has the <code>#[marker]</code> attribute, …\nList of functions from <code>#[rustc_must_implement_one_of]</code> …\nImpls indexed by their simplified self type, for fast …\nIf <code>true</code>, then this trait had the <code>#[rustc_paren_sugar]</code> …\nIf <code>true</code>, then this trait has the …\nIf <code>true</code>, then this trait has the …\nUsed to determine whether the standard library is allowed …\nQuery provider for <code>trait_impls_of</code>.\nCanonical user type annotation.\nMapping of type annotation indices to canonical user type …\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nInformation on a pattern incompatible with Rust 2024, for …\nThe canonical type is the result of <code>type_of(def_id)</code> with …\nA user-given type annotation attached to a constant. These …\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nWhether any binding modifiers occur under a non-<code>move</code> …\nWhether any <code>&amp;</code> or <code>&amp;mut</code> patterns occur under a non-<code>move</code> …\nTracks the fake reads required for a closure and the …\nRecords the reasons that we picked the kind of each …\nTracks the minimum captures required for a closure; see …\nFor a given closure, returns the iterator of …\nContains the data for evaluating the effect of feature …\nFor every coercion cast we add the HIR node ID of the cast …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nAll the opaque types that have hidden types set by this …\nStores the predicates that apply on coroutine witness …\nHow should a deref pattern find the place for its inner …\nReturns the type of an expression as a monotype.\nReturns the type of <code>expr</code>, considering any <code>Adjustment</code> entry …\nReturns the computed binding mode for a <code>PatKind::Binding</code> …\nResolved field indices for field accesses in expressions (…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nFor each FRU expression, record the normalized types of …\nThe <code>HirId::owner</code> all <code>ItemLocalId</code>s in this table are …\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor each fn, records the “liberated” types of its …\nA user type annotation with additional bounds that need to …\nStores the type parameters which were instantiated to …\nStores the types for various nodes in the AST. Note that …\nContainer types and field indices of <code>offset_of!</code> expressions\nStores the types which were implicitly dereferenced in …\nStores the actual binding mode for all instances of …\nDoes the pattern recursively contain a <code>ref mut</code> binding in …\nReturns the type of a pattern as a monotype. Like <code>expr_ty</code>, …\nGoals proven during HIR typeck which may be potentially …\nLabeled spans for <code>&amp;</code>s, <code>&amp;mut</code>s, and binding modifiers …\nReturns the final resolution of a <code>QPath</code> in an <code>Expr</code> or <code>Pat</code> …\nTop-level patterns incompatible with Rust 2024’s match …\nTracks the rvalue scoping rules which defines finer …\nSet of reference patterns that match against a …\nIf <code>true</code>, we can give a simpler suggestion solely by …\nIf any errors occurred while type-checking this body, this …\nStores the types involved in calls to <code>transmute</code> intrinsic. …\nResolved definitions for <code>&lt;T&gt;::X</code> associated paths and …\nSet of trait imports actually used in the method …\nStores the canonicalized types provided by the user. See …\nThis will either store the canonicalized types provided by …\nValidate that the given HirId (respectively its <code>local_id</code> …\nUsed as an input to <code>TyCtxt::uses_unique_generic_params</code>.\nCheck region parameters from a function definition. Allows …\nOnly permit parameter regions. This should be used for …\nWhether or not to check for recursive opaque types. This …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nDoes the equivalent of\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines whether an item is an intrinsic (which may be …\nDetermines whether an item is directly annotated with …\nDetermines whether an item is annotated with …\nReturns a list of types such that the given type needs …\nReturns a list of types such that the given type needs …\nReveals all opaque types in the given value, replacing them\nDoes the equivalent of\nBit representation of the discriminant (e.g., <code>-1i8</code> is …\nAdds <code>1</code> to the value and wraps around if the maximum for …\nCollects all the late-bound regions at the innermost …\nFinds the max universe present\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>true</code> if we only want regions that are known to be “…\nlayout align of this type (used in vtable header)\ndestructor of this type (used in vtable header)\nlayout size of this type (used in vtable header)\ndispatchable associated function\npointer to a separate supertrait vtable, can be used by …\nnon-dispatchable associated function that is excluded from …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRetrieves an allocation that represents the contents of a …\nAn iterator for walking the type tree.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSkips the subtree corresponding to the last type returned …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA query to trigger a delayed bug. Clearly, if one has a <code>tcx</code>…")