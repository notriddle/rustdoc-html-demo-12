searchState.loadedDescShard("rustc_middle", 2, "Whether it’s a <code>static mut</code> or just a <code>static</code>.\nWhether it’s an anonymous static generated for nested …\nWhether it’s a <code>unsafe static</code>, <code>safe static</code> (inside extern …\nWhether it’s a <code>static mut</code> or just a <code>static</code>.\nWhether it’s an anonymous static generated for nested …\nWhether it’s a <code>unsafe static</code>, <code>safe static</code> (inside extern …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nA dependency that is required by an rlib version of this …\nA dependency that is required by an rlib version of this …\nA dependency that is always injected into the dependency …\nA dependency that is always injected into the dependency …\nA dependency that is only used for its macros.\nA dependency that is only used for its macros.\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nA trait object, all of whose components are markers (e.g., …\nA trait object, all of whose components are markers (e.g., …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nA AND B\nA AND B\nUninhabited when a const value is non-zero. This occurs …\nUninhabited when a const value is non-zero. This occurs …\nUninhabited\nUninhabited\nInhabited if some generic type is inhabited. These are …\nInhabited if some generic type is inhabited. These are …\nUninhabited if within a certain module. This occurs when …\nUninhabited if within a certain module. This occurs when …\nInhabited if either we don’t know the hidden type or we …\nInhabited if either we don’t know the hidden type or we …\nA OR B\nA OR B\nThis type alias specifies the type returned from query …\nInhabited\nInhabited\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nA AND B\nA AND B\nUninhabited when a const value is non-zero. This occurs …\nUninhabited when a const value is non-zero. This occurs …\nUninhabited\nUninhabited\nInhabited if some generic type is inhabited. These are …\nInhabited if some generic type is inhabited. These are …\nUninhabited if within a certain module. This occurs when …\nUninhabited if within a certain module. This occurs when …\nInhabited if either we don’t know the hidden type or we …\nInhabited if either we don’t know the hidden type or we …\nA OR B\nA OR B\nThis type alias specifies the type returned from query …\nInhabited\nInhabited\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThe size at which the <code>large_assignments</code> lint starts being …\nThe size at which the <code>large_assignments</code> lint starts being …\nThe maximum pattern complexity allowed (internal only).\nThe maximum pattern complexity allowed (internal only).\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThe maximum recursion limit for potentially infinitely …\nThe maximum recursion limit for potentially infinitely …\nThe maximum length of types during monomorphization.\nThe maximum length of types during monomorphization.\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThe absolute value of the resultant constant.\nThe absolute value of the resultant constant.\nIf the constant is negative.\nIf the constant is negative.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThe type of the constant.\nThe type of the constant.\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nIf Some(T), a type autoderef reported an error on.\nIf Some(T), a type autoderef reported an error on.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nIf <code>true</code>, <code>steps</code> has been truncated due to reaching the …\nIf <code>true</code>, <code>steps</code> has been truncated due to reaching the …\nThe valid autoderef steps that could be found by following …\nThe valid autoderef steps that could be found by following …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\n…\n…\n<code>core::future::async_drop::async_drop_in_place::&lt;&#39;_, T&gt;</code>.\n<code>core::future::async_drop::async_drop_in_place::&lt;&#39;_, T&gt;</code>.\nCompiler-generated <code>&lt;T as Clone&gt;::clone</code> implementation.\nCompiler-generated <code>&lt;T as Clone&gt;::clone</code> implementation.\n<code>&lt;[FnMut/Fn closure] as FnOnce&gt;::call_once</code>.\n<code>&lt;[FnMut/Fn closure] as FnOnce&gt;::call_once</code>.\n<code>&lt;[FnMut/Fn coroutine-closure] as FnOnce&gt;::call_once</code>\n<code>&lt;[FnMut/Fn coroutine-closure] as FnOnce&gt;::call_once</code>\n<code>core::ptr::drop_in_place::&lt;T&gt;</code>.\n<code>core::ptr::drop_in_place::&lt;T&gt;</code>.\nCompiler-generated <code>&lt;T as FnPtr&gt;::addr</code> implementation.\nCompiler-generated <code>&lt;T as FnPtr&gt;::addr</code> implementation.\n<code>&lt;fn() as FnTrait&gt;::call_*</code> (generated <code>FnTrait</code> …\n<code>&lt;fn() as FnTrait&gt;::call_*</code> (generated <code>FnTrait</code> …\nProxy shim for async drop of future (def_id, proxy_cor_ty, …\nProxy shim for async drop of future (def_id, proxy_cor_ty, …\nAn intrinsic <code>fn</code> item (with<code>#[rustc_intrinsic]</code>).\nAn intrinsic <code>fn</code> item (with<code>#[rustc_intrinsic]</code>).\nA user-defined callable item.\nA user-defined callable item.\nThis type alias specifies the type returned from query …\n<code>fn()</code> pointer where the function itself cannot be turned …\n<code>fn()</code> pointer where the function itself cannot be turned …\nCompiler-generated accessor for thread locals which …\nCompiler-generated accessor for thread locals which …\n<code>&lt;T as Trait&gt;::method</code> where <code>method</code> receives unsizeable …\n<code>&lt;T as Trait&gt;::method</code> where <code>method</code> receives unsizeable …\nDynamic dispatch to <code>&lt;dyn Trait as Trait&gt;::fn</code>.\nDynamic dispatch to <code>&lt;dyn Trait as Trait&gt;::fn</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\n…\n…\n<code>core::future::async_drop::async_drop_in_place::&lt;&#39;_, T&gt;</code>.\n<code>core::future::async_drop::async_drop_in_place::&lt;&#39;_, T&gt;</code>.\nCompiler-generated <code>&lt;T as Clone&gt;::clone</code> implementation.\nCompiler-generated <code>&lt;T as Clone&gt;::clone</code> implementation.\n<code>&lt;[FnMut/Fn closure] as FnOnce&gt;::call_once</code>.\n<code>&lt;[FnMut/Fn closure] as FnOnce&gt;::call_once</code>.\n<code>&lt;[FnMut/Fn coroutine-closure] as FnOnce&gt;::call_once</code>\n<code>&lt;[FnMut/Fn coroutine-closure] as FnOnce&gt;::call_once</code>\n<code>core::ptr::drop_in_place::&lt;T&gt;</code>.\n<code>core::ptr::drop_in_place::&lt;T&gt;</code>.\nCompiler-generated <code>&lt;T as FnPtr&gt;::addr</code> implementation.\nCompiler-generated <code>&lt;T as FnPtr&gt;::addr</code> implementation.\n<code>&lt;fn() as FnTrait&gt;::call_*</code> (generated <code>FnTrait</code> …\n<code>&lt;fn() as FnTrait&gt;::call_*</code> (generated <code>FnTrait</code> …\nProxy shim for async drop of future (def_id, proxy_cor_ty, …\nProxy shim for async drop of future (def_id, proxy_cor_ty, …\nAn intrinsic <code>fn</code> item (with<code>#[rustc_intrinsic]</code>).\nAn intrinsic <code>fn</code> item (with<code>#[rustc_intrinsic]</code>).\nA user-defined callable item.\nA user-defined callable item.\nThis type alias specifies the type returned from query …\n<code>fn()</code> pointer where the function itself cannot be turned …\n<code>fn()</code> pointer where the function itself cannot be turned …\nCompiler-generated accessor for thread locals which …\nCompiler-generated accessor for thread locals which …\n<code>&lt;T as Trait&gt;::method</code> where <code>method</code> receives unsizeable …\n<code>&lt;T as Trait&gt;::method</code> where <code>method</code> receives unsizeable …\nDynamic dispatch to <code>&lt;dyn Trait as Trait&gt;::fn</code>.\nDynamic dispatch to <code>&lt;dyn Trait as Trait&gt;::fn</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\n<code>async fn</code>\n<code>async fn</code>\n<code>-&gt; impl Trait</code>\n<code>-&gt; impl Trait</code>\nThis type alias specifies the type returned from query …\ntype aliases: <code>type Foo = impl Trait;</code>\ntype aliases: <code>type Foo = impl Trait;</code>\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nassociated types in impl blocks for traits.\nThe defining function.\nThe defining function.\nThe type alias or associated type parent of the TAIT/ATPIT\nassociated types in impl blocks for traits.\nThe defining function.\nThe defining function.\nThe type alias or associated type parent of the TAIT/ATPIT\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nCaller bounds are <code>Obligation</code>s that the caller must …\nCaller bounds are <code>Obligation</code>s that the caller must …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\n<code>&amp;str</code> gives a consistent ordering, which ensures …\n<code>&amp;str</code> gives a consistent ordering, which ensures …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nA value not representable by the other variants; needs to …\nA value not representable by the other variants; needs to …\nThis type alias specifies the type returned from query …\nUsed for types with <code>layout::abi::Scalar</code> ABI.\nUsed for types with <code>layout::abi::Scalar</code> ABI.\nUsed for references to unsized types with slice tail.\nUsed for references to unsized types with slice tail.\nOnly for ZSTs.\nOnly for ZSTs.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThe allocation storing the slice contents. This always …\nThe backing memory of the value. May contain more memory …\nThe metadata field of the reference. This is a “target …\nOffset into <code>alloc</code>\nThe allocation storing the slice contents. This always …\nThe backing memory of the value. May contain more memory …\nThe metadata field of the reference. This is a “target …\nOffset into <code>alloc</code>\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nVisible everywhere (including in other crates).\nVisible everywhere (including in other crates).\nVisible only in the given crate-local module.\nVisible only in the given crate-local module.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nAn ADT constructor, e.g. <code>Foo {x: 1, y: 2}</code>.\nThe <code>&amp;&amp;</code> operator.\nA <code>match</code> arm.\nAn array, e.g. <code>[a, b, c, d]</code>.\nFixed match against an array; irrefutable.\nAn assignment: <code>lhs = rhs</code>.\nA <em>non-overloaded</em> operation assignment, e.g. <code>lhs += rhs</code>.\nA struct expression with a “base”, an expression of …\nA <code>become</code> expression.\nA <em>non-overloaded</em> binary operation.\n<code>x</code>, <code>ref x</code>, <code>x @ P</code>, etc.\nA block.\nA borrow, e.g. <code>&amp;arg</code>.\nA <code>box &lt;value&gt;</code> expression.\nA <code>break</code> expression.\nA compiler-generated unsafe block\nA use expression <code>x.use</code>.\nA function call. Method calls and overloaded operators are …\nA cast: <code>&lt;source&gt; as &lt;type&gt;</code>. The type we cast to is the …\nA closure definition.\nAn inline <code>const</code> block, e.g. <code>const {}</code>.\nA <code>#[const_continue] break</code> expression.\nOne of the following:\nA <code>continue</code> expression.\nA struct expression with a <code>..</code> tail but no “base” …\nA <em>non-overloaded</em> dereference.\n<code>box P</code>, <code>&amp;P</code>, <code>&amp;mut P</code>, etc.\nDeref pattern, written <code>box P</code> for now.\nAn error has been encountered during lowering. We probably …\nPattern obtained by converting a constant (inline or …\nAn <code>unsafe</code> block. The <code>HirId</code> is the ID of the block.\nA THIR expression.\nAn expression with a trailing semicolon.\nAccess to a field of a struct, a tuple, an union, or an …\nRepresents the association of a field identifier and an …\nThe type of this valtree is stored in the surrounding …\nAn <code>if</code> expression.\nA <em>non-overloaded</em> indexing operation.\nInline assembly, i.e. <code>asm!()</code>.\n<code>(...)</code>, <code>Foo(...)</code>, <code>Foo{...}</code>, or <code>Foo</code>, where <code>Foo</code> is a variant …\nA <code>let</code> binding.\nSpecial expression representing the <code>let</code> part of an <code>if let</code> …\nA literal.\nA logical operation. This is distinct from <code>BinaryOp</code> because\nA <code>loop</code> expression.\nA …\nThe <code>match</code> part of a <code>#[loop_match]</code>\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nA <code>match</code> expression.\nA missing pattern, e.g. for an anonymous param in a bare …\nAssociated constants and named constants\nA never pattern <code>!</code>.\nA coercion from <code>!</code> to any type.\nFor literals that don’t correspond to anything in the HIR\nNo value.\nA struct expression where all the fields are explicitly …\nField offset (<code>offset_of!</code>)\nThe <code>||</code> operator.\nAn or-pattern, e.g. <code>p | q</code>. Invariant: <code>pats.len() &gt;= 2</code>.\nDescription of a type-checked function parameter.\nA range pattern. The boundaries must be of the same type …\nA (possibly open) boundary of a range pattern. If present, …\nA type ascription on a place.\nAn unsafe binder cast on a place, e.g. <code>unwrap_binder!(*ptr)</code>…\nA pointer coercion. More information can be found in …\nA <code>&amp;raw [const|mut] $place_expr</code> raw borrow resulting in …\nAn array literal constructed from one repeated element, …\nA <code>return</code> expression.\n<code>Scope</code>s are used to explicitly mark destruction scopes, and …\nMatches against a slice, checking the length and …\nSome value of type <code>T</code>.\nA literal containing the address of a <code>static</code>.\nTemporary lifetime information for THIR expressions\nA container for a THIR body.\nAn expression taking a reference to a thread local.\nA tuple, e.g. <code>(a, b, c, d)</code>.\nA <em>non-overloaded</em> unary operation. Note that here the deref …\nUsed to represent upvars mentioned in a closure/coroutine\nForces its contents to be treated as a value expression, …\nA type ascription on a value, e.g. <code>type_ascribe!(42, i32)</code> …\nAn unsafe binder cast on a value, e.g. …\nA local variable.\n<code>Foo(...)</code> or <code>Foo{...}</code> or <code>Foo</code>, where <code>Foo</code> is a variant name …\nA wildcard pattern: <code>_</code>.\nConstruct an unsafe binder, e.g. <code>wrap_binder(&amp;ref)</code>.\nA <code>yield</code> expression.\nZero value of the index.\nZero value of the index.\nZero value of the index.\nZero value of the index.\nZero value of the index.\nA literal of a ZST type.\nThe ADT we’re constructing.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nIf <code>Some(lt)</code>, indicates that the lifetime of this temporary …\nThe base, e.g. <code>Foo {x: 1, ..base}</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCall <code>f</code> on every “binding” in a pattern, e.g., on <code>a</code> in …\nThe trailing expression of the block, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nMust not be <code>NegInfinity</code>.\nHirId for lints.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this range covers the full extent of possible …\nWhether this a never pattern.\nkind of expression\nMust not be <code>PosInfinity</code>.\nThe pattern that appears in the parameter list, or None …\nWhether the pattern has a <code>PatKind::Error</code> nested within.\nWhether this param is <code>self</code>, and how it is bound.\nThe span of the block, including the opening braces, the …\nspan of the expression in the source\nThe statements in the blocK.\nWhether the block itself has a label. Used by <code>label: {}</code> …\nThe lifetime of this expression if it should be spilled …\nLifetime for temporaries as expected. This should be <code>None</code> …\nThe possibly inferred type.\nThe type of this expression\nSpan of the explicitly provided type, or None if inferred …\nOptional user-given args: for something like …\nVariance to use when relating the <code>user_ty</code> to the <strong>type of </strong>…\nThe variant of the ADT.\nWalk the pattern in left-to-right order.\nWalk the pattern in left-to-right order.\nThe arguments passed to the function.\nDefId of the closure/coroutine\nIf present, the <code>else_opt</code> expr is always <code>ExprKind::Block</code> …\nThe expression on which use is applied.\nThe span of the function, without the dot and receiver …\nWhether this is from an overloaded operator rather than a …\nThe function itself.\nWhether this coercion is written with an <code>as</code> cast in the …\nThis can be a named (<code>.foo</code>) or unnamed (<code>.0</code>) field.\nThe span of use, without the dot and receiver (e.g. <code>use</code> in …\nThe state variable that is updated. The …\n<code>then</code> is always <code>ExprKind::Block</code>.\nThe type of the function. This is often a <code>FnDef</code> or a <code>FnPtr</code>.\nType that the user gave to this expression\nType that the user gave to this expression\nHirId of the root variable\nVariant containing the field.\nWhether the pattern scrutinee needs to be borrowed in …\nDefId of the constant item.\nIs this the leftmost occurrence of the binding, i.e., is …\nThe pattern that the constant lowered to.\n<code>let pat: ty = &lt;INIT&gt; else { &lt;ELSE&gt; }</code>\nThe expression being evaluated in this statement.\nThe scope for the initialization itself; might be used as …\n<code>let pat: ty = &lt;INIT&gt;</code>\nThe lint level for this <code>let</code> statement.\n<code>let &lt;PAT&gt; = ...</code>\nThe scope for variables bound in this <code>let</code>; it covers this …\nThe scope for this statement; may be used as lifetime of …\nSpan of the <code>let &lt;PAT&gt; = &lt;INIT&gt;</code> part.\nEvery <code>walk_*</code> method uses deconstruction to access fields …\nInvokes <code>callback</code> on each immediate subpattern of <code>pat</code>, if …\nObligations to prove that a <code>Drop</code> or negative auto trait …\nAmbiguity can happen when monomorphizing during trans …\nAn array <code>[T; N]</code> can only be indexed (and is only …\nVarious cases where expressions must be <code>Sized</code> / <code>Copy</code> / etc.\nAssociated const.\ne.g., <code>async fn foo(&amp;self)</code>\nBlock implicit return\nSuccessful resolution for a builtin impl.\nDerived obligation (i.e. theoretical <code>where</code> clause) on a …\nDerived obligation (i.e. <code>where</code> clause) on an user-provided …\nChecking that the bounds of a trait’s associated type …\nThese are the error cases for <code>codegen_select_candidate</code>.\nObligation incurred due to a coercion.\nError derived when checking an impl item is compatible with\nError for a <code>ConstArgHasType</code> goal\nRequirement for a <code>const N: Ty</code> to implement <code>Ty: ConstParamTy</code>\nUse of a const ctor\nContains the error value\nChecking that this expression can be assigned to its …\nTypes of fields (other than the last, except for packed …\nCall to a const fn\nDerived obligation refined to point at a specific argument …\nGAT\ne.g., <code>fn foo&lt;A&gt;()</code>\nLike <code>WhereClauseinExpr</code>, but indexes into the …\nComputing common supertype in an if expression\nComputing common supertype of an if expression with no …\nDerived obligation (i.e. <code>where</code> clause) on an user-provided …\nDerived obligation (i.e. <code>where</code> clause) on an user-provided …\nGiven the successful resolution of an obligation, the …\nIdentifies a particular impl in the source, along with a …\nInline asm operand type must be <code>Sized</code>.\nIntrinsic has wrong type\nWhether a value can be extracted into a const. Used for …\nlanguage function has wrong type\nA let else block does not diverge\n<code>main</code> has wrong type\nComputing common supertype in the arms of a match …\nFrom <code>match_impl</code>. The cause for us having to match an impl, …\nMethod has something illegal.\nMethod receiver\nReasons a method might not be dyn-compatible.\nSome built-in impl we don’t need to differentiate. This …\nNot well classified or should be obvious from the span.\nA given constant couldn’t be evaluated.\nA built-in impl for trait objects. The index is only used …\nA type like <code>Box&lt;Foo&lt;&#39;a&gt; + &#39;b&gt;</code> is WF only if <code>&#39;b: &#39;a</code>.\nThe reason why we incurred this obligation; used for error …\nA compact form of <code>ObligationCauseCode</code>.\nContains the success value\nOpaque return type of this function\nComputing an opaque type’s hidden type caused an error …\nRepresents a bound for an opaque we are checking the …\nExceeded the recursion depth during type projection.\nUse the type of the parameter of the provided function. We …\nSuccessful resolution to an obligation provided by the …\nType error arising from type checking a pattern against an …\nInformation about the origin expression of a pattern, …\nA type like <code>&amp;&#39;a T</code> is WF only if <code>T: &#39;a</code>.\ne.g., <code>fn foo(&amp;self) -&gt; impl Sized</code>\ne.g., <code>fn foo(&amp;self, x: Self)</code>\ne.g., <code>fn foo(&amp;self) -&gt; Self</code>\n<code>[expr; N]</code> requires <code>type_of(expr): Copy</code>.\n<code>return</code> with no expression\n<code>return</code> with an expression\nWhen performing resolution, it is typically the case that …\n<code>static</code> items must have <code>Sync</code> type.\nAfter a closure impl has selected, its “outputs” were …\nArgument type must be <code>Sized</code>.\nReturn type of a call expression must be <code>Sized</code>.\nCaptured closure type must be <code>Sized</code>.\nConstant expressions must be sized.\nTypes live across coroutine yields must be <code>Sized</code>.\nReturn type must be <code>Sized</code>.\n<code>Self: Sized</code> declared on the trait.\nYield type must be <code>Sized</code>.\nA slice or array is WF only if <code>T: Sized</code>.\ne.g., <code>fn foo()</code>\n<code>S { ... }</code> must be <code>Sized</code>.\nSupertrait reference references <code>Self</code> an in illegal location\nThe trait pointed by <code>DefId</code> is dyn-incompatible.\nA built-in implementation of <code>Upcast</code> for trait objects to …\nA built-in impl that is considered trivial, without any …\n#[feature(trivial_bounds)] is not enabled\nA tuple is WF only if its middle elements are <code>Sized</code>.\n<code>(x1, .., xn)</code> must be <code>Sized</code>.\nUse the type of the provided definition.\nObligations emitted during the normalization of a free …\nThe selected impl has unconstrained generic parameters. …\nthe method’s receiver (<code>self</code> argument) can’t be …\nThe trait is not implemented.\nThis can trigger when we have a global bound that is not …\nOnly reachable if the <code>unsized_fn_params</code> feature is used. …\nImplSource identifying a particular impl.\nType of each variable must be <code>Sized</code>.\nWell-formed checking. If a <code>WellFormedLoc</code> is provided, then …\nDerived obligation for WF goals.\nThe ‘location’ at which we try to perform HIR-based wf …\nRepresents a clause that comes from a specific item. The …\nLike <code>WhereClause</code>, but also identifies the expression which …\ne.g., <code>fn foo(&amp;self) where Self: Clone</code>\nThe ID of the fn body that triggered this obligation. This …\n<code>None</code> for <code>ObligationCauseCode::Misc</code> (a common case, occurs ~…\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCreates a cause for obligations that are derived from …\nSpan of the <em>whole</em> match expr.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe <code>DefId</code> of the <code>impl</code> that gave rise to the <code>derived</code> …\nThe index of the derived predicate in the parent impl’s …\nThe <code>DefId</code> of the <code>impl</code> that gave rise to the <code>derived</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe parent trait had this cause.\nThe parent trait had this cause.\nThe trait predicate of the parent obligation that led to …\nThe trait predicate of the parent obligation that led to …\nReturns the base obligation, ignoring derived obligations.\nReturns the base obligation and the base trait predicate, …\nThe number of references that were peeled to produce …\nDoes the peeled expression need to be wrapped in …\nA span representing the scrutinee expression, with all …\nSpans of the previous arms except for those that diverge …\nExperimental types for the trait query interface. The …\nSpan of the scrutinee of the match (the matched value).\nCandidate selection. See the rustc dev guide for more …\nSource of the match, i.e. <code>match</code> or a desugaring.\nIs the expectation of this match expression an RPIT?\nThe node of the relevant argument in the function call.\nThe node of the function call.\nSpan of the repeat element.\nIf element is a <code>const fn</code> or const ctor we display a help …\nInformation about the <code>Span</code>, if it came from an expression, …\nThe obligation introduced by this argument.\nThe root expected type induced by a scrutinee or type …\nThe span of the scrutinee or type expression which caused …\nThe function to lookup the parameter in\nThe index of the parameter to use. Parameters are indexed …\nA set of constraints that need to be satisfied in order for\nResult of the …\nOutlives bounds are relationships between generic …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nTypes that could not be resolved: projections and params.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>true</code> if the type results from a dereference of a raw …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResult of the normalization.\nIf Some(T), a type autoderef reported an error on.\nTypes that are required to be alive in order for this type …\nIf, during the computation of the dtorck constraint, we …\nWe will generate CandidateSteps which are reachable via a …\nIf <code>true</code>, <code>steps</code> has been truncated due to reaching the …\nThe valid autoderef steps that could be found by following …\nNormalizes, and deeply normalizes in the new solver.\nNormalizes, but not in the new solver.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImplementation of an <code>AsyncFn</code>-family trait by one of the …\nImplementation of the <code>AsyncFnKindHelper</code> helper trait, which\nImplementation of an <code>AsyncIterator</code> trait by one of the …\nA builtin implementation for some specific traits, used in …\nImplementation of a <code>Fn</code>-family trait by one of the …\nImplementation of a <code>Coroutine</code> trait by one of the …\nEvaluation is known to be ambiguous – it <em>might</em> hold for …\nEvaluation failed because of recursion involving inference …\nEvaluation failed.\nEvaluation successful.\nEvaluation successful, but need to rerun because opaque …\nEvaluation successful, but there were unevaluated region …\nThe result of trait evaluation. The order is important …\nImplementation of a <code>Fn</code>-family trait by one of the anonymous\nImplementation of a <code>Future</code> trait by one of the coroutine …\nImplementation of an <code>Iterator</code> trait by one of the …\nMatching <code>dyn Trait</code> with a supertrait of <code>Trait</code>. The index …\nIndicates that trait evaluation caused overflow and in …\nThis is a trait matching with a projected type as <code>Self</code>, …\nThe selection process begins by considering all impls, …\nA built-in implementation for the <code>Sized</code> trait. This is …\nPerform trait upcasting coercion of <code>dyn Trait</code> to a …\nImplementation of transmutability trait.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this evaluation result is known to apply, …\nReturns <code>true</code> if this evaluation result is known to apply, …\nIndicates that a <code>impl Drop for Adt</code> is <code>const</code> or not.\nIf the self type is an alias type, e.g. an opaque type or …\nConst conditions that need to hold for <code>[const]</code> alias …\nPredicate required for an alias projection to be …\nWe failed due to ambiguity. This ambiguity can either be a …\nA builtin impl generated by the compiler. When adding a …\nA candidate that is registered only during coherence to …\nContains the error value\nAdditional constraints returned on success.\nWhy a specific goal has to be proven.\nA user written impl.\nWe’re proving a where-bound of an impl.\nInstantiating a higher-ranked goal and re-proving it.\nWhy we failed to evaluate a goal.\n<code>MetaSized</code> trait\nSome built-in impl we don’t need to differentiate. This …\nPreferred eagerly.\nIn case normalizing aliases in nested goals cycles, …\nA built-in impl for trait objects. The index is only used …\nContains the success value\nWe gave up due to an overflow, most often by hitting the …\nAn assumption from the environment. Stores a <code>ParamEnvSource</code>…\nOpaques that are defined in the inference context before a …\n<code>Sized</code> trait\nWhich sizedness trait - <code>Sized</code>, <code>MetaSized</code>? <code>PointeeSized</code> is …\nA built-in implementation of <code>Upcast</code> for trait objects to …\nA built-in impl that is considered trivial, without any …\nA nested goal required to prove that types are …\nUse this function to merge the certainty of multiple …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nAdditional constraints returned by this query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nData structure used to inspect trait solver behavior.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWe added a goal to the <code>EvalCtxt</code> which will get proven the …\nWhen evaluating a goal we also store the original values …\nA call to …\nA call to <code>probe</code> while proving the current goal. This is …\nProbe entered when normalizing the self ty during …\nTry to unify an opaque type with an existing key in the …\nA self-contained computation during trait solving. This …\nWhat kind of probe we’re in. In case the probe …\nUsed to do a probe to find out what projection type(s) …\nA trait goal was satisfied by an impl candidate.\nChecking that a rigid alias is well-formed.\nThe root inference context while proving a goal.\nLooking for param-env candidates that satisfy the trait …\nSome <code>data</code> together with information about how they relate …\nA candidate for proving a trait or alias-relate goal.\nUsed in the probe that wraps normalizing the non-self type …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat happened inside of this probe in chronological order.\nThis is always <code>ProbeKind::Root</code>.\nChildren of a given impl, grouped into blanket/non-blanket …\nA per-trait graph of impls in specialization order. At the …\nInformation about the most specialized definition of an …\nA node in the specialization graph is either an impl or a …\nWhat kind of overlap check are we doing – this exists …\nThe 1.0 rules (either types fail to unify, or where …\nJust check for negative impls, not for “where clause not …\nFeature-gated test: Stable, <em>or</em> there is an explicit …\nWalk up the specialization ancestors of a given impl, …\nBlanket impls associated with the trait.\nThe “root” impls are found by looking up the trait’s …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe node in the specialization graph containing the …\nThe “top-most” (ie. least specialized) specialization …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this definition is known to not be further …\nTries to find the associated item that implements …\nThe associated item described by this <code>LeafDef</code>.\nFinds the bottom-most (ie. most specialized) definition of …\nImpls of the trait.\nThe parent of a given impl, which is the <code>DefId</code> of the …\nAll impls have a parent; the “root” impls have as …\nAlgebraic data types (ADT). For example: structures, …\nThe definition of a user-defined type, e.g., a <code>struct</code>, <code>enum</code>…\nA projection, opaque type, free type alias, or inherent …\nSeparate from <code>ClauseKind::Projection</code> which is used for …\nA marker predicate that is always ambiguous. Used for …\nAnalysis includes type inference, checking that items are …\nAn anonymous region parameter for a given fn (&amp;T)\nAn anonymous region parameter for a given fn (&amp;T)\nAn array with the given length. Written as <code>[T; N]</code>.\nInformation about an associated item\nA list of <code>ty::AssocItem</code>s in definition order that allows …\n…\n<code>core::future::async_drop::async_drop_in_place::&lt;&#39;_, T&gt;</code>.\nAn enum to represent the compiler-side view of …\nE.g., <code>Send</code>.\nThe primitive boolean type. Written as <code>bool</code>.\nThe behavior during MIR borrowck is identical to …\nBound const variable, used only when preparing a trait …\nBound type variable, used to represent the <code>&#39;a</code> in …\nA delegate used when instantiating bound vars.\nThe fields of any kind of aggregate. Structs, tuples and …\nUpvar is captured by reference.\nUpvar is captured by use. This is true when the closure is …\nUpvar is captured by value. This is always true when the …\nCaptures are represented using fields inside a structure. …\nA “canonicalized” type <code>V</code> is one where all free …\nRust actually has more than one category of type variables;\nCanonical user type annotation.\nMapping of type annotation indices to canonical user type …\nInformation about a canonical variable that is included …\nA set of values corresponding to the canonical variables …\nPart of <code>MinCaptureInformationMap</code>; describes the capture …\nA composite describing a <code>Place</code> that is captured by a …\nThe primitive character type; holds a Unicode scalar value …\nA subset of predicates which can be assumed by the trait …\nProve a clause\nCompiler-generated <code>&lt;T as Clone&gt;::clone</code> implementation.\nThe anonymous type of a closure. Used to represent the …\nA closure can be modeled as a struct that looks like:\nStruct returned by <code>split()</code>.\nAnonymous region for the implicit env pointer parameter to …\nAnonymous region for the implicit env pointer parameter to …\nRepresents the various closure traits in the language. This\n<code>&lt;[FnMut/Fn closure] as FnOnce&gt;::call_once</code>.\n<code>T1</code> coerced to <code>T2</code>\nWhen checking whether impls overlap, we check whether any …\nImagine you have a function <code>F: FnOnce(&amp;[T]) -&gt; R</code>, plus an …\nSome kind of const inference variable.\n<code>Type: const Trait</code>\nEnsures that a const generic argument to a parameter …\n<code>[const]</code> bounds for a given item. This is represented using …\nConstants must be equal. The first component is the const …\nConstant initializer must evaluate successfully.\nA type for representing any integer. Only used for …\n<code>Ok(Err(ty))</code> indicates the constant was fine, but the …\nA <strong><code>const</code></strong> <strong>v</strong>ariable <strong>ID</strong>.\n<code>&lt;[FnMut/Fn coroutine-closure] as FnOnce&gt;::call_once</code>\nThe anonymous type of a coroutine. Used to represent the …\nSimilar to <code>ClosureArgs</code>; see the above documentation for …\nThe anonymous type of a closure. Used to represent the …\nSee docs for explanation of how each argument is used.\nA type representing the types stored inside a coroutine. …\nA map for the local crate mapping each type to a vector of …\nThe crate outlives map is computed during typeck and …\nThe crate variances map is computed during typeck and …\nThis is used to get a reference to a <code>GlobalCtxt</code> if one is …\nA De Bruijn index is a standard means of representing …\nParameter attributes that can only be determined by …\nGiven generic arguments, could they be unified after …\nWhether we’re currently in HIR typeck or MIR borrowck.\nA hashmap which only starts hashing after ignoring the …\nThe constituent parts of a type level constant of kind ADT …\n<code>core::ptr::drop_in_place::&lt;T&gt;</code>.\nAn unsized <code>dyn Trait</code> object\nTrait must be dyn-compatible.\nSpecifies how a trait object is represented.\nA trait object. Written as …\nContains the error value\nA placeholder for a const which could not be computed; …\nA placeholder for a type which could not be computed; this …\nExplicit value for this variant, i.e., <code>X = 123</code>. The <code>DefId</code> …\nUnevaluated non-const-item, used by …\nThis trait is implemented for every folding traversal. …\nThe same as <code>TyCtxtFeed</code>, but does not contain a <code>TyCtxt</code>. Use …\nFloating-point type variable <code>?F</code> (that can only be unified …\nA primitive floating-point type. For example, <code>f64</code>.\nA floating-point type variable (<code>{float}</code>).\nA <strong>float</strong>ing-point (<code>f32</code> or <code>f64</code>) type <strong>v</strong>ariable <strong>ID</strong>.\nThe anonymous type of a function declaration/definition. …\nA simple delegate taking 3 mutable functions. The used …\nA pointer to a function. Written as <code>fn() -&gt; i32</code>.\nThe <code>ReifyShim</code> was created to produce a function pointer. …\nCompiler-generated <code>&lt;T as FnPtr&gt;::addr</code> implementation.\n<code>&lt;fn() as FnTrait&gt;::call_*</code> (generated <code>FnTrait</code> …\nAn unsized FFI type that is opaque to Rust. Written as …\nA type alias that actually checks its trait bounds. …\nA top level const item not part of a trait or impl.\nThis struct contains information regarding a free …\nA free type alias that actually checks its trait bounds. …\nA fresh const variable. See <code>infer::freshen</code> for more …\nLike <code>FreshTy</code>, but as a replacement for <code>FloatVar</code>.\nLike <code>FreshTy</code>, but as a replacement for <code>IntVar</code>.\nA <code>FreshTy</code> is one that is generated as a replacement for an …\nProxy shim for async drop of future (def_id, proxy_cor_ty, …\n<code>feature(generic_const_exprs)</code> anon consts are allowed to …\nGeneral type variable <code>?T</code> that can be unified with …\nAn entity in the Rust type system, which can be one of …\nList of generic arguments that are gonna be used to …\nBounds on generics.\nInformation about the formal type/lifetime parameters …\nSee TyCtxt for details about this type.\nDoes this have <code>Alias</code> or <code>ConstKind::Unevaluated</code>?\nDoes this have any binders with bound vars (e.g. that need …\nDoes this have any bound variables? Used to check if a …\nDoes this have any <code>ConstKind::Bound</code> consts?\nDoes this value have <code>InferConst::Fresh</code>?\nDoes this have <code>ConstKind::Infer</code>?\nDoes this have <code>ConstKind::Param</code>?\nDoes this have <code>ConstKind::Placeholder</code>?\nDoes this have <code>ConstKind::Unevaluated</code>?\nIs an error type/lifetime/const reachable?\n<code>true</code> if there are “names” of types and regions and so …\n<code>true</code> if there are “names” of regions and so forth that …\nDoes this have any region that “appears free” in the …\nDoes this have inference variables? Used to determine …\nDoes this have placeholders?\nDoes this have any <code>ReBound</code> regions?\nDoes this have any <code>ReErased</code> regions?\nDoes this have <code>ReVar</code>?\nDoes this have <code>ReEarlyParam</code>?\nDoes this have <code>RePlaceholder</code>?\nDoes this have any <code>Bound</code> types?\nDoes this type have any coroutines in it?\nDoes this have <code>Free</code> aliases?\nDoes this value have …\nDoes this have <code>Infer</code>?\nDoes this have <code>Inherent</code>?\nDoes this have <code>Opaque</code>?\nDoes this have <code>Param</code>?\nDoes this have <code>Placeholder</code>?\nDoes this have <code>Projection</code>?\nDuring writeback in typeck, we don’t care about regions …\nEnforces the constness of the predicate we’re calling. …\nIndicates whether the field list of this variant is …\nData must be immutable and is aliasable.\nUseful source information about where a desugared …\nInfer the value of the const.\nA type variable used during type checking.\nAn inference variable for a const, for use in const …\nA placeholder for a type that hasn’t been inferred yet.\nAn associated type in an inherent <code>impl</code>\nAn associated const in an inherent <code>impl</code>\nAn associated type in an inherent <code>impl</code>\nAn inline const is modeled like\nStruct returned by <code>split()</code>.\nAn <code>InstanceKind</code> along with the args that are needed to …\nRepresents the bounds declared on a particular set of type …\nIntegral type variable <code>?I</code> (that can only be unified with …\nA primitive signed integer type. For example, <code>i32</code>.\nAn integral type variable (<code>{integer}</code>).\nAn <strong>int</strong>egral (<code>u32</code>, <code>i32</code>, <code>usize</code>, etc.) type <strong>v</strong>ariable <strong>ID</strong>.\nAn intrinsic <code>fn</code> item (with<code>#[rustc_intrinsic]</code>).\nWe switched our variance because a generic argument occurs …\nA user-defined callable item.\nThis is the initial value used when doing upvar inference.\nThe parameter representation of late-bound function …\nWhen liberating bound regions, we map their <code>BoundRegionKind</code>\nintegers, <code>bool</code>, <code>char</code> are represented as scalars. See the …\nA trait implemented for all <code>X&lt;&#39;a&gt;</code> types that can be safely …\n<code>List&lt;T&gt;</code> is a bit like <code>&amp;[T]</code>, but with some critical …\nA <code>List</code> that additionally stores type information inline to …\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nstable <code>min_const_generics</code> anon consts are not allowed to …\nFinds the max universe present\n<code>Type: [const] Trait</code>\n<code>MetaSized</code> trait\nGiven the closure DefId this map provides a map of root …\nPart of <code>MinCaptureInformationMap</code>; List of <code>CapturePlace</code>s.\nThe movability of a coroutine / closure literal: whether a …\nThe movability of a coroutine / closure literal: whether a …\nMust not contain self-references, <code>Unpin</code>.\nMust not contain self-references, <code>Unpin</code>.\nData is mutable and not aliasable.\nLate-bound regions that appear in the AST.\nLate-bound regions that appear in the AST.\nAn anonymous region parameter with a <code>Symbol</code> name.\nAn anonymous region parameter with a <code>Symbol</code> name.\n<code>impl !Trait for Type</code>\n<code>Type: !Trait</code>\nThe never type <code>!</code>.\nanon consts outside of the type system, e.g. enum …\nNo additional information - this is the default. We will …\nThis should only be used inside of the new solver for …\nContains the success value\nAn opaque type (usually from <code>impl Trait</code> in type aliases or …\nAn opaque type (usually from <code>impl Trait</code> in type aliases or …\nCoroutine has been poisoned.\nA const generic parameter.\nA type parameter; for example, <code>T</code> in <code>fn f&lt;T&gt;(x: T) {}</code>.\nWhen interacting with the type system we must provide …\nA pattern newtype. Takes any type and restricts its valid …\nThese impls are always allowed to overlap.\nThe “placeholder index” fully defines a placeholder …\nA placeholder const - universally quantified higher-ranked …\nA placeholder type, used during higher ranked subtyping to …\nA “placeholder” that represents “any const”.\nA “placeholder” that represents “any region”. …\nA “placeholder” that represents “any type”.\n<code>impl Trait for Type</code>\n<code>Type: Trait</code>\nAfter analysis, mostly during codegen and MIR …\nAny analysis after borrowck for a given body should be …\nA statement that can be proven by a trait solver. This …\nPolarity for a trait predicate. May either be negative or …\nA projection <code>&lt;Type as Trait&gt;::AssocType</code>. Can get …\nE.g., <code>Iterator::Item = T</code>.\n<code>where &lt;T as TraitRef&gt;::Name == X</code>, approximately. See the …\nAn unevaluated const coming from an associated const.\nA projection <code>&lt;Type as Trait&gt;::AssocType</code>. Can get …\nSimilar to <code>CanonicalInput</code>, this carries the <code>typing_mode</code> …\nVisible everywhere (including in other crates).\nNumber of variants to reserve in coroutine state. …\nCoroutine has returned or is completed.\nA raw pointer. Written as <code>*mut T</code> or <code>*const T</code>\nA higher-ranked region. These represent either late-bound …\nA region parameter; for example <code>&#39;a</code> in …\nErased region, used by trait selection, in MIR and during …\nA region that resulted from some other error. Used …\nLate-bound function parameters are represented using a …\nA placeholder region – the higher-ranked version of …\nStatic data that has an “infinite” lifetime. Top in …\nA region variable. Should not exist outside of type …\nA reference; a pointer with an associated lifetime. …\nUse this rather than <code>RegionKind</code>, whenever possible.\nRegion variable <code>&#39;?R</code>.\nFolds over the substructure of a type, visiting its …\n<code>where &#39;a: &#39;r</code>\nA <strong>region</strong> <strong>v</strong>ariable <strong>ID</strong>.\nA <strong>region</strong> <strong>v</strong>ariable <strong>ID</strong>.\nDescribes why a <code>ReifyShim</code> was created. This is needed to …\n<code>fn()</code> pointer where the function itself cannot be turned …\nThe previous variant’s discriminant plus one. For …\nanon consts used as the length of a repeat expr are …\n<code>#[rustc_reservation_impl] impl Trait for Type</code>\nResolutions that should only be used for lowering. This …\nVisible only in the given crate-local module.\nPart of <code>MinCaptureInformationMap</code>; Maps a root variable to …\nThe associated type comes from an RPITIT. It has no name, …\nInformation on a pattern incompatible with Rust 2024, for …\n<code>RvalueScopes</code> is a mapping from sub-expressions to <em>extended</em> …\nDoes this value have parameters/placeholders/inference …\nThe raw bytes of a simple value.\n<code>Sized</code> trait\nWhich sizedness trait - <code>Sized</code>, <code>MetaSized</code>? <code>PointeeSized</code> is …\nThe pointee of an array slice. Written as <code>[T]</code>.\nMay contain self-references, <code>!Unpin</code>.\nMay contain self-references, <code>!Unpin</code>.\nThe pointee of a string slice. Written as <code>str</code>.\n<code>T1 &lt;: T2</code>\nCompiler-generated accessor for thread locals which …\nE.g., <code>Iterator</code>.\nCorresponds to <code>where Foo: Bar&lt;A, B, C&gt;</code>. <code>Foo</code> here would be …\nA <code>DefId</code> of a trait.\nUsed for types that are <code>Copy</code> and which <strong>do not care arena </strong>…\nA tuple type. For example, <code>(i32, bool)</code>.\nUse this rather than <code>TyKind</code>, whenever possible.\nSome kind of type inference variable.\nThe central data structure of the compiler. It stores …\nThis struct should only be created by <code>create_def</code>.\nA type variable.\nA <strong>ty</strong>pe <strong>v</strong>ariable <strong>ID</strong>.\nFlags that we track on types. These flags are propagated …\nThis trait is implemented for every type that can be …\nThis trait is implemented for every infallible folding …\nThe canonical type is the result of <code>type_of(def_id)</code> with …\n<code>where T: &#39;r</code>\nThis trait is implemented for every type that can be …\nThis trait is implemented for every visiting traversal. …\nThe environment in which to do trait solving.\nCoroutine has not been resumed yet.\nA primitive unsigned integer type. For example, <code>u32</code>.\nAn unnormalized const item such as an anon const or assoc …\nAn unevaluated anonymous constants.\nData must be immutable but not aliasable. This kind of …\n“Universes” are used during type- and trait-checking …\nAn unsafe binder type.\nSupport marking impl as unstable.\nAn <code>Into</code>-like trait that takes <code>TyCtxt</code> to perform …\nA <code>From</code>-like trait that takes <code>TyCtxt</code> to perform …\nInformation describing the capture of an upvar. This is …\nUpvars do not get their own <code>NodeId</code>. Instead, we use the …\nStores the user-given args to reach some fully qualified …\nSpecifies the user-given self type. In the case of a path …\nA user-given type annotation attached to a constant. These …\n<code>&lt;T as Trait&gt;::method</code> where <code>method</code> receives unsizeable …\nAn interned valtree. Use this rather than <code>ValTreeKind</code>, …\nThis datastructure is used to represent the value of …\nA type-level constant value.\nUsed to hold computed value.\nInfer the value of the const.\nExtra information about why we ended up with a particular …\nDefinition of a variant – a struct’s fields or an enum …\nDynamic dispatch to <code>&lt;dyn Trait as Trait&gt;::fn</code>.\nSimilar to the <code>Try</code> trait, but also implemented for <code>()</code>.\nThis <code>ReifyShim</code> was created to populate a vtable. …\nNo syntax: <code>T</code> well-formed.\nA helper type that you can wrap round your own type in …\nZero value of the index.\nZero value of the index.\nZero value of the index.\nZero value of the index.\nZero value of the index.\nZero value of the index.\nZero value of the index.\nZero value of the index.\nAlways <code>RustCall</code>\nA subset of a mir body used for const evaluability …\n[query description - consider adding a doc-comment!] …\nA list of types where the ADT requires async drop if and …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nA list of types where the ADT requires drop if and only if …\n[query description - consider adding a doc-comment!] …\nA list of types where the ADT requires drop if and only if …\n[query description - consider adding a doc-comment!] …\nTuple containing the types of closure captures after the …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nReturns all diagnostic items defined in all crates.\nReturns an iterator containing all impls for <code>trait_def_id</code>.\nReturn all <code>impl</code> blocks in the current crate.\n[query description - consider adding a doc-comment!] alloc …\nStores memory for globals (statics/consts).\n[query description - consider adding a doc-comment!] …\nThe root query triggering all analysis passes like typeck …\nCreates a pair of param-env and value for use in queries.\n[query description - consider adding a doc-comment!] …\nThe arena that types, regions, etc. are allocated from.\nLifetime and type parameters from the enclosing function, …\nThe parameters of the associated or opaque item.\nThe parameters of the associated or opaque type.\nThe args for the item as given by the user.\nGeneric parameters from the enclosing item, concatenated …\nGet the article (“a” or “an”) to use with this …\nCombine this typing environment with the given <code>value</code> to be …\nThe polarity marker in front of the impl trait ref if …\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\n[query description - consider adding a doc-comment!] …\nIf the given <code>DefId</code> is an associated item, returns the <code>DefId</code>…\nMaps from a trait/impl item to the trait/impl item “…\nMaps from an impl/trait or struct/variant <code>DefId</code> to a list …\nCollects the associated items defined on a trait or impl.\nGiven an <code>fn_def_id</code> of a trait or a trait implementation:\nGiven the <code>item_def_id</code> of a trait or impl, return a mapping …\nReturns the types assumed to be well formed while “inside…\nWe need to store the assumed_wf_types for an RPITIT so …\nReturns layout of a <code>async_drop_in_place::{closure}</code> …\nGiven a <code>DefId</code> of one of the <code>AsyncFn</code>, <code>AsyncFnMut</code> or …\nGiven a <code>ty::ClosureKind</code>, get the <code>DefId</code> of its …\n[query description - consider adding a doc-comment!] …\nReturns a transparent wrapper for <code>TyCtxt</code> which uses <code>span</code> …\nReturns the attributes on the item at <code>def_id</code>.\n[query description - consider adding a doc-comment!] …\nWhether any binding modifiers occur under a non-<code>move</code> …\nWhether any <code>&amp;</code> or <code>&amp;mut</code> patterns occur under a non-<code>move</code> …\nTuple containing the types of closure captures before the …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the type of <code>*ty</code>.\nReturns the type of <code>ty[i]</code>.\nAlways false\nCalculate the async destructor of a given type.\nCalculate the destructor of a given type.\nCaller bounds are <code>Obligation</code>s that the caller must …\nReturns <code>true</code> if <code>self</code> can name a name from <code>other</code> – in …\nReturns <code>true</code> if <code>self</code> cannot name some names from <code>other</code> – …\nCapture mode that was selected\nExpr Id pointing to use that resulted in selecting the …\nThis function is analogous to <code>check_optional_stability</code> but …\n[query description - consider adding a doc-comment!] …\nThis query checks the fulfillment of collected lint …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nChecks the attributes in the module.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nChecks for uses of unstable APIs in the module.\nPerform monomorphization-time checking on this item. This …\nLike <code>check_stability</code>, except that we permit items to have …\nUsed in case <code>mir_borrowck</code> fails to prove an obligation. We …\n[query description - consider adding a doc-comment!] …\nChecks if an item is stable or error out.\nChecks if an item is stable or error out.\nChecks well-formedness of tail calls (<code>become f()</code>).\nUnsafety-check this <code>LocalDefId</code>.\n[query description - consider adding a doc-comment!] …\nUnsafety-check this <code>LocalDefId</code>.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nLint against <code>extern fn</code> declarations having incompatible …\nCaches the instantiation of a canonical binder given a set …\nGiven the <code>DefId</code> and args a closure, creates the type of …\nTracks the fake reads required for a closure and the …\nRecords the reasons that we picked the kind of each …\nRepresents the maximum calling capability of the closure.\nRepresents the maximum calling capability of the closure.\nTracks the minimum captures required for a closure; see …\nReturns names of captured upvars for closures and …\nCaptures the closure’s signature. This closure signature …\nContains the data for evaluating the effect of feature …\n[query description - consider adding a doc-comment!] …\nThis module contains some shared code for encoding and …\nReturns the <code>CodegenFnAttrs</code> for the item at <code>def_id</code>.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nCaches <code>CoerceUnsized</code> kinds for impls on custom types.\nFor every coercion cast we add the HIR node ID of the cast …\n[query description - consider adding a doc-comment!] …\nProduce a result of type <code>Self::Output</code> from <code>iter</code>. The …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nThis takes the def-id of an associated item from a impl of …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAll the opaque types that have hidden types set by this …\nMapping from ident span to path span for paths that don’…\nGetting a &amp;core::panic::Location referring to a span.\nCompute the conditions that need to hold for a …\nEvaluate a constant to a <code>ConstValue</code>.\nEvaluate a constant to a type-level constant.\nEvaluates a constant without providing any generic …\nEvaluates a constant without providing any generic …\nResolves and evaluates a constant.\nReturns the <em>default</em> of the const pararameter given by <code>DefId</code>…\nWhether the intrinsic can be invoked from stable const fn\nReturns the constness of the function-like definition …\nCommon consts, pre-interned for your convenience.\nWhether all set bits in a source flags value are also set …\nChecks whether a type recursively contains another type\nWhether all set bits in a source flags value are also set …\nChecks whether a type recursively contains any closure\nType context book-keeping.\nThe body of the coroutine, modified to take its upvars by …\na function pointer that has the shape …\n[query description - consider adding a doc-comment!] Given …\n[query description - consider adding a doc-comment!] …\nReturns <code>Some(coroutine_kind)</code> if the node pointed to by …\nReturns layout of a coroutine. Layout might be unavailable …\nStores the predicates that apply on coroutine witness …\nChecks for the nearest <code>#[coverage(off)]</code> or <code>#[coverage(on)]</code> …\nScans through a function’s MIR after MIR optimizations, …\nGets the paths where the crate came from in the file …\n[query description - consider adding a doc-comment!] the …\n[query description - consider adding a doc-comment!] …\nGets the hash for the host proc macro. Used to support -Z …\nCollects all incoherent impls for the given crate and type.\nGets a complete map from all types to their inherent impls.\nChecks all types in the crate for overlap in their …\nChecks all types in the crate for overlap in their …\nGets the name of the crate.\nGets a map with the variances of every item in the local …\nAll available crates in the graph, including those that …\nOnly used in the resolver to register the <code>CRATE_DEF_ID</code> …\n[query description - consider adding a doc-comment!] …\n<code>DefId</code> that identifies the variant’s constructor. If this …\nThe first <code>size</code> bytes of <code>data</code> are the value. Do not try to …\nData layout specification for the current target.\nAssert that the args from an <code>ExistentialTraitRef</code> or …\nAssert that the args from an <code>ExistentialTraitRef</code> or …\nReturns the debugger visualizers defined for this crate. …\n[query description - consider adding a doc-comment!] …\nQuery and get an English description for the item’s kind.\nGets an English article for the <code>TyCtxt::def_descr</code>.\nThe <code>DefId</code> of the <code>TraitItem</code> or <code>ImplItem</code> for the associated …\nThe <code>DefId</code> of the <code>TraitItem</code> or <code>ImplItem</code> for the associated …\n<code>DefId</code> that identifies the variant itself. If this variant …\nGets the span for the identifier of the definition.\n[query description - consider adding a doc-comment!] …\nGet an English description for the item’s kind.\nGets an English article for the <code>TyCtxt::def_kind_descr</code>.\nConverts a <code>DefPathHash</code> to its corresponding <code>DefId</code> in the …\nReturns a string identifying this <code>DefId</code>. This string is …\nFor this one we determine the appropriate namespace for …\nGets the span for the definition.\nReturns whether the field corresponding to the <code>DefId</code> has a …\nReturns whether the impl or associated function has the …\nReturns the lang items defined in another crate by loading …\nInformation about functions signatures for delegation …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nReturns the set of types that are required to be alive in …\nDestructures array, ADT or tuple constants into the …\nPerforms an HIR-based well-formed check on the item with …\nReturns the diagnostic items defined in a crate.\nDiagnostics related methods for <code>Ty</code>.\nThe <code>DefId</code> of the struct, enum or union item.\nThe <code>DefId</code> of the destructor method\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nChecks for the nearest <code>#[sanitize(xyz = &quot;off&quot;)]</code> or …\nDiscriminant of this variant.\nThe type of the state discriminant used in the coroutine …\nThe type of the state discriminant used in the coroutine …\nThe discriminant for the given variant. Panics if the …\nThe discriminant for the given variant. Panics if the …\nIf the type contains variants, returns the variant for …\nReturns the type of the discriminant of this type.\nThe set of all discriminants for the coroutine, enumerated …\nThe set of all discriminants for the coroutine, enumerated …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nDo not call this query directly: invoke …\nCreates dummy var values which should not be used in a …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nPerforms part of the privacy check and computes effective …\nGet a flags value with all bits unset.\nConstruct a trait environment suitable for contexts where …\nGet a flags value with all bits unset.\n[query description - consider adding a doc-comment!] …\nWrapper that calls queries in a special “ensure done” …\nWrapper that calls queries in a special “ensure OK” …\nIdentifies the entry-point (e.g., the <code>main</code> function) for a …\nTracked access to environment variables.\nErases regions from <code>ty</code> to yield a new type. Normally you …\nEvaluates the default-impl stability of an item.\nEvaluates the stability of an item.\nEvaluates the stability of an item.\nEvaluate a static’s initializer, returning the …\nEvaluates a constant and returns the computed allocation.\nEvaluates const items or anonymous constants into a …\nEvaluate a constant and convert it to a type level …\nDo not call this query directly: invoke …\nCaches the results of trait evaluation. This cache is used …\nExpand any free alias types contained within the given …\nPanics if called on any type other than <code>Box&lt;T&gt;</code>.\nReturns <code>ty::VariantDef</code> if <code>res</code> refers to a struct, or …\nCompute the const bounds that are implied for a …\nThe predicates of the trait that are implied during …\nReturns the explicitly user-written <em>bounds</em> on the …\nReturns the explicitly user-written <em>bounds</em> that share the …\nReturns the explicitly user-written <em>predicates</em> of the …\nReturns the explicitly user-written <em>super-predicates</em> of …\nThe Ident is the name of an associated type.The query …\n[query description - consider adding a doc-comment!] …\nItem with a given <code>LocalDefId</code> was defined during macro …\n[query description - consider adding a doc-comment!] …\nThe list of generic symbols exported from the given crate.\nThe list of non-generic symbols exported from the given …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns <code>true</code> if a type that impls this closure kind must …\n[query description - consider adding a doc-comment!] …\nGets the extra data to put in each output filename for a …\nLifetime parameters that lowering will have to introduce.\n[query description - consider adding a doc-comment!] …\nIn order to break cycles involving <code>AnonConst</code>, we need to …\nCan only be fed before queries are run, and is thus exempt …\nResolved field indices for field accesses in expressions (…\nReturns <code>true</code> if the field list of this variant is …\nFields of this variant.\nReturns the deepest <code>async_drop_in_place::{closure}</code> …\n[query description - consider adding a doc-comment!] …\nThis field provides fast access to information that is …\nFlags of the ADT (e.g., is this a struct? is this …\nFlags of the variant (e.g. is field list non-exhaustive)?\nFlips polarity by turning <code>Positive</code> into <code>Negative</code> and …\nCompute a <code>FnAbi</code> suitable for indirect calls, i.e. to <code>fn</code> …\nCompute a <code>FnAbi</code> suitable for declaring/defining an <code>fn</code> …\n[query description - consider adding a doc-comment!] …\nComputes the signature of the function.\nGiven a <code>DefId</code> of one of the <code>Fn</code>, <code>FnMut</code> or <code>FnOnce</code> traits, …\nGiven a <code>ty::ClosureKind</code>, get the <code>DefId</code> of its …\nThe entry point for folding. To fold a value <code>t</code> with a …\nIterate over every impl that could possibly match the self …\nReturns a list of all <code>extern</code> blocks of a crate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.")