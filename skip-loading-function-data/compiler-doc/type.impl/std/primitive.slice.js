(function() {
    var type_impls = Object.fromEntries([["rustc_attr_parsing",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CZeroSlice%3CT%3E%3E-for-%26%5B%3CT+as+AsULE%3E::ULE%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/zerovec/slice.rs.html#581\">Source</a><a href=\"#impl-AsRef%3CZeroSlice%3CT%3E%3E-for-%26%5B%3CT+as+AsULE%3E::ULE%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/zerovec/slice/struct.ZeroSlice.html\" title=\"struct zerovec::zerovec::slice::ZeroSlice\">ZeroSlice</a>&lt;T&gt;&gt; for &amp;[&lt;T as <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.AsULE.html#associatedtype.ULE\" title=\"type zerovec::ule::AsULE::ULE\">ULE</a>]<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/zerovec/slice.rs.html#582\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/zerovec/slice/struct.ZeroSlice.html\" title=\"struct zerovec::zerovec::slice::ZeroSlice\">ZeroSlice</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<ZeroSlice<T>>","rustc_attr_parsing::attributes::AcceptMapping"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143894\" title=\"Tracking issue for const_default\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/slice/mod.rs.html#5125\">Source</a></span><a href=\"#impl-Default-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/mod.rs.html#5127\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Creates an empty slice.</p>\n</div></details></div></details>","Default","rustc_attr_parsing::attributes::AcceptMapping"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-%26%5BE%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#245-249\">Source</a><a href=\"#impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-%26%5BE%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E, F&gt; <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::encode::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;<a class=\"struct\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/varzerovec/slice/struct.VarZeroSlice.html\" title=\"struct zerovec::varzerovec::slice::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[E]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    E: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::encode::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;T&gt;,\n    F: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/varzerovec/components/trait.VarZeroVecFormat.html\" title=\"trait zerovec::varzerovec::components::VarZeroVecFormat\">VarZeroVecFormat</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#251\">Source</a><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\" class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#257\">Source</a><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#261\">Source</a><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_write\" class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" title=\"method zerovec::ule::encode::EncodeAsVarULE::encode_var_ule_len::encode_var_ule_len\"><code>Self::encode_var_ule_len()</code></a></div></details></div></details>","EncodeAsVarULE<VarZeroSlice<T, F>>","rustc_attr_parsing::attributes::AcceptMapping"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-%26%5BT%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#179-181\">Source</a><a href=\"#impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::encode::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;<a class=\"struct\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/zerovec/slice/struct.ZeroSlice.html\" title=\"struct zerovec::zerovec::slice::ZeroSlice\">ZeroSlice</a>&lt;T&gt;&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#183\">Source</a><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\" class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#189\">Source</a><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#193\">Source</a><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_write\" class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" title=\"method zerovec::ule::encode::EncodeAsVarULE::encode_var_ule_len::encode_var_ule_len\"><code>Self::encode_var_ule_len()</code></a></div></details></div></details>","EncodeAsVarULE<ZeroSlice<T>>","rustc_attr_parsing::attributes::AcceptMapping"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#21\">Source</a></span><a href=\"#impl-IntoIterator-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#22\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;'a T</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#23\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'a, T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#25\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'a, T&gt;</h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","rustc_attr_parsing::attributes::AcceptMapping"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoSliceIdx%3CI,+%5BT%5D%3E-for-I\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustc_index/idx.rs.html#55\">Source</a><a href=\"#impl-IntoSliceIdx%3CI,+%5BT%5D%3E-for-I\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; <a class=\"trait\" href=\"rustc_index/idx/trait.IntoSliceIdx.html\" title=\"trait rustc_index::idx::IntoSliceIdx\">IntoSliceIdx</a>&lt;I, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a>&gt; for I<div class=\"where\">where\n    I: <a class=\"trait\" href=\"rustc_index/idx/trait.Idx.html\" title=\"trait rustc_index::idx::Idx\">Idx</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/rustc_index/idx.rs.html#56\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"rustc_index/idx/trait.IntoSliceIdx.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section><section id=\"method.into_slice_idx\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_index/idx.rs.html#58\">Source</a><a href=\"#method.into_slice_idx\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_index/idx/trait.IntoSliceIdx.html#tymethod.into_slice_idx\" class=\"fn\">into_slice_idx</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></div></details>","IntoSliceIdx<I, [T]>","rustc_attr_parsing::attributes::AcceptMapping"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BU;+N%5D%3E-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/array/equality.rs.html#80-82\">Source</a></span><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.array.html\">[U; N]</a>&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/array/equality.rs.html#85\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/array/equality.rs.html#89\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[U; N]>","rustc_attr_parsing::attributes::AcceptMapping"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/alloc/vec/partial_eq.rs.html#25\">Source</a></span><a href=\"#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A&gt;&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/alloc/vec/partial_eq.rs.html#25\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/alloc/vec/partial_eq.rs.html#25\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Vec<U, A>>","rustc_attr_parsing::attributes::AcceptMapping"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ZeroFrom%3C'zf,+%5BT%5D%3E-for-%26%5BT%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerofrom/0.1.6/src/zerofrom/zero_from.rs.html#125\">Source</a><a href=\"#impl-ZeroFrom%3C'zf,+%5BT%5D%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'zf, T&gt; <a class=\"trait\" href=\"https://docs.rs/zerofrom/0.1.6/zerofrom/zero_from/trait.ZeroFrom.html\" title=\"trait zerofrom::zero_from::ZeroFrom\">ZeroFrom</a>&lt;'zf, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a>&gt; for &amp;'zf <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerofrom/0.1.6/src/zerofrom/zero_from.rs.html#127\">Source</a><a href=\"#method.zero_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerofrom/0.1.6/zerofrom/zero_from/trait.ZeroFrom.html#tymethod.zero_from\" class=\"fn\">zero_from</a>(other: &amp;'zf <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a>) -&gt; &amp;'zf <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Clone the other <code>C</code> into a struct that may retain references into <code>C</code>.</div></details></div></details>","ZeroFrom<'zf, [T]>","rustc_attr_parsing::attributes::AcceptMapping"]]],["rustc_hir",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CZeroSlice%3CT%3E%3E-for-%26%5B%3CT+as+AsULE%3E::ULE%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/zerovec/slice.rs.html#581\">Source</a><a href=\"#impl-AsRef%3CZeroSlice%3CT%3E%3E-for-%26%5B%3CT+as+AsULE%3E::ULE%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/zerovec/slice/struct.ZeroSlice.html\" title=\"struct zerovec::zerovec::slice::ZeroSlice\">ZeroSlice</a>&lt;T&gt;&gt; for &amp;[&lt;T as <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.AsULE.html#associatedtype.ULE\" title=\"type zerovec::ule::AsULE::ULE\">ULE</a>]<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/zerovec/slice.rs.html#582\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/zerovec/slice/struct.ZeroSlice.html\" title=\"struct zerovec::zerovec::slice::ZeroSlice\">ZeroSlice</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<ZeroSlice<T>>","rustc_hir::hir::GenericBounds"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143894\" title=\"Tracking issue for const_default\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/slice/mod.rs.html#5125\">Source</a></span><a href=\"#impl-Default-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/mod.rs.html#5127\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Creates an empty slice.</p>\n</div></details></div></details>","Default","rustc_hir::hir::GenericBounds"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-%26%5BE%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#245-249\">Source</a><a href=\"#impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-%26%5BE%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E, F&gt; <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::encode::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;<a class=\"struct\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/varzerovec/slice/struct.VarZeroSlice.html\" title=\"struct zerovec::varzerovec::slice::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[E]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    E: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::encode::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;T&gt;,\n    F: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/varzerovec/components/trait.VarZeroVecFormat.html\" title=\"trait zerovec::varzerovec::components::VarZeroVecFormat\">VarZeroVecFormat</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#251\">Source</a><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\" class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#257\">Source</a><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#261\">Source</a><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_write\" class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" title=\"method zerovec::ule::encode::EncodeAsVarULE::encode_var_ule_len::encode_var_ule_len\"><code>Self::encode_var_ule_len()</code></a></div></details></div></details>","EncodeAsVarULE<VarZeroSlice<T, F>>","rustc_hir::hir::GenericBounds"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-%26%5BT%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#179-181\">Source</a><a href=\"#impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::encode::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;<a class=\"struct\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/zerovec/slice/struct.ZeroSlice.html\" title=\"struct zerovec::zerovec::slice::ZeroSlice\">ZeroSlice</a>&lt;T&gt;&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#183\">Source</a><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\" class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#189\">Source</a><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#193\">Source</a><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_write\" class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" title=\"method zerovec::ule::encode::EncodeAsVarULE::encode_var_ule_len::encode_var_ule_len\"><code>Self::encode_var_ule_len()</code></a></div></details></div></details>","EncodeAsVarULE<ZeroSlice<T>>","rustc_hir::hir::GenericBounds"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#21\">Source</a></span><a href=\"#impl-IntoIterator-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#22\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;'a T</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#23\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'a, T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#25\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'a, T&gt;</h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","rustc_hir::hir::GenericBounds"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BU;+N%5D%3E-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/array/equality.rs.html#80-82\">Source</a></span><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.array.html\">[U; N]</a>&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/array/equality.rs.html#85\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/array/equality.rs.html#89\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[U; N]>","rustc_hir::hir::GenericBounds"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/alloc/vec/partial_eq.rs.html#25\">Source</a></span><a href=\"#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A&gt;&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/alloc/vec/partial_eq.rs.html#25\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/alloc/vec/partial_eq.rs.html#25\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Vec<U, A>>","rustc_hir::hir::GenericBounds"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ZeroFrom%3C'zf,+%5BT%5D%3E-for-%26%5BT%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerofrom/0.1.6/src/zerofrom/zero_from.rs.html#125\">Source</a><a href=\"#impl-ZeroFrom%3C'zf,+%5BT%5D%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'zf, T&gt; <a class=\"trait\" href=\"https://docs.rs/zerofrom/0.1.6/zerofrom/zero_from/trait.ZeroFrom.html\" title=\"trait zerofrom::zero_from::ZeroFrom\">ZeroFrom</a>&lt;'zf, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a>&gt; for &amp;'zf <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerofrom/0.1.6/src/zerofrom/zero_from.rs.html#127\">Source</a><a href=\"#method.zero_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerofrom/0.1.6/zerofrom/zero_from/trait.ZeroFrom.html#tymethod.zero_from\" class=\"fn\">zero_from</a>(other: &amp;'zf <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a>) -&gt; &amp;'zf <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Clone the other <code>C</code> into a struct that may retain references into <code>C</code>.</div></details></div></details>","ZeroFrom<'zf, [T]>","rustc_hir::hir::GenericBounds"]]],["rustc_middle",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CZeroSlice%3CT%3E%3E-for-%26%5B%3CT+as+AsULE%3E::ULE%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/zerovec/slice.rs.html#581\">Source</a><a href=\"#impl-AsRef%3CZeroSlice%3CT%3E%3E-for-%26%5B%3CT+as+AsULE%3E::ULE%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/zerovec/slice/struct.ZeroSlice.html\" title=\"struct zerovec::zerovec::slice::ZeroSlice\">ZeroSlice</a>&lt;T&gt;&gt; for &amp;[&lt;T as <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.AsULE.html#associatedtype.ULE\" title=\"type zerovec::ule::AsULE::ULE\">ULE</a>]<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/zerovec/slice.rs.html#582\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/zerovec/slice/struct.ZeroSlice.html\" title=\"struct zerovec::zerovec::slice::ZeroSlice\">ZeroSlice</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<ZeroSlice<T>>","rustc_middle::query::queries::inferred_outlives_of::Value","rustc_middle::query::queries::inferred_outlives_of::ProvidedValue","rustc_middle::query::queries::variances_of::Value","rustc_middle::query::queries::variances_of::ProvidedValue","rustc_middle::query::queries::associated_item_def_ids::Value","rustc_middle::query::queries::associated_item_def_ids::ProvidedValue","rustc_middle::query::queries::inherent_impls::Value","rustc_middle::query::queries::inherent_impls::ProvidedValue","rustc_middle::query::queries::incoherent_impls::Value","rustc_middle::query::queries::incoherent_impls::ProvidedValue","rustc_middle::query::queries::assumed_wf_types::Value","rustc_middle::query::queries::assumed_wf_types::ProvidedValue","rustc_middle::query::queries::assumed_wf_types_for_rpitit::Value","rustc_middle::query::queries::assumed_wf_types_for_rpitit::ProvidedValue","rustc_middle::query::queries::mir_inliner_callees::Value","rustc_middle::query::queries::mir_inliner_callees::ProvidedValue","rustc_middle::query::queries::attrs_for_def::Value","rustc_middle::query::queries::attrs_for_def::ProvidedValue","rustc_middle::query::queries::fn_arg_idents::Value","rustc_middle::query::queries::fn_arg_idents::ProvidedValue","rustc_middle::query::queries::own_existential_vtable_entries::Value","rustc_middle::query::queries::own_existential_vtable_entries::ProvidedValue","rustc_middle::query::queries::vtable_entries::Value","rustc_middle::query::queries::vtable_entries::ProvidedValue","rustc_middle::query::queries::local_trait_impls::Value","rustc_middle::query::queries::local_trait_impls::ProvidedValue","rustc_middle::query::queries::dyn_compatibility_violations::Value","rustc_middle::query::queries::dyn_compatibility_violations::ProvidedValue","rustc_middle::query::queries::dylib_dependency_formats::Value","rustc_middle::query::queries::dylib_dependency_formats::ProvidedValue","rustc_middle::query::queries::implementations_of_trait::Value","rustc_middle::query::queries::implementations_of_trait::ProvidedValue","rustc_middle::query::queries::crate_incoherent_impls::Value","rustc_middle::query::queries::crate_incoherent_impls::ProvidedValue","rustc_middle::query::queries::inherit_sig_for_delegation_item::Value","rustc_middle::query::queries::inherit_sig_for_delegation_item::ProvidedValue","rustc_middle::query::queries::opaque_captured_lifetimes::Value","rustc_middle::query::queries::opaque_captured_lifetimes::ProvidedValue","rustc_middle::query::queries::module_children::Value","rustc_middle::query::queries::module_children::ProvidedValue","rustc_middle::query::queries::defined_lang_items::Value","rustc_middle::query::queries::defined_lang_items::ProvidedValue","rustc_middle::query::queries::missing_lang_items::Value","rustc_middle::query::queries::missing_lang_items::ProvidedValue","rustc_middle::query::queries::postorder_cnums::Value","rustc_middle::query::queries::postorder_cnums::ProvidedValue","rustc_middle::query::queries::crates::Value","rustc_middle::query::queries::crates::ProvidedValue","rustc_middle::query::queries::used_crates::Value","rustc_middle::query::queries::used_crates::ProvidedValue","rustc_middle::query::queries::traits::Value","rustc_middle::query::queries::traits::ProvidedValue","rustc_middle::query::queries::trait_impls_in_crate::Value","rustc_middle::query::queries::trait_impls_in_crate::ProvidedValue","rustc_middle::query::queries::exportable_items::Value","rustc_middle::query::queries::exportable_items::ProvidedValue","rustc_middle::query::queries::exported_non_generic_symbols::Value","rustc_middle::query::queries::exported_non_generic_symbols::ProvidedValue","rustc_middle::query::queries::exported_generic_symbols::Value","rustc_middle::query::queries::exported_generic_symbols::ProvidedValue","rustc_middle::query::queries::deduced_param_attrs::Value","rustc_middle::query::queries::deduced_param_attrs::ProvidedValue","rustc_middle::query::queries::doc_link_traits_in_scope::Value","rustc_middle::query::queries::doc_link_traits_in_scope::ProvidedValue","rustc_middle::query::queries::stripped_cfg_items::Value","rustc_middle::query::queries::stripped_cfg_items::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decodable%3CCacheDecoder%3C'a,+'tcx%3E%3E-for-%26%5B(Clause%3C'tcx%3E,+Span)%5D\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustc_middle/query/on_disk_cache.rs.html#753-758\">Source</a><a href=\"#impl-Decodable%3CCacheDecoder%3C'a,+'tcx%3E%3E-for-%26%5B(Clause%3C'tcx%3E,+Span)%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'tcx&gt; <a class=\"trait\" href=\"rustc_serialize/serialize/trait.Decodable.html\" title=\"trait rustc_serialize::serialize::Decodable\">Decodable</a>&lt;<a class=\"struct\" href=\"rustc_middle/query/on_disk_cache/struct.CacheDecoder.html\" title=\"struct rustc_middle::query::on_disk_cache::CacheDecoder\">CacheDecoder</a>&lt;'a, 'tcx&gt;&gt; for &amp;'tcx [(<a class=\"struct\" href=\"rustc_middle/ty/struct.Clause.html\" title=\"struct rustc_middle::ty::Clause\">Clause</a>&lt;'tcx&gt;, <a class=\"struct\" href=\"rustc_span/span_encoding/struct.Span.html\" title=\"struct rustc_span::span_encoding::Span\">Span</a>)]</h3></section></summary><div class=\"impl-items\"><section id=\"method.decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_middle/query/on_disk_cache.rs.html#755-757\">Source</a><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_serialize/serialize/trait.Decodable.html#tymethod.decode\" class=\"fn\">decode</a>(d: &amp;mut <a class=\"struct\" href=\"rustc_middle/query/on_disk_cache/struct.CacheDecoder.html\" title=\"struct rustc_middle::query::on_disk_cache::CacheDecoder\">CacheDecoder</a>&lt;'a, 'tcx&gt;) -&gt; Self</h4></section></div></details>","Decodable<CacheDecoder<'a, 'tcx>>","rustc_middle::query::queries::inferred_outlives_of::Value","rustc_middle::query::queries::inferred_outlives_of::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decodable%3CCacheDecoder%3C'a,+'tcx%3E%3E-for-%26%5B(ExportedSymbol%3C'tcx%3E,+SymbolExportInfo)%5D\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustc_middle/query/on_disk_cache.rs.html#794-803\">Source</a><a href=\"#impl-Decodable%3CCacheDecoder%3C'a,+'tcx%3E%3E-for-%26%5B(ExportedSymbol%3C'tcx%3E,+SymbolExportInfo)%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'tcx&gt; <a class=\"trait\" href=\"rustc_serialize/serialize/trait.Decodable.html\" title=\"trait rustc_serialize::serialize::Decodable\">Decodable</a>&lt;<a class=\"struct\" href=\"rustc_middle/query/on_disk_cache/struct.CacheDecoder.html\" title=\"struct rustc_middle::query::on_disk_cache::CacheDecoder\">CacheDecoder</a>&lt;'a, 'tcx&gt;&gt; for &amp;'tcx [(<a class=\"enum\" href=\"rustc_middle/middle/exported_symbols/enum.ExportedSymbol.html\" title=\"enum rustc_middle::middle::exported_symbols::ExportedSymbol\">ExportedSymbol</a>&lt;'tcx&gt;, <a class=\"struct\" href=\"rustc_middle/middle/exported_symbols/struct.SymbolExportInfo.html\" title=\"struct rustc_middle::middle::exported_symbols::SymbolExportInfo\">SymbolExportInfo</a>)]</h3></section></summary><div class=\"impl-items\"><section id=\"method.decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_middle/query/on_disk_cache.rs.html#794-803\">Source</a><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_serialize/serialize/trait.Decodable.html#tymethod.decode\" class=\"fn\">decode</a>(d: &amp;mut <a class=\"struct\" href=\"rustc_middle/query/on_disk_cache/struct.CacheDecoder.html\" title=\"struct rustc_middle::query::on_disk_cache::CacheDecoder\">CacheDecoder</a>&lt;'a, 'tcx&gt;) -&gt; Self</h4></section></div></details>","Decodable<CacheDecoder<'a, 'tcx>>","rustc_middle::query::queries::exported_non_generic_symbols::Value","rustc_middle::query::queries::exported_non_generic_symbols::ProvidedValue","rustc_middle::query::queries::exported_generic_symbols::Value","rustc_middle::query::queries::exported_generic_symbols::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decodable%3CCacheDecoder%3C'a,+'tcx%3E%3E-for-%26%5BAttribute%5D\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustc_middle/query/on_disk_cache.rs.html#794-803\">Source</a><a href=\"#impl-Decodable%3CCacheDecoder%3C'a,+'tcx%3E%3E-for-%26%5BAttribute%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'tcx&gt; <a class=\"trait\" href=\"rustc_serialize/serialize/trait.Decodable.html\" title=\"trait rustc_serialize::serialize::Decodable\">Decodable</a>&lt;<a class=\"struct\" href=\"rustc_middle/query/on_disk_cache/struct.CacheDecoder.html\" title=\"struct rustc_middle::query::on_disk_cache::CacheDecoder\">CacheDecoder</a>&lt;'a, 'tcx&gt;&gt; for &amp;'tcx [<a class=\"enum\" href=\"rustc_hir/hir/enum.Attribute.html\" title=\"enum rustc_hir::hir::Attribute\">Attribute</a>]</h3></section></summary><div class=\"impl-items\"><section id=\"method.decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_middle/query/on_disk_cache.rs.html#794-803\">Source</a><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_serialize/serialize/trait.Decodable.html#tymethod.decode\" class=\"fn\">decode</a>(d: &amp;mut <a class=\"struct\" href=\"rustc_middle/query/on_disk_cache/struct.CacheDecoder.html\" title=\"struct rustc_middle::query::on_disk_cache::CacheDecoder\">CacheDecoder</a>&lt;'a, 'tcx&gt;) -&gt; Self</h4></section></div></details>","Decodable<CacheDecoder<'a, 'tcx>>","rustc_middle::query::queries::attrs_for_def::Value","rustc_middle::query::queries::attrs_for_def::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decodable%3CCacheDecoder%3C'a,+'tcx%3E%3E-for-%26%5BDeducedParamAttrs%5D\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustc_middle/query/on_disk_cache.rs.html#794-803\">Source</a><a href=\"#impl-Decodable%3CCacheDecoder%3C'a,+'tcx%3E%3E-for-%26%5BDeducedParamAttrs%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'tcx&gt; <a class=\"trait\" href=\"rustc_serialize/serialize/trait.Decodable.html\" title=\"trait rustc_serialize::serialize::Decodable\">Decodable</a>&lt;<a class=\"struct\" href=\"rustc_middle/query/on_disk_cache/struct.CacheDecoder.html\" title=\"struct rustc_middle::query::on_disk_cache::CacheDecoder\">CacheDecoder</a>&lt;'a, 'tcx&gt;&gt; for &amp;'tcx [<a class=\"struct\" href=\"rustc_middle/ty/struct.DeducedParamAttrs.html\" title=\"struct rustc_middle::ty::DeducedParamAttrs\">DeducedParamAttrs</a>]</h3></section></summary><div class=\"impl-items\"><section id=\"method.decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_middle/query/on_disk_cache.rs.html#794-803\">Source</a><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_serialize/serialize/trait.Decodable.html#tymethod.decode\" class=\"fn\">decode</a>(d: &amp;mut <a class=\"struct\" href=\"rustc_middle/query/on_disk_cache/struct.CacheDecoder.html\" title=\"struct rustc_middle::query::on_disk_cache::CacheDecoder\">CacheDecoder</a>&lt;'a, 'tcx&gt;) -&gt; Self</h4></section></div></details>","Decodable<CacheDecoder<'a, 'tcx>>","rustc_middle::query::queries::deduced_param_attrs::Value","rustc_middle::query::queries::deduced_param_attrs::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decodable%3CCacheDecoder%3C'a,+'tcx%3E%3E-for-%26%5BDefId%5D\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustc_middle/query/on_disk_cache.rs.html#794-803\">Source</a><a href=\"#impl-Decodable%3CCacheDecoder%3C'a,+'tcx%3E%3E-for-%26%5BDefId%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'tcx&gt; <a class=\"trait\" href=\"rustc_serialize/serialize/trait.Decodable.html\" title=\"trait rustc_serialize::serialize::Decodable\">Decodable</a>&lt;<a class=\"struct\" href=\"rustc_middle/query/on_disk_cache/struct.CacheDecoder.html\" title=\"struct rustc_middle::query::on_disk_cache::CacheDecoder\">CacheDecoder</a>&lt;'a, 'tcx&gt;&gt; for &amp;'tcx [<a class=\"struct\" href=\"rustc_span/def_id/struct.DefId.html\" title=\"struct rustc_span::def_id::DefId\">DefId</a>]</h3></section></summary><div class=\"impl-items\"><section id=\"method.decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_middle/query/on_disk_cache.rs.html#794-803\">Source</a><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_serialize/serialize/trait.Decodable.html#tymethod.decode\" class=\"fn\">decode</a>(d: &amp;mut <a class=\"struct\" href=\"rustc_middle/query/on_disk_cache/struct.CacheDecoder.html\" title=\"struct rustc_middle::query::on_disk_cache::CacheDecoder\">CacheDecoder</a>&lt;'a, 'tcx&gt;) -&gt; Self</h4></section></div></details>","Decodable<CacheDecoder<'a, 'tcx>>","rustc_middle::query::queries::associated_item_def_ids::Value","rustc_middle::query::queries::associated_item_def_ids::ProvidedValue","rustc_middle::query::queries::inherent_impls::Value","rustc_middle::query::queries::inherent_impls::ProvidedValue","rustc_middle::query::queries::incoherent_impls::Value","rustc_middle::query::queries::incoherent_impls::ProvidedValue","rustc_middle::query::queries::own_existential_vtable_entries::Value","rustc_middle::query::queries::own_existential_vtable_entries::ProvidedValue","rustc_middle::query::queries::crate_incoherent_impls::Value","rustc_middle::query::queries::crate_incoherent_impls::ProvidedValue","rustc_middle::query::queries::traits::Value","rustc_middle::query::queries::traits::ProvidedValue","rustc_middle::query::queries::trait_impls_in_crate::Value","rustc_middle::query::queries::trait_impls_in_crate::ProvidedValue","rustc_middle::query::queries::exportable_items::Value","rustc_middle::query::queries::exportable_items::ProvidedValue","rustc_middle::query::queries::doc_link_traits_in_scope::Value","rustc_middle::query::queries::doc_link_traits_in_scope::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decodable%3CCacheDecoder%3C'a,+'tcx%3E%3E-for-%26%5BLocalDefId%5D\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustc_middle/query/on_disk_cache.rs.html#794-803\">Source</a><a href=\"#impl-Decodable%3CCacheDecoder%3C'a,+'tcx%3E%3E-for-%26%5BLocalDefId%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'tcx&gt; <a class=\"trait\" href=\"rustc_serialize/serialize/trait.Decodable.html\" title=\"trait rustc_serialize::serialize::Decodable\">Decodable</a>&lt;<a class=\"struct\" href=\"rustc_middle/query/on_disk_cache/struct.CacheDecoder.html\" title=\"struct rustc_middle::query::on_disk_cache::CacheDecoder\">CacheDecoder</a>&lt;'a, 'tcx&gt;&gt; for &amp;'tcx [<a class=\"struct\" href=\"rustc_span/def_id/struct.LocalDefId.html\" title=\"struct rustc_span::def_id::LocalDefId\">LocalDefId</a>]</h3></section></summary><div class=\"impl-items\"><section id=\"method.decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_middle/query/on_disk_cache.rs.html#794-803\">Source</a><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_serialize/serialize/trait.Decodable.html#tymethod.decode\" class=\"fn\">decode</a>(d: &amp;mut <a class=\"struct\" href=\"rustc_middle/query/on_disk_cache/struct.CacheDecoder.html\" title=\"struct rustc_middle::query::on_disk_cache::CacheDecoder\">CacheDecoder</a>&lt;'a, 'tcx&gt;) -&gt; Self</h4></section></div></details>","Decodable<CacheDecoder<'a, 'tcx>>","rustc_middle::query::queries::local_trait_impls::Value","rustc_middle::query::queries::local_trait_impls::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decodable%3CCacheDecoder%3C'a,+'tcx%3E%3E-for-%26%5BVariance%5D\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustc_middle/query/on_disk_cache.rs.html#794-803\">Source</a><a href=\"#impl-Decodable%3CCacheDecoder%3C'a,+'tcx%3E%3E-for-%26%5BVariance%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'tcx&gt; <a class=\"trait\" href=\"rustc_serialize/serialize/trait.Decodable.html\" title=\"trait rustc_serialize::serialize::Decodable\">Decodable</a>&lt;<a class=\"struct\" href=\"rustc_middle/query/on_disk_cache/struct.CacheDecoder.html\" title=\"struct rustc_middle::query::on_disk_cache::CacheDecoder\">CacheDecoder</a>&lt;'a, 'tcx&gt;&gt; for &amp;'tcx [<a class=\"enum\" href=\"rustc_middle/ty/enum.Variance.html\" title=\"enum rustc_middle::ty::Variance\">Variance</a>]</h3></section></summary><div class=\"impl-items\"><section id=\"method.decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_middle/query/on_disk_cache.rs.html#794-803\">Source</a><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_serialize/serialize/trait.Decodable.html#tymethod.decode\" class=\"fn\">decode</a>(d: &amp;mut <a class=\"struct\" href=\"rustc_middle/query/on_disk_cache/struct.CacheDecoder.html\" title=\"struct rustc_middle::query::on_disk_cache::CacheDecoder\">CacheDecoder</a>&lt;'a, 'tcx&gt;) -&gt; Self</h4></section></div></details>","Decodable<CacheDecoder<'a, 'tcx>>","rustc_middle::query::queries::variances_of::Value","rustc_middle::query::queries::variances_of::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143894\" title=\"Tracking issue for const_default\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/slice/mod.rs.html#5125\">Source</a></span><a href=\"#impl-Default-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/mod.rs.html#5127\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Creates an empty slice.</p>\n</div></details></div></details>","Default","rustc_middle::query::queries::inferred_outlives_of::Value","rustc_middle::query::queries::inferred_outlives_of::ProvidedValue","rustc_middle::query::queries::variances_of::Value","rustc_middle::query::queries::variances_of::ProvidedValue","rustc_middle::query::queries::associated_item_def_ids::Value","rustc_middle::query::queries::associated_item_def_ids::ProvidedValue","rustc_middle::query::queries::inherent_impls::Value","rustc_middle::query::queries::inherent_impls::ProvidedValue","rustc_middle::query::queries::incoherent_impls::Value","rustc_middle::query::queries::incoherent_impls::ProvidedValue","rustc_middle::query::queries::assumed_wf_types::Value","rustc_middle::query::queries::assumed_wf_types::ProvidedValue","rustc_middle::query::queries::assumed_wf_types_for_rpitit::Value","rustc_middle::query::queries::assumed_wf_types_for_rpitit::ProvidedValue","rustc_middle::query::queries::mir_inliner_callees::Value","rustc_middle::query::queries::mir_inliner_callees::ProvidedValue","rustc_middle::query::queries::attrs_for_def::Value","rustc_middle::query::queries::attrs_for_def::ProvidedValue","rustc_middle::query::queries::fn_arg_idents::Value","rustc_middle::query::queries::fn_arg_idents::ProvidedValue","rustc_middle::query::queries::own_existential_vtable_entries::Value","rustc_middle::query::queries::own_existential_vtable_entries::ProvidedValue","rustc_middle::query::queries::vtable_entries::Value","rustc_middle::query::queries::vtable_entries::ProvidedValue","rustc_middle::query::queries::local_trait_impls::Value","rustc_middle::query::queries::local_trait_impls::ProvidedValue","rustc_middle::query::queries::dyn_compatibility_violations::Value","rustc_middle::query::queries::dyn_compatibility_violations::ProvidedValue","rustc_middle::query::queries::dylib_dependency_formats::Value","rustc_middle::query::queries::dylib_dependency_formats::ProvidedValue","rustc_middle::query::queries::implementations_of_trait::Value","rustc_middle::query::queries::implementations_of_trait::ProvidedValue","rustc_middle::query::queries::crate_incoherent_impls::Value","rustc_middle::query::queries::crate_incoherent_impls::ProvidedValue","rustc_middle::query::queries::inherit_sig_for_delegation_item::Value","rustc_middle::query::queries::inherit_sig_for_delegation_item::ProvidedValue","rustc_middle::query::queries::opaque_captured_lifetimes::Value","rustc_middle::query::queries::opaque_captured_lifetimes::ProvidedValue","rustc_middle::query::queries::module_children::Value","rustc_middle::query::queries::module_children::ProvidedValue","rustc_middle::query::queries::defined_lang_items::Value","rustc_middle::query::queries::defined_lang_items::ProvidedValue","rustc_middle::query::queries::missing_lang_items::Value","rustc_middle::query::queries::missing_lang_items::ProvidedValue","rustc_middle::query::queries::postorder_cnums::Value","rustc_middle::query::queries::postorder_cnums::ProvidedValue","rustc_middle::query::queries::crates::Value","rustc_middle::query::queries::crates::ProvidedValue","rustc_middle::query::queries::used_crates::Value","rustc_middle::query::queries::used_crates::ProvidedValue","rustc_middle::query::queries::traits::Value","rustc_middle::query::queries::traits::ProvidedValue","rustc_middle::query::queries::trait_impls_in_crate::Value","rustc_middle::query::queries::trait_impls_in_crate::ProvidedValue","rustc_middle::query::queries::exportable_items::Value","rustc_middle::query::queries::exportable_items::ProvidedValue","rustc_middle::query::queries::exported_non_generic_symbols::Value","rustc_middle::query::queries::exported_non_generic_symbols::ProvidedValue","rustc_middle::query::queries::exported_generic_symbols::Value","rustc_middle::query::queries::exported_generic_symbols::ProvidedValue","rustc_middle::query::queries::deduced_param_attrs::Value","rustc_middle::query::queries::deduced_param_attrs::ProvidedValue","rustc_middle::query::queries::doc_link_traits_in_scope::Value","rustc_middle::query::queries::doc_link_traits_in_scope::ProvidedValue","rustc_middle::query::queries::stripped_cfg_items::Value","rustc_middle::query::queries::stripped_cfg_items::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-%26%5BE%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#245-249\">Source</a><a href=\"#impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-%26%5BE%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E, F&gt; <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::encode::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;<a class=\"struct\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/varzerovec/slice/struct.VarZeroSlice.html\" title=\"struct zerovec::varzerovec::slice::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[E]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    E: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::encode::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;T&gt;,\n    F: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/varzerovec/components/trait.VarZeroVecFormat.html\" title=\"trait zerovec::varzerovec::components::VarZeroVecFormat\">VarZeroVecFormat</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#251\">Source</a><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\" class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#257\">Source</a><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#261\">Source</a><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_write\" class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" title=\"method zerovec::ule::encode::EncodeAsVarULE::encode_var_ule_len::encode_var_ule_len\"><code>Self::encode_var_ule_len()</code></a></div></details></div></details>","EncodeAsVarULE<VarZeroSlice<T, F>>","rustc_middle::query::queries::inferred_outlives_of::Value","rustc_middle::query::queries::inferred_outlives_of::ProvidedValue","rustc_middle::query::queries::variances_of::Value","rustc_middle::query::queries::variances_of::ProvidedValue","rustc_middle::query::queries::associated_item_def_ids::Value","rustc_middle::query::queries::associated_item_def_ids::ProvidedValue","rustc_middle::query::queries::inherent_impls::Value","rustc_middle::query::queries::inherent_impls::ProvidedValue","rustc_middle::query::queries::incoherent_impls::Value","rustc_middle::query::queries::incoherent_impls::ProvidedValue","rustc_middle::query::queries::assumed_wf_types::Value","rustc_middle::query::queries::assumed_wf_types::ProvidedValue","rustc_middle::query::queries::assumed_wf_types_for_rpitit::Value","rustc_middle::query::queries::assumed_wf_types_for_rpitit::ProvidedValue","rustc_middle::query::queries::mir_inliner_callees::Value","rustc_middle::query::queries::mir_inliner_callees::ProvidedValue","rustc_middle::query::queries::attrs_for_def::Value","rustc_middle::query::queries::attrs_for_def::ProvidedValue","rustc_middle::query::queries::fn_arg_idents::Value","rustc_middle::query::queries::fn_arg_idents::ProvidedValue","rustc_middle::query::queries::own_existential_vtable_entries::Value","rustc_middle::query::queries::own_existential_vtable_entries::ProvidedValue","rustc_middle::query::queries::vtable_entries::Value","rustc_middle::query::queries::vtable_entries::ProvidedValue","rustc_middle::query::queries::local_trait_impls::Value","rustc_middle::query::queries::local_trait_impls::ProvidedValue","rustc_middle::query::queries::dyn_compatibility_violations::Value","rustc_middle::query::queries::dyn_compatibility_violations::ProvidedValue","rustc_middle::query::queries::dylib_dependency_formats::Value","rustc_middle::query::queries::dylib_dependency_formats::ProvidedValue","rustc_middle::query::queries::implementations_of_trait::Value","rustc_middle::query::queries::implementations_of_trait::ProvidedValue","rustc_middle::query::queries::crate_incoherent_impls::Value","rustc_middle::query::queries::crate_incoherent_impls::ProvidedValue","rustc_middle::query::queries::inherit_sig_for_delegation_item::Value","rustc_middle::query::queries::inherit_sig_for_delegation_item::ProvidedValue","rustc_middle::query::queries::opaque_captured_lifetimes::Value","rustc_middle::query::queries::opaque_captured_lifetimes::ProvidedValue","rustc_middle::query::queries::module_children::Value","rustc_middle::query::queries::module_children::ProvidedValue","rustc_middle::query::queries::defined_lang_items::Value","rustc_middle::query::queries::defined_lang_items::ProvidedValue","rustc_middle::query::queries::missing_lang_items::Value","rustc_middle::query::queries::missing_lang_items::ProvidedValue","rustc_middle::query::queries::postorder_cnums::Value","rustc_middle::query::queries::postorder_cnums::ProvidedValue","rustc_middle::query::queries::crates::Value","rustc_middle::query::queries::crates::ProvidedValue","rustc_middle::query::queries::used_crates::Value","rustc_middle::query::queries::used_crates::ProvidedValue","rustc_middle::query::queries::traits::Value","rustc_middle::query::queries::traits::ProvidedValue","rustc_middle::query::queries::trait_impls_in_crate::Value","rustc_middle::query::queries::trait_impls_in_crate::ProvidedValue","rustc_middle::query::queries::exportable_items::Value","rustc_middle::query::queries::exportable_items::ProvidedValue","rustc_middle::query::queries::exported_non_generic_symbols::Value","rustc_middle::query::queries::exported_non_generic_symbols::ProvidedValue","rustc_middle::query::queries::exported_generic_symbols::Value","rustc_middle::query::queries::exported_generic_symbols::ProvidedValue","rustc_middle::query::queries::deduced_param_attrs::Value","rustc_middle::query::queries::deduced_param_attrs::ProvidedValue","rustc_middle::query::queries::doc_link_traits_in_scope::Value","rustc_middle::query::queries::doc_link_traits_in_scope::ProvidedValue","rustc_middle::query::queries::stripped_cfg_items::Value","rustc_middle::query::queries::stripped_cfg_items::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-%26%5BT%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#179-181\">Source</a><a href=\"#impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::encode::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;<a class=\"struct\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/zerovec/slice/struct.ZeroSlice.html\" title=\"struct zerovec::zerovec::slice::ZeroSlice\">ZeroSlice</a>&lt;T&gt;&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#183\">Source</a><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\" class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#189\">Source</a><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#193\">Source</a><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_write\" class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" title=\"method zerovec::ule::encode::EncodeAsVarULE::encode_var_ule_len::encode_var_ule_len\"><code>Self::encode_var_ule_len()</code></a></div></details></div></details>","EncodeAsVarULE<ZeroSlice<T>>","rustc_middle::query::queries::inferred_outlives_of::Value","rustc_middle::query::queries::inferred_outlives_of::ProvidedValue","rustc_middle::query::queries::variances_of::Value","rustc_middle::query::queries::variances_of::ProvidedValue","rustc_middle::query::queries::associated_item_def_ids::Value","rustc_middle::query::queries::associated_item_def_ids::ProvidedValue","rustc_middle::query::queries::inherent_impls::Value","rustc_middle::query::queries::inherent_impls::ProvidedValue","rustc_middle::query::queries::incoherent_impls::Value","rustc_middle::query::queries::incoherent_impls::ProvidedValue","rustc_middle::query::queries::assumed_wf_types::Value","rustc_middle::query::queries::assumed_wf_types::ProvidedValue","rustc_middle::query::queries::assumed_wf_types_for_rpitit::Value","rustc_middle::query::queries::assumed_wf_types_for_rpitit::ProvidedValue","rustc_middle::query::queries::mir_inliner_callees::Value","rustc_middle::query::queries::mir_inliner_callees::ProvidedValue","rustc_middle::query::queries::attrs_for_def::Value","rustc_middle::query::queries::attrs_for_def::ProvidedValue","rustc_middle::query::queries::fn_arg_idents::Value","rustc_middle::query::queries::fn_arg_idents::ProvidedValue","rustc_middle::query::queries::own_existential_vtable_entries::Value","rustc_middle::query::queries::own_existential_vtable_entries::ProvidedValue","rustc_middle::query::queries::vtable_entries::Value","rustc_middle::query::queries::vtable_entries::ProvidedValue","rustc_middle::query::queries::local_trait_impls::Value","rustc_middle::query::queries::local_trait_impls::ProvidedValue","rustc_middle::query::queries::dyn_compatibility_violations::Value","rustc_middle::query::queries::dyn_compatibility_violations::ProvidedValue","rustc_middle::query::queries::dylib_dependency_formats::Value","rustc_middle::query::queries::dylib_dependency_formats::ProvidedValue","rustc_middle::query::queries::implementations_of_trait::Value","rustc_middle::query::queries::implementations_of_trait::ProvidedValue","rustc_middle::query::queries::crate_incoherent_impls::Value","rustc_middle::query::queries::crate_incoherent_impls::ProvidedValue","rustc_middle::query::queries::inherit_sig_for_delegation_item::Value","rustc_middle::query::queries::inherit_sig_for_delegation_item::ProvidedValue","rustc_middle::query::queries::opaque_captured_lifetimes::Value","rustc_middle::query::queries::opaque_captured_lifetimes::ProvidedValue","rustc_middle::query::queries::module_children::Value","rustc_middle::query::queries::module_children::ProvidedValue","rustc_middle::query::queries::defined_lang_items::Value","rustc_middle::query::queries::defined_lang_items::ProvidedValue","rustc_middle::query::queries::missing_lang_items::Value","rustc_middle::query::queries::missing_lang_items::ProvidedValue","rustc_middle::query::queries::postorder_cnums::Value","rustc_middle::query::queries::postorder_cnums::ProvidedValue","rustc_middle::query::queries::crates::Value","rustc_middle::query::queries::crates::ProvidedValue","rustc_middle::query::queries::used_crates::Value","rustc_middle::query::queries::used_crates::ProvidedValue","rustc_middle::query::queries::traits::Value","rustc_middle::query::queries::traits::ProvidedValue","rustc_middle::query::queries::trait_impls_in_crate::Value","rustc_middle::query::queries::trait_impls_in_crate::ProvidedValue","rustc_middle::query::queries::exportable_items::Value","rustc_middle::query::queries::exportable_items::ProvidedValue","rustc_middle::query::queries::exported_non_generic_symbols::Value","rustc_middle::query::queries::exported_non_generic_symbols::ProvidedValue","rustc_middle::query::queries::exported_generic_symbols::Value","rustc_middle::query::queries::exported_generic_symbols::ProvidedValue","rustc_middle::query::queries::deduced_param_attrs::Value","rustc_middle::query::queries::deduced_param_attrs::ProvidedValue","rustc_middle::query::queries::doc_link_traits_in_scope::Value","rustc_middle::query::queries::doc_link_traits_in_scope::ProvidedValue","rustc_middle::query::queries::stripped_cfg_items::Value","rustc_middle::query::queries::stripped_cfg_items::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EraseType-for-%26%5BT%5D\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustc_middle/query/erase.rs.html#68-70\">Source</a><a href=\"#impl-EraseType-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"rustc_middle/query/erase/trait.EraseType.html\" title=\"trait rustc_middle::query::erase::EraseType\">EraseType</a> for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Result\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/rustc_middle/query/erase.rs.html#69\">Source</a><a href=\"#associatedtype.Result\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"rustc_middle/query/erase/trait.EraseType.html#associatedtype.Result\" class=\"associatedtype\">Result</a> = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.array.html\">16</a>]</h4></section></div></details>","EraseType","rustc_middle::query::queries::inferred_outlives_of::Value","rustc_middle::query::queries::inferred_outlives_of::ProvidedValue","rustc_middle::query::queries::variances_of::Value","rustc_middle::query::queries::variances_of::ProvidedValue","rustc_middle::query::queries::associated_item_def_ids::Value","rustc_middle::query::queries::associated_item_def_ids::ProvidedValue","rustc_middle::query::queries::inherent_impls::Value","rustc_middle::query::queries::inherent_impls::ProvidedValue","rustc_middle::query::queries::incoherent_impls::Value","rustc_middle::query::queries::incoherent_impls::ProvidedValue","rustc_middle::query::queries::assumed_wf_types::Value","rustc_middle::query::queries::assumed_wf_types::ProvidedValue","rustc_middle::query::queries::assumed_wf_types_for_rpitit::Value","rustc_middle::query::queries::assumed_wf_types_for_rpitit::ProvidedValue","rustc_middle::query::queries::mir_inliner_callees::Value","rustc_middle::query::queries::mir_inliner_callees::ProvidedValue","rustc_middle::query::queries::attrs_for_def::Value","rustc_middle::query::queries::attrs_for_def::ProvidedValue","rustc_middle::query::queries::fn_arg_idents::Value","rustc_middle::query::queries::fn_arg_idents::ProvidedValue","rustc_middle::query::queries::own_existential_vtable_entries::Value","rustc_middle::query::queries::own_existential_vtable_entries::ProvidedValue","rustc_middle::query::queries::vtable_entries::Value","rustc_middle::query::queries::vtable_entries::ProvidedValue","rustc_middle::query::queries::local_trait_impls::Value","rustc_middle::query::queries::local_trait_impls::ProvidedValue","rustc_middle::query::queries::dyn_compatibility_violations::Value","rustc_middle::query::queries::dyn_compatibility_violations::ProvidedValue","rustc_middle::query::queries::dylib_dependency_formats::Value","rustc_middle::query::queries::dylib_dependency_formats::ProvidedValue","rustc_middle::query::queries::implementations_of_trait::Value","rustc_middle::query::queries::implementations_of_trait::ProvidedValue","rustc_middle::query::queries::crate_incoherent_impls::Value","rustc_middle::query::queries::crate_incoherent_impls::ProvidedValue","rustc_middle::query::queries::inherit_sig_for_delegation_item::Value","rustc_middle::query::queries::inherit_sig_for_delegation_item::ProvidedValue","rustc_middle::query::queries::opaque_captured_lifetimes::Value","rustc_middle::query::queries::opaque_captured_lifetimes::ProvidedValue","rustc_middle::query::queries::module_children::Value","rustc_middle::query::queries::module_children::ProvidedValue","rustc_middle::query::queries::defined_lang_items::Value","rustc_middle::query::queries::defined_lang_items::ProvidedValue","rustc_middle::query::queries::missing_lang_items::Value","rustc_middle::query::queries::missing_lang_items::ProvidedValue","rustc_middle::query::queries::postorder_cnums::Value","rustc_middle::query::queries::postorder_cnums::ProvidedValue","rustc_middle::query::queries::crates::Value","rustc_middle::query::queries::crates::ProvidedValue","rustc_middle::query::queries::used_crates::Value","rustc_middle::query::queries::used_crates::ProvidedValue","rustc_middle::query::queries::traits::Value","rustc_middle::query::queries::traits::ProvidedValue","rustc_middle::query::queries::trait_impls_in_crate::Value","rustc_middle::query::queries::trait_impls_in_crate::ProvidedValue","rustc_middle::query::queries::exportable_items::Value","rustc_middle::query::queries::exportable_items::ProvidedValue","rustc_middle::query::queries::exported_non_generic_symbols::Value","rustc_middle::query::queries::exported_non_generic_symbols::ProvidedValue","rustc_middle::query::queries::exported_generic_symbols::Value","rustc_middle::query::queries::exported_generic_symbols::ProvidedValue","rustc_middle::query::queries::deduced_param_attrs::Value","rustc_middle::query::queries::deduced_param_attrs::ProvidedValue","rustc_middle::query::queries::doc_link_traits_in_scope::Value","rustc_middle::query::queries::doc_link_traits_in_scope::ProvidedValue","rustc_middle::query::queries::stripped_cfg_items::Value","rustc_middle::query::queries::stripped_cfg_items::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#21\">Source</a></span><a href=\"#impl-IntoIterator-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#22\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;'a T</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#23\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'a, T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#25\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'a, T&gt;</h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","rustc_middle::query::queries::inferred_outlives_of::Value","rustc_middle::query::queries::inferred_outlives_of::ProvidedValue","rustc_middle::query::queries::variances_of::Value","rustc_middle::query::queries::variances_of::ProvidedValue","rustc_middle::query::queries::associated_item_def_ids::Value","rustc_middle::query::queries::associated_item_def_ids::ProvidedValue","rustc_middle::query::queries::inherent_impls::Value","rustc_middle::query::queries::inherent_impls::ProvidedValue","rustc_middle::query::queries::incoherent_impls::Value","rustc_middle::query::queries::incoherent_impls::ProvidedValue","rustc_middle::query::queries::assumed_wf_types::Value","rustc_middle::query::queries::assumed_wf_types::ProvidedValue","rustc_middle::query::queries::assumed_wf_types_for_rpitit::Value","rustc_middle::query::queries::assumed_wf_types_for_rpitit::ProvidedValue","rustc_middle::query::queries::mir_inliner_callees::Value","rustc_middle::query::queries::mir_inliner_callees::ProvidedValue","rustc_middle::query::queries::attrs_for_def::Value","rustc_middle::query::queries::attrs_for_def::ProvidedValue","rustc_middle::query::queries::fn_arg_idents::Value","rustc_middle::query::queries::fn_arg_idents::ProvidedValue","rustc_middle::query::queries::own_existential_vtable_entries::Value","rustc_middle::query::queries::own_existential_vtable_entries::ProvidedValue","rustc_middle::query::queries::vtable_entries::Value","rustc_middle::query::queries::vtable_entries::ProvidedValue","rustc_middle::query::queries::local_trait_impls::Value","rustc_middle::query::queries::local_trait_impls::ProvidedValue","rustc_middle::query::queries::dyn_compatibility_violations::Value","rustc_middle::query::queries::dyn_compatibility_violations::ProvidedValue","rustc_middle::query::queries::dylib_dependency_formats::Value","rustc_middle::query::queries::dylib_dependency_formats::ProvidedValue","rustc_middle::query::queries::implementations_of_trait::Value","rustc_middle::query::queries::implementations_of_trait::ProvidedValue","rustc_middle::query::queries::crate_incoherent_impls::Value","rustc_middle::query::queries::crate_incoherent_impls::ProvidedValue","rustc_middle::query::queries::inherit_sig_for_delegation_item::Value","rustc_middle::query::queries::inherit_sig_for_delegation_item::ProvidedValue","rustc_middle::query::queries::opaque_captured_lifetimes::Value","rustc_middle::query::queries::opaque_captured_lifetimes::ProvidedValue","rustc_middle::query::queries::module_children::Value","rustc_middle::query::queries::module_children::ProvidedValue","rustc_middle::query::queries::defined_lang_items::Value","rustc_middle::query::queries::defined_lang_items::ProvidedValue","rustc_middle::query::queries::missing_lang_items::Value","rustc_middle::query::queries::missing_lang_items::ProvidedValue","rustc_middle::query::queries::postorder_cnums::Value","rustc_middle::query::queries::postorder_cnums::ProvidedValue","rustc_middle::query::queries::crates::Value","rustc_middle::query::queries::crates::ProvidedValue","rustc_middle::query::queries::used_crates::Value","rustc_middle::query::queries::used_crates::ProvidedValue","rustc_middle::query::queries::traits::Value","rustc_middle::query::queries::traits::ProvidedValue","rustc_middle::query::queries::trait_impls_in_crate::Value","rustc_middle::query::queries::trait_impls_in_crate::ProvidedValue","rustc_middle::query::queries::exportable_items::Value","rustc_middle::query::queries::exportable_items::ProvidedValue","rustc_middle::query::queries::exported_non_generic_symbols::Value","rustc_middle::query::queries::exported_non_generic_symbols::ProvidedValue","rustc_middle::query::queries::exported_generic_symbols::Value","rustc_middle::query::queries::exported_generic_symbols::ProvidedValue","rustc_middle::query::queries::deduced_param_attrs::Value","rustc_middle::query::queries::deduced_param_attrs::ProvidedValue","rustc_middle::query::queries::doc_link_traits_in_scope::Value","rustc_middle::query::queries::doc_link_traits_in_scope::ProvidedValue","rustc_middle::query::queries::stripped_cfg_items::Value","rustc_middle::query::queries::stripped_cfg_items::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BU;+N%5D%3E-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/array/equality.rs.html#80-82\">Source</a></span><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.array.html\">[U; N]</a>&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/array/equality.rs.html#85\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/array/equality.rs.html#89\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[U; N]>","rustc_middle::query::queries::inferred_outlives_of::Value","rustc_middle::query::queries::inferred_outlives_of::ProvidedValue","rustc_middle::query::queries::variances_of::Value","rustc_middle::query::queries::variances_of::ProvidedValue","rustc_middle::query::queries::associated_item_def_ids::Value","rustc_middle::query::queries::associated_item_def_ids::ProvidedValue","rustc_middle::query::queries::inherent_impls::Value","rustc_middle::query::queries::inherent_impls::ProvidedValue","rustc_middle::query::queries::incoherent_impls::Value","rustc_middle::query::queries::incoherent_impls::ProvidedValue","rustc_middle::query::queries::assumed_wf_types::Value","rustc_middle::query::queries::assumed_wf_types::ProvidedValue","rustc_middle::query::queries::assumed_wf_types_for_rpitit::Value","rustc_middle::query::queries::assumed_wf_types_for_rpitit::ProvidedValue","rustc_middle::query::queries::mir_inliner_callees::Value","rustc_middle::query::queries::mir_inliner_callees::ProvidedValue","rustc_middle::query::queries::attrs_for_def::Value","rustc_middle::query::queries::attrs_for_def::ProvidedValue","rustc_middle::query::queries::fn_arg_idents::Value","rustc_middle::query::queries::fn_arg_idents::ProvidedValue","rustc_middle::query::queries::own_existential_vtable_entries::Value","rustc_middle::query::queries::own_existential_vtable_entries::ProvidedValue","rustc_middle::query::queries::vtable_entries::Value","rustc_middle::query::queries::vtable_entries::ProvidedValue","rustc_middle::query::queries::local_trait_impls::Value","rustc_middle::query::queries::local_trait_impls::ProvidedValue","rustc_middle::query::queries::dyn_compatibility_violations::Value","rustc_middle::query::queries::dyn_compatibility_violations::ProvidedValue","rustc_middle::query::queries::dylib_dependency_formats::Value","rustc_middle::query::queries::dylib_dependency_formats::ProvidedValue","rustc_middle::query::queries::implementations_of_trait::Value","rustc_middle::query::queries::implementations_of_trait::ProvidedValue","rustc_middle::query::queries::crate_incoherent_impls::Value","rustc_middle::query::queries::crate_incoherent_impls::ProvidedValue","rustc_middle::query::queries::inherit_sig_for_delegation_item::Value","rustc_middle::query::queries::inherit_sig_for_delegation_item::ProvidedValue","rustc_middle::query::queries::opaque_captured_lifetimes::Value","rustc_middle::query::queries::opaque_captured_lifetimes::ProvidedValue","rustc_middle::query::queries::module_children::Value","rustc_middle::query::queries::module_children::ProvidedValue","rustc_middle::query::queries::defined_lang_items::Value","rustc_middle::query::queries::defined_lang_items::ProvidedValue","rustc_middle::query::queries::missing_lang_items::Value","rustc_middle::query::queries::missing_lang_items::ProvidedValue","rustc_middle::query::queries::postorder_cnums::Value","rustc_middle::query::queries::postorder_cnums::ProvidedValue","rustc_middle::query::queries::crates::Value","rustc_middle::query::queries::crates::ProvidedValue","rustc_middle::query::queries::used_crates::Value","rustc_middle::query::queries::used_crates::ProvidedValue","rustc_middle::query::queries::traits::Value","rustc_middle::query::queries::traits::ProvidedValue","rustc_middle::query::queries::trait_impls_in_crate::Value","rustc_middle::query::queries::trait_impls_in_crate::ProvidedValue","rustc_middle::query::queries::exportable_items::Value","rustc_middle::query::queries::exportable_items::ProvidedValue","rustc_middle::query::queries::exported_non_generic_symbols::Value","rustc_middle::query::queries::exported_non_generic_symbols::ProvidedValue","rustc_middle::query::queries::exported_generic_symbols::Value","rustc_middle::query::queries::exported_generic_symbols::ProvidedValue","rustc_middle::query::queries::deduced_param_attrs::Value","rustc_middle::query::queries::deduced_param_attrs::ProvidedValue","rustc_middle::query::queries::doc_link_traits_in_scope::Value","rustc_middle::query::queries::doc_link_traits_in_scope::ProvidedValue","rustc_middle::query::queries::stripped_cfg_items::Value","rustc_middle::query::queries::stripped_cfg_items::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/alloc/vec/partial_eq.rs.html#25\">Source</a></span><a href=\"#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A&gt;&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/alloc/vec/partial_eq.rs.html#25\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/alloc/vec/partial_eq.rs.html#25\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Vec<U, A>>","rustc_middle::query::queries::inferred_outlives_of::Value","rustc_middle::query::queries::inferred_outlives_of::ProvidedValue","rustc_middle::query::queries::variances_of::Value","rustc_middle::query::queries::variances_of::ProvidedValue","rustc_middle::query::queries::associated_item_def_ids::Value","rustc_middle::query::queries::associated_item_def_ids::ProvidedValue","rustc_middle::query::queries::inherent_impls::Value","rustc_middle::query::queries::inherent_impls::ProvidedValue","rustc_middle::query::queries::incoherent_impls::Value","rustc_middle::query::queries::incoherent_impls::ProvidedValue","rustc_middle::query::queries::assumed_wf_types::Value","rustc_middle::query::queries::assumed_wf_types::ProvidedValue","rustc_middle::query::queries::assumed_wf_types_for_rpitit::Value","rustc_middle::query::queries::assumed_wf_types_for_rpitit::ProvidedValue","rustc_middle::query::queries::mir_inliner_callees::Value","rustc_middle::query::queries::mir_inliner_callees::ProvidedValue","rustc_middle::query::queries::attrs_for_def::Value","rustc_middle::query::queries::attrs_for_def::ProvidedValue","rustc_middle::query::queries::fn_arg_idents::Value","rustc_middle::query::queries::fn_arg_idents::ProvidedValue","rustc_middle::query::queries::own_existential_vtable_entries::Value","rustc_middle::query::queries::own_existential_vtable_entries::ProvidedValue","rustc_middle::query::queries::vtable_entries::Value","rustc_middle::query::queries::vtable_entries::ProvidedValue","rustc_middle::query::queries::local_trait_impls::Value","rustc_middle::query::queries::local_trait_impls::ProvidedValue","rustc_middle::query::queries::dyn_compatibility_violations::Value","rustc_middle::query::queries::dyn_compatibility_violations::ProvidedValue","rustc_middle::query::queries::dylib_dependency_formats::Value","rustc_middle::query::queries::dylib_dependency_formats::ProvidedValue","rustc_middle::query::queries::implementations_of_trait::Value","rustc_middle::query::queries::implementations_of_trait::ProvidedValue","rustc_middle::query::queries::crate_incoherent_impls::Value","rustc_middle::query::queries::crate_incoherent_impls::ProvidedValue","rustc_middle::query::queries::inherit_sig_for_delegation_item::Value","rustc_middle::query::queries::inherit_sig_for_delegation_item::ProvidedValue","rustc_middle::query::queries::opaque_captured_lifetimes::Value","rustc_middle::query::queries::opaque_captured_lifetimes::ProvidedValue","rustc_middle::query::queries::module_children::Value","rustc_middle::query::queries::module_children::ProvidedValue","rustc_middle::query::queries::defined_lang_items::Value","rustc_middle::query::queries::defined_lang_items::ProvidedValue","rustc_middle::query::queries::missing_lang_items::Value","rustc_middle::query::queries::missing_lang_items::ProvidedValue","rustc_middle::query::queries::postorder_cnums::Value","rustc_middle::query::queries::postorder_cnums::ProvidedValue","rustc_middle::query::queries::crates::Value","rustc_middle::query::queries::crates::ProvidedValue","rustc_middle::query::queries::used_crates::Value","rustc_middle::query::queries::used_crates::ProvidedValue","rustc_middle::query::queries::traits::Value","rustc_middle::query::queries::traits::ProvidedValue","rustc_middle::query::queries::trait_impls_in_crate::Value","rustc_middle::query::queries::trait_impls_in_crate::ProvidedValue","rustc_middle::query::queries::exportable_items::Value","rustc_middle::query::queries::exportable_items::ProvidedValue","rustc_middle::query::queries::exported_non_generic_symbols::Value","rustc_middle::query::queries::exported_non_generic_symbols::ProvidedValue","rustc_middle::query::queries::exported_generic_symbols::Value","rustc_middle::query::queries::exported_generic_symbols::ProvidedValue","rustc_middle::query::queries::deduced_param_attrs::Value","rustc_middle::query::queries::deduced_param_attrs::ProvidedValue","rustc_middle::query::queries::doc_link_traits_in_scope::Value","rustc_middle::query::queries::doc_link_traits_in_scope::ProvidedValue","rustc_middle::query::queries::stripped_cfg_items::Value","rustc_middle::query::queries::stripped_cfg_items::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SliceLike-for-%26%5BT%5D\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustc_type_ir/inherent.rs.html#714\">Source</a><a href=\"#impl-SliceLike-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"rustc_middle/ty/inherent/trait.SliceLike.html\" title=\"trait rustc_middle::ty::inherent::SliceLike\">SliceLike</a> for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/rustc_type_ir/inherent.rs.html#715\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"rustc_middle/ty/inherent/trait.SliceLike.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/rustc_type_ir/inherent.rs.html#716\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"rustc_middle/ty/inherent/trait.SliceLike.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/iter/adapters/copied/struct.Copied.html\" title=\"struct core::iter::adapters::copied::Copied\">Copied</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'a, T&gt;&gt;</h4></section><section id=\"method.iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_type_ir/inherent.rs.html#718\">Source</a><a href=\"#method.iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_middle/ty/inherent/trait.SliceLike.html#tymethod.iter\" class=\"fn\">iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/iter/adapters/copied/struct.Copied.html\" title=\"struct core::iter::adapters::copied::Copied\">Copied</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'a, T&gt;&gt;</h4></section><section id=\"method.as_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_type_ir/inherent.rs.html#722\">Source</a><a href=\"#method.as_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_middle/ty/inherent/trait.SliceLike.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h4></section><section id=\"method.get\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_type_ir/inherent.rs.html#682\">Source</a><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_middle/ty/inherent/trait.SliceLike.html#method.get\" class=\"fn\">get</a>(self, idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"rustc_middle/ty/inherent/trait.SliceLike.html#associatedtype.Item\" title=\"type rustc_middle::ty::inherent::SliceLike::Item\">Item</a>&gt;</h4></section><section id=\"method.len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_type_ir/inherent.rs.html#686\">Source</a><a href=\"#method.len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_middle/ty/inherent/trait.SliceLike.html#method.len\" class=\"fn\">len</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section><section id=\"method.is_empty\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_type_ir/inherent.rs.html#690\">Source</a><a href=\"#method.is_empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_middle/ty/inherent/trait.SliceLike.html#method.is_empty\" class=\"fn\">is_empty</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section><section id=\"method.contains\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_type_ir/inherent.rs.html#694-696\">Source</a><a href=\"#method.contains\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_middle/ty/inherent/trait.SliceLike.html#method.contains\" class=\"fn\">contains</a>(self, t: &amp;Self::<a class=\"associatedtype\" href=\"rustc_middle/ty/inherent/trait.SliceLike.html#associatedtype.Item\" title=\"type rustc_middle::ty::inherent::SliceLike::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Self::<a class=\"associatedtype\" href=\"rustc_middle/ty/inherent/trait.SliceLike.html#associatedtype.Item\" title=\"type rustc_middle::ty::inherent::SliceLike::Item\">Item</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h4></section><section id=\"method.to_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_type_ir/inherent.rs.html#701\">Source</a><a href=\"#method.to_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_middle/ty/inherent/trait.SliceLike.html#method.to_vec\" class=\"fn\">to_vec</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"rustc_middle/ty/inherent/trait.SliceLike.html#associatedtype.Item\" title=\"type rustc_middle::ty::inherent::SliceLike::Item\">Item</a>&gt;</h4></section><section id=\"method.last\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_type_ir/inherent.rs.html#705\">Source</a><a href=\"#method.last\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_middle/ty/inherent/trait.SliceLike.html#method.last\" class=\"fn\">last</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"rustc_middle/ty/inherent/trait.SliceLike.html#associatedtype.Item\" title=\"type rustc_middle::ty::inherent::SliceLike::Item\">Item</a>&gt;</h4></section><section id=\"method.split_last\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_type_ir/inherent.rs.html#709\">Source</a><a href=\"#method.split_last\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_middle/ty/inherent/trait.SliceLike.html#method.split_last\" class=\"fn\">split_last</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&amp;Self::<a class=\"associatedtype\" href=\"rustc_middle/ty/inherent/trait.SliceLike.html#associatedtype.Item\" title=\"type rustc_middle::ty::inherent::SliceLike::Item\">Item</a>, &amp;[Self::<a class=\"associatedtype\" href=\"rustc_middle/ty/inherent/trait.SliceLike.html#associatedtype.Item\" title=\"type rustc_middle::ty::inherent::SliceLike::Item\">Item</a>])&gt;</h4></section></div></details>","SliceLike","rustc_middle::query::queries::inferred_outlives_of::Value","rustc_middle::query::queries::inferred_outlives_of::ProvidedValue","rustc_middle::query::queries::variances_of::Value","rustc_middle::query::queries::variances_of::ProvidedValue","rustc_middle::query::queries::associated_item_def_ids::Value","rustc_middle::query::queries::associated_item_def_ids::ProvidedValue","rustc_middle::query::queries::inherent_impls::Value","rustc_middle::query::queries::inherent_impls::ProvidedValue","rustc_middle::query::queries::incoherent_impls::Value","rustc_middle::query::queries::incoherent_impls::ProvidedValue","rustc_middle::query::queries::assumed_wf_types::Value","rustc_middle::query::queries::assumed_wf_types::ProvidedValue","rustc_middle::query::queries::assumed_wf_types_for_rpitit::Value","rustc_middle::query::queries::assumed_wf_types_for_rpitit::ProvidedValue","rustc_middle::query::queries::mir_inliner_callees::Value","rustc_middle::query::queries::mir_inliner_callees::ProvidedValue","rustc_middle::query::queries::attrs_for_def::Value","rustc_middle::query::queries::attrs_for_def::ProvidedValue","rustc_middle::query::queries::fn_arg_idents::Value","rustc_middle::query::queries::fn_arg_idents::ProvidedValue","rustc_middle::query::queries::own_existential_vtable_entries::Value","rustc_middle::query::queries::own_existential_vtable_entries::ProvidedValue","rustc_middle::query::queries::vtable_entries::Value","rustc_middle::query::queries::vtable_entries::ProvidedValue","rustc_middle::query::queries::local_trait_impls::Value","rustc_middle::query::queries::local_trait_impls::ProvidedValue","rustc_middle::query::queries::dyn_compatibility_violations::Value","rustc_middle::query::queries::dyn_compatibility_violations::ProvidedValue","rustc_middle::query::queries::dylib_dependency_formats::Value","rustc_middle::query::queries::dylib_dependency_formats::ProvidedValue","rustc_middle::query::queries::implementations_of_trait::Value","rustc_middle::query::queries::implementations_of_trait::ProvidedValue","rustc_middle::query::queries::crate_incoherent_impls::Value","rustc_middle::query::queries::crate_incoherent_impls::ProvidedValue","rustc_middle::query::queries::inherit_sig_for_delegation_item::Value","rustc_middle::query::queries::inherit_sig_for_delegation_item::ProvidedValue","rustc_middle::query::queries::opaque_captured_lifetimes::Value","rustc_middle::query::queries::opaque_captured_lifetimes::ProvidedValue","rustc_middle::query::queries::module_children::Value","rustc_middle::query::queries::module_children::ProvidedValue","rustc_middle::query::queries::defined_lang_items::Value","rustc_middle::query::queries::defined_lang_items::ProvidedValue","rustc_middle::query::queries::missing_lang_items::Value","rustc_middle::query::queries::missing_lang_items::ProvidedValue","rustc_middle::query::queries::postorder_cnums::Value","rustc_middle::query::queries::postorder_cnums::ProvidedValue","rustc_middle::query::queries::crates::Value","rustc_middle::query::queries::crates::ProvidedValue","rustc_middle::query::queries::used_crates::Value","rustc_middle::query::queries::used_crates::ProvidedValue","rustc_middle::query::queries::traits::Value","rustc_middle::query::queries::traits::ProvidedValue","rustc_middle::query::queries::trait_impls_in_crate::Value","rustc_middle::query::queries::trait_impls_in_crate::ProvidedValue","rustc_middle::query::queries::exportable_items::Value","rustc_middle::query::queries::exportable_items::ProvidedValue","rustc_middle::query::queries::exported_non_generic_symbols::Value","rustc_middle::query::queries::exported_non_generic_symbols::ProvidedValue","rustc_middle::query::queries::exported_generic_symbols::Value","rustc_middle::query::queries::exported_generic_symbols::ProvidedValue","rustc_middle::query::queries::deduced_param_attrs::Value","rustc_middle::query::queries::deduced_param_attrs::ProvidedValue","rustc_middle::query::queries::doc_link_traits_in_scope::Value","rustc_middle::query::queries::doc_link_traits_in_scope::ProvidedValue","rustc_middle::query::queries::stripped_cfg_items::Value","rustc_middle::query::queries::stripped_cfg_items::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Store%3CK,+V%3E-for-%26%5B(K,+V)%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/litemap/0.8.0/src/litemap/store/slice_impl.rs.html#18\">Source</a><a href=\"#impl-Store%3CK,+V%3E-for-%26%5B(K,+V)%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V&gt; <a class=\"trait\" href=\"https://docs.rs/litemap/0.8.0/litemap/store/trait.Store.html\" title=\"trait litemap::store::Store\">Store</a>&lt;K, V&gt; for &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.tuple.html\">(K, V)</a>]<div class=\"where\">where\n    K: 'a,\n    V: 'a,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/litemap/0.8.0/src/litemap/store/slice_impl.rs.html#20\">Source</a><a href=\"#method.lm_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/litemap/0.8.0/litemap/store/trait.Store.html#tymethod.lm_len\" class=\"fn\">lm_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of elements in the store.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_is_empty\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/litemap/0.8.0/src/litemap/store/slice_impl.rs.html#25\">Source</a><a href=\"#method.lm_is_empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/litemap/0.8.0/litemap/store/trait.Store.html#method.lm_is_empty\" class=\"fn\">lm_is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns whether the store is empty (contains 0 elements).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_get\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/litemap/0.8.0/src/litemap/store/slice_impl.rs.html#30\">Source</a><a href=\"#method.lm_get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/litemap/0.8.0/litemap/store/trait.Store.html#tymethod.lm_get\" class=\"fn\">lm_get</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;V</a>)&gt;</h4></section></summary><div class='docblock'>Gets a key/value pair at the specified index.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_last\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/litemap/0.8.0/src/litemap/store/slice_impl.rs.html#35\">Source</a><a href=\"#method.lm_last\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/litemap/0.8.0/litemap/store/trait.Store.html#method.lm_last\" class=\"fn\">lm_last</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;V</a>)&gt;</h4></section></summary><div class='docblock'>Gets the last element in the store, or <code>None</code> if the store is empty.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_binary_search_by\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/litemap/0.8.0/src/litemap/store/slice_impl.rs.html#40-42\">Source</a><a href=\"#method.lm_binary_search_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/litemap/0.8.0/litemap/store/trait.Store.html#tymethod.lm_binary_search_by\" class=\"fn\">lm_binary_search_by</a>&lt;F&gt;(&amp;self, cmp: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;K</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class='docblock'>Searches the store for a particular element with a comparator function. <a href=\"https://docs.rs/litemap/0.8.0/litemap/store/trait.Store.html#tymethod.lm_binary_search_by\">Read more</a></div></details></div></details>","Store<K, V>","rustc_middle::query::queries::inferred_outlives_of::Value","rustc_middle::query::queries::inferred_outlives_of::ProvidedValue","rustc_middle::query::queries::assumed_wf_types::Value","rustc_middle::query::queries::assumed_wf_types::ProvidedValue","rustc_middle::query::queries::assumed_wf_types_for_rpitit::Value","rustc_middle::query::queries::assumed_wf_types_for_rpitit::ProvidedValue","rustc_middle::query::queries::mir_inliner_callees::Value","rustc_middle::query::queries::mir_inliner_callees::ProvidedValue","rustc_middle::query::queries::dylib_dependency_formats::Value","rustc_middle::query::queries::dylib_dependency_formats::ProvidedValue","rustc_middle::query::queries::implementations_of_trait::Value","rustc_middle::query::queries::implementations_of_trait::ProvidedValue","rustc_middle::query::queries::opaque_captured_lifetimes::Value","rustc_middle::query::queries::opaque_captured_lifetimes::ProvidedValue","rustc_middle::query::queries::defined_lang_items::Value","rustc_middle::query::queries::defined_lang_items::ProvidedValue","rustc_middle::query::queries::exported_non_generic_symbols::Value","rustc_middle::query::queries::exported_non_generic_symbols::ProvidedValue","rustc_middle::query::queries::exported_generic_symbols::Value","rustc_middle::query::queries::exported_generic_symbols::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StoreConstEmpty%3CK,+V%3E-for-%26%5B(K,+V)%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/litemap/0.8.0/src/litemap/store/slice_impl.rs.html#14\">Source</a><a href=\"#impl-StoreConstEmpty%3CK,+V%3E-for-%26%5B(K,+V)%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V&gt; <a class=\"trait\" href=\"https://docs.rs/litemap/0.8.0/litemap/store/trait.StoreConstEmpty.html\" title=\"trait litemap::store::StoreConstEmpty\">StoreConstEmpty</a>&lt;K, V&gt; for &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.tuple.html\">(K, V)</a>]<div class=\"where\">where\n    K: 'a,\n    V: 'a,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.EMPTY\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/litemap/0.8.0/src/litemap/store/slice_impl.rs.html#15\">Source</a><a href=\"#associatedconstant.EMPTY\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"https://docs.rs/litemap/0.8.0/litemap/store/trait.StoreConstEmpty.html#associatedconstant.EMPTY\" class=\"constant\">EMPTY</a>: &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.tuple.html\">(K, V)</a>]</h4></section></summary><div class='docblock'>An empty store</div></details></div></details>","StoreConstEmpty<K, V>","rustc_middle::query::queries::inferred_outlives_of::Value","rustc_middle::query::queries::inferred_outlives_of::ProvidedValue","rustc_middle::query::queries::assumed_wf_types::Value","rustc_middle::query::queries::assumed_wf_types::ProvidedValue","rustc_middle::query::queries::assumed_wf_types_for_rpitit::Value","rustc_middle::query::queries::assumed_wf_types_for_rpitit::ProvidedValue","rustc_middle::query::queries::mir_inliner_callees::Value","rustc_middle::query::queries::mir_inliner_callees::ProvidedValue","rustc_middle::query::queries::dylib_dependency_formats::Value","rustc_middle::query::queries::dylib_dependency_formats::ProvidedValue","rustc_middle::query::queries::implementations_of_trait::Value","rustc_middle::query::queries::implementations_of_trait::ProvidedValue","rustc_middle::query::queries::opaque_captured_lifetimes::Value","rustc_middle::query::queries::opaque_captured_lifetimes::ProvidedValue","rustc_middle::query::queries::defined_lang_items::Value","rustc_middle::query::queries::defined_lang_items::ProvidedValue","rustc_middle::query::queries::exported_non_generic_symbols::Value","rustc_middle::query::queries::exported_non_generic_symbols::ProvidedValue","rustc_middle::query::queries::exported_generic_symbols::Value","rustc_middle::query::queries::exported_generic_symbols::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StoreIterable%3C'a,+K,+V%3E-for-%26%5B(K,+V)%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/litemap/0.8.0/src/litemap/store/slice_impl.rs.html#56\">Source</a><a href=\"#impl-StoreIterable%3C'a,+K,+V%3E-for-%26%5B(K,+V)%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V&gt; <a class=\"trait\" href=\"https://docs.rs/litemap/0.8.0/litemap/store/trait.StoreIterable.html\" title=\"trait litemap::store::StoreIterable\">StoreIterable</a>&lt;'a, K, V&gt; for &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.tuple.html\">(K, V)</a>]<div class=\"where\">where\n    K: 'a,\n    V: 'a,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.KeyValueIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/litemap/0.8.0/src/litemap/store/slice_impl.rs.html#57\">Source</a><a href=\"#associatedtype.KeyValueIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/litemap/0.8.0/litemap/store/trait.StoreIterable.html#associatedtype.KeyValueIter\" class=\"associatedtype\">KeyValueIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/iter/adapters/map/struct.Map.html\" title=\"struct core::iter::adapters::map::Map\">Map</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.tuple.html\">(K, V)</a>&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.fn.html\">fn</a>(&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.tuple.html\">(K, V)</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;V</a>)&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/litemap/0.8.0/src/litemap/store/slice_impl.rs.html#60\">Source</a><a href=\"#method.lm_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/litemap/0.8.0/litemap/store/trait.StoreIterable.html#tymethod.lm_iter\" class=\"fn\">lm_iter</a>(&amp;'a self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/iter/adapters/map/struct.Map.html\" title=\"struct core::iter::adapters::map::Map\">Map</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.tuple.html\">(K, V)</a>&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.fn.html\">fn</a>(&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.tuple.html\">(K, V)</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;V</a>)&gt;</h4></section></summary><div class='docblock'>Returns an iterator over key/value pairs.</div></details></div></details>","StoreIterable<'a, K, V>","rustc_middle::query::queries::inferred_outlives_of::Value","rustc_middle::query::queries::inferred_outlives_of::ProvidedValue","rustc_middle::query::queries::assumed_wf_types::Value","rustc_middle::query::queries::assumed_wf_types::ProvidedValue","rustc_middle::query::queries::assumed_wf_types_for_rpitit::Value","rustc_middle::query::queries::assumed_wf_types_for_rpitit::ProvidedValue","rustc_middle::query::queries::mir_inliner_callees::Value","rustc_middle::query::queries::mir_inliner_callees::ProvidedValue","rustc_middle::query::queries::dylib_dependency_formats::Value","rustc_middle::query::queries::dylib_dependency_formats::ProvidedValue","rustc_middle::query::queries::implementations_of_trait::Value","rustc_middle::query::queries::implementations_of_trait::ProvidedValue","rustc_middle::query::queries::opaque_captured_lifetimes::Value","rustc_middle::query::queries::opaque_captured_lifetimes::ProvidedValue","rustc_middle::query::queries::defined_lang_items::Value","rustc_middle::query::queries::defined_lang_items::ProvidedValue","rustc_middle::query::queries::exported_non_generic_symbols::Value","rustc_middle::query::queries::exported_non_generic_symbols::ProvidedValue","rustc_middle::query::queries::exported_generic_symbols::Value","rustc_middle::query::queries::exported_generic_symbols::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StoreSlice%3CK,+V%3E-for-%26%5B(K,+V)%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/litemap/0.8.0/src/litemap/store/slice_impl.rs.html#48\">Source</a><a href=\"#impl-StoreSlice%3CK,+V%3E-for-%26%5B(K,+V)%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"https://docs.rs/litemap/0.8.0/litemap/store/trait.StoreSlice.html\" title=\"trait litemap::store::StoreSlice\">StoreSlice</a>&lt;K, V&gt; for &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.tuple.html\">(K, V)</a>]</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Slice\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/litemap/0.8.0/src/litemap/store/slice_impl.rs.html#49\">Source</a><a href=\"#associatedtype.Slice\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/litemap/0.8.0/litemap/store/trait.StoreSlice.html#associatedtype.Slice\" class=\"associatedtype\">Slice</a> = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.tuple.html\">(K, V)</a>]</h4></section><section id=\"method.lm_get_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/litemap/0.8.0/src/litemap/store/slice_impl.rs.html#51\">Source</a><a href=\"#method.lm_get_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/litemap/0.8.0/litemap/store/trait.StoreSlice.html#tymethod.lm_get_range\" class=\"fn\">lm_get_range</a>(&amp;self, range: <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.tuple.html\">(K, V)</a>]&gt;</h4></section></div></details>","StoreSlice<K, V>","rustc_middle::query::queries::inferred_outlives_of::Value","rustc_middle::query::queries::inferred_outlives_of::ProvidedValue","rustc_middle::query::queries::assumed_wf_types::Value","rustc_middle::query::queries::assumed_wf_types::ProvidedValue","rustc_middle::query::queries::assumed_wf_types_for_rpitit::Value","rustc_middle::query::queries::assumed_wf_types_for_rpitit::ProvidedValue","rustc_middle::query::queries::mir_inliner_callees::Value","rustc_middle::query::queries::mir_inliner_callees::ProvidedValue","rustc_middle::query::queries::dylib_dependency_formats::Value","rustc_middle::query::queries::dylib_dependency_formats::ProvidedValue","rustc_middle::query::queries::implementations_of_trait::Value","rustc_middle::query::queries::implementations_of_trait::ProvidedValue","rustc_middle::query::queries::opaque_captured_lifetimes::Value","rustc_middle::query::queries::opaque_captured_lifetimes::ProvidedValue","rustc_middle::query::queries::defined_lang_items::Value","rustc_middle::query::queries::defined_lang_items::ProvidedValue","rustc_middle::query::queries::exported_non_generic_symbols::Value","rustc_middle::query::queries::exported_non_generic_symbols::ProvidedValue","rustc_middle::query::queries::exported_generic_symbols::Value","rustc_middle::query::queries::exported_generic_symbols::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeVisitable%3CI%3E-for-%26%5BT%5D\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustc_type_ir/visit.rs.html#206\">Source</a><a href=\"#impl-TypeVisitable%3CI%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; <a class=\"trait\" href=\"rustc_middle/ty/trait.TypeVisitable.html\" title=\"trait rustc_middle::ty::TypeVisitable\">TypeVisitable</a>&lt;I&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"rustc_middle/ty/trait.Interner.html\" title=\"trait rustc_middle::ty::Interner\">Interner</a>,\n    T: <a class=\"trait\" href=\"rustc_middle/ty/trait.TypeVisitable.html\" title=\"trait rustc_middle::ty::TypeVisitable\">TypeVisitable</a>&lt;I&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.visit_with\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_type_ir/visit.rs.html#207\">Source</a><a href=\"#method.visit_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_middle/ty/trait.TypeVisitable.html#tymethod.visit_with\" class=\"fn\">visit_with</a>&lt;V&gt;(&amp;self, visitor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;mut V</a>) -&gt; &lt;V as <a class=\"trait\" href=\"rustc_middle/ty/trait.TypeVisitor.html\" title=\"trait rustc_middle::ty::TypeVisitor\">TypeVisitor</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"rustc_middle/ty/trait.TypeVisitor.html#associatedtype.Result\" title=\"type rustc_middle::ty::TypeVisitor::Result\">Result</a><div class=\"where\">where\n    V: <a class=\"trait\" href=\"rustc_middle/ty/trait.TypeVisitor.html\" title=\"trait rustc_middle::ty::TypeVisitor\">TypeVisitor</a>&lt;I&gt;,</div></h4></section></summary><div class='docblock'>The entry point for visiting. To visit a value <code>t</code> with a visitor <code>v</code>\ncall: <code>t.visit_with(v)</code>. <a href=\"rustc_middle/ty/trait.TypeVisitable.html#tymethod.visit_with\">Read more</a></div></details></div></details>","TypeVisitable<I>","rustc_middle::query::queries::inferred_outlives_of::Value","rustc_middle::query::queries::inferred_outlives_of::ProvidedValue","rustc_middle::query::queries::variances_of::Value","rustc_middle::query::queries::variances_of::ProvidedValue","rustc_middle::query::queries::associated_item_def_ids::Value","rustc_middle::query::queries::associated_item_def_ids::ProvidedValue","rustc_middle::query::queries::inherent_impls::Value","rustc_middle::query::queries::inherent_impls::ProvidedValue","rustc_middle::query::queries::incoherent_impls::Value","rustc_middle::query::queries::incoherent_impls::ProvidedValue","rustc_middle::query::queries::assumed_wf_types::Value","rustc_middle::query::queries::assumed_wf_types::ProvidedValue","rustc_middle::query::queries::assumed_wf_types_for_rpitit::Value","rustc_middle::query::queries::assumed_wf_types_for_rpitit::ProvidedValue","rustc_middle::query::queries::mir_inliner_callees::Value","rustc_middle::query::queries::mir_inliner_callees::ProvidedValue","rustc_middle::query::queries::attrs_for_def::Value","rustc_middle::query::queries::attrs_for_def::ProvidedValue","rustc_middle::query::queries::fn_arg_idents::Value","rustc_middle::query::queries::fn_arg_idents::ProvidedValue","rustc_middle::query::queries::own_existential_vtable_entries::Value","rustc_middle::query::queries::own_existential_vtable_entries::ProvidedValue","rustc_middle::query::queries::vtable_entries::Value","rustc_middle::query::queries::vtable_entries::ProvidedValue","rustc_middle::query::queries::local_trait_impls::Value","rustc_middle::query::queries::local_trait_impls::ProvidedValue","rustc_middle::query::queries::dyn_compatibility_violations::Value","rustc_middle::query::queries::dyn_compatibility_violations::ProvidedValue","rustc_middle::query::queries::dylib_dependency_formats::Value","rustc_middle::query::queries::dylib_dependency_formats::ProvidedValue","rustc_middle::query::queries::implementations_of_trait::Value","rustc_middle::query::queries::implementations_of_trait::ProvidedValue","rustc_middle::query::queries::crate_incoherent_impls::Value","rustc_middle::query::queries::crate_incoherent_impls::ProvidedValue","rustc_middle::query::queries::inherit_sig_for_delegation_item::Value","rustc_middle::query::queries::inherit_sig_for_delegation_item::ProvidedValue","rustc_middle::query::queries::opaque_captured_lifetimes::Value","rustc_middle::query::queries::opaque_captured_lifetimes::ProvidedValue","rustc_middle::query::queries::module_children::Value","rustc_middle::query::queries::module_children::ProvidedValue","rustc_middle::query::queries::defined_lang_items::Value","rustc_middle::query::queries::defined_lang_items::ProvidedValue","rustc_middle::query::queries::missing_lang_items::Value","rustc_middle::query::queries::missing_lang_items::ProvidedValue","rustc_middle::query::queries::postorder_cnums::Value","rustc_middle::query::queries::postorder_cnums::ProvidedValue","rustc_middle::query::queries::crates::Value","rustc_middle::query::queries::crates::ProvidedValue","rustc_middle::query::queries::used_crates::Value","rustc_middle::query::queries::used_crates::ProvidedValue","rustc_middle::query::queries::traits::Value","rustc_middle::query::queries::traits::ProvidedValue","rustc_middle::query::queries::trait_impls_in_crate::Value","rustc_middle::query::queries::trait_impls_in_crate::ProvidedValue","rustc_middle::query::queries::exportable_items::Value","rustc_middle::query::queries::exportable_items::ProvidedValue","rustc_middle::query::queries::exported_non_generic_symbols::Value","rustc_middle::query::queries::exported_non_generic_symbols::ProvidedValue","rustc_middle::query::queries::exported_generic_symbols::Value","rustc_middle::query::queries::exported_generic_symbols::ProvidedValue","rustc_middle::query::queries::deduced_param_attrs::Value","rustc_middle::query::queries::deduced_param_attrs::ProvidedValue","rustc_middle::query::queries::doc_link_traits_in_scope::Value","rustc_middle::query::queries::doc_link_traits_in_scope::ProvidedValue","rustc_middle::query::queries::stripped_cfg_items::Value","rustc_middle::query::queries::stripped_cfg_items::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Value%3CTyCtxt%3C'tcx%3E%3E-for-%26%5BVariance%5D\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustc_middle/values.rs.html#135-162\">Source</a><a href=\"#impl-Value%3CTyCtxt%3C'tcx%3E%3E-for-%26%5BVariance%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'tcx&gt; <a class=\"trait\" href=\"rustc_query_system/values/trait.Value.html\" title=\"trait rustc_query_system::values::Value\">Value</a>&lt;<a class=\"struct\" href=\"rustc_middle/ty/struct.TyCtxt.html\" title=\"struct rustc_middle::ty::TyCtxt\">TyCtxt</a>&lt;'tcx&gt;&gt; for &amp;[<a class=\"enum\" href=\"rustc_middle/ty/enum.Variance.html\" title=\"enum rustc_middle::ty::Variance\">Variance</a>]</h3></section></summary><div class=\"impl-items\"><section id=\"method.from_cycle_error\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_middle/values.rs.html#136-161\">Source</a><a href=\"#method.from_cycle_error\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_query_system/values/trait.Value.html#tymethod.from_cycle_error\" class=\"fn\">from_cycle_error</a>(\n    tcx: <a class=\"struct\" href=\"rustc_middle/ty/struct.TyCtxt.html\" title=\"struct rustc_middle::ty::TyCtxt\">TyCtxt</a>&lt;'tcx&gt;,\n    cycle_error: &amp;<a class=\"struct\" href=\"rustc_query_system/query/plumbing/struct.CycleError.html\" title=\"struct rustc_query_system::query::plumbing::CycleError\">CycleError</a>,\n    _guar: <a class=\"struct\" href=\"rustc_span/struct.ErrorGuaranteed.html\" title=\"struct rustc_span::ErrorGuaranteed\">ErrorGuaranteed</a>,\n) -&gt; Self</h4></section></div></details>","Value<TyCtxt<'tcx>>","rustc_middle::query::queries::variances_of::Value","rustc_middle::query::queries::variances_of::ProvidedValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ZeroFrom%3C'zf,+%5BT%5D%3E-for-%26%5BT%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerofrom/0.1.6/src/zerofrom/zero_from.rs.html#125\">Source</a><a href=\"#impl-ZeroFrom%3C'zf,+%5BT%5D%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'zf, T&gt; <a class=\"trait\" href=\"https://docs.rs/zerofrom/0.1.6/zerofrom/zero_from/trait.ZeroFrom.html\" title=\"trait zerofrom::zero_from::ZeroFrom\">ZeroFrom</a>&lt;'zf, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a>&gt; for &amp;'zf <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerofrom/0.1.6/src/zerofrom/zero_from.rs.html#127\">Source</a><a href=\"#method.zero_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerofrom/0.1.6/zerofrom/zero_from/trait.ZeroFrom.html#tymethod.zero_from\" class=\"fn\">zero_from</a>(other: &amp;'zf <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a>) -&gt; &amp;'zf <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Clone the other <code>C</code> into a struct that may retain references into <code>C</code>.</div></details></div></details>","ZeroFrom<'zf, [T]>","rustc_middle::query::queries::inferred_outlives_of::Value","rustc_middle::query::queries::inferred_outlives_of::ProvidedValue","rustc_middle::query::queries::variances_of::Value","rustc_middle::query::queries::variances_of::ProvidedValue","rustc_middle::query::queries::associated_item_def_ids::Value","rustc_middle::query::queries::associated_item_def_ids::ProvidedValue","rustc_middle::query::queries::inherent_impls::Value","rustc_middle::query::queries::inherent_impls::ProvidedValue","rustc_middle::query::queries::incoherent_impls::Value","rustc_middle::query::queries::incoherent_impls::ProvidedValue","rustc_middle::query::queries::assumed_wf_types::Value","rustc_middle::query::queries::assumed_wf_types::ProvidedValue","rustc_middle::query::queries::assumed_wf_types_for_rpitit::Value","rustc_middle::query::queries::assumed_wf_types_for_rpitit::ProvidedValue","rustc_middle::query::queries::mir_inliner_callees::Value","rustc_middle::query::queries::mir_inliner_callees::ProvidedValue","rustc_middle::query::queries::attrs_for_def::Value","rustc_middle::query::queries::attrs_for_def::ProvidedValue","rustc_middle::query::queries::fn_arg_idents::Value","rustc_middle::query::queries::fn_arg_idents::ProvidedValue","rustc_middle::query::queries::own_existential_vtable_entries::Value","rustc_middle::query::queries::own_existential_vtable_entries::ProvidedValue","rustc_middle::query::queries::vtable_entries::Value","rustc_middle::query::queries::vtable_entries::ProvidedValue","rustc_middle::query::queries::local_trait_impls::Value","rustc_middle::query::queries::local_trait_impls::ProvidedValue","rustc_middle::query::queries::dyn_compatibility_violations::Value","rustc_middle::query::queries::dyn_compatibility_violations::ProvidedValue","rustc_middle::query::queries::dylib_dependency_formats::Value","rustc_middle::query::queries::dylib_dependency_formats::ProvidedValue","rustc_middle::query::queries::implementations_of_trait::Value","rustc_middle::query::queries::implementations_of_trait::ProvidedValue","rustc_middle::query::queries::crate_incoherent_impls::Value","rustc_middle::query::queries::crate_incoherent_impls::ProvidedValue","rustc_middle::query::queries::inherit_sig_for_delegation_item::Value","rustc_middle::query::queries::inherit_sig_for_delegation_item::ProvidedValue","rustc_middle::query::queries::opaque_captured_lifetimes::Value","rustc_middle::query::queries::opaque_captured_lifetimes::ProvidedValue","rustc_middle::query::queries::module_children::Value","rustc_middle::query::queries::module_children::ProvidedValue","rustc_middle::query::queries::defined_lang_items::Value","rustc_middle::query::queries::defined_lang_items::ProvidedValue","rustc_middle::query::queries::missing_lang_items::Value","rustc_middle::query::queries::missing_lang_items::ProvidedValue","rustc_middle::query::queries::postorder_cnums::Value","rustc_middle::query::queries::postorder_cnums::ProvidedValue","rustc_middle::query::queries::crates::Value","rustc_middle::query::queries::crates::ProvidedValue","rustc_middle::query::queries::used_crates::Value","rustc_middle::query::queries::used_crates::ProvidedValue","rustc_middle::query::queries::traits::Value","rustc_middle::query::queries::traits::ProvidedValue","rustc_middle::query::queries::trait_impls_in_crate::Value","rustc_middle::query::queries::trait_impls_in_crate::ProvidedValue","rustc_middle::query::queries::exportable_items::Value","rustc_middle::query::queries::exportable_items::ProvidedValue","rustc_middle::query::queries::exported_non_generic_symbols::Value","rustc_middle::query::queries::exported_non_generic_symbols::ProvidedValue","rustc_middle::query::queries::exported_generic_symbols::Value","rustc_middle::query::queries::exported_generic_symbols::ProvidedValue","rustc_middle::query::queries::deduced_param_attrs::Value","rustc_middle::query::queries::deduced_param_attrs::ProvidedValue","rustc_middle::query::queries::doc_link_traits_in_scope::Value","rustc_middle::query::queries::doc_link_traits_in_scope::ProvidedValue","rustc_middle::query::queries::stripped_cfg_items::Value","rustc_middle::query::queries::stripped_cfg_items::ProvidedValue"]]],["rustc_session",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CZeroSlice%3CT%3E%3E-for-%26%5B%3CT+as+AsULE%3E::ULE%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/zerovec/slice.rs.html#581\">Source</a><a href=\"#impl-AsRef%3CZeroSlice%3CT%3E%3E-for-%26%5B%3CT+as+AsULE%3E::ULE%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/zerovec/slice/struct.ZeroSlice.html\" title=\"struct zerovec::zerovec::slice::ZeroSlice\">ZeroSlice</a>&lt;T&gt;&gt; for &amp;[&lt;T as <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.AsULE.html#associatedtype.ULE\" title=\"type zerovec::ule::AsULE::ULE\">ULE</a>]<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/zerovec/slice.rs.html#582\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/zerovec/slice/struct.ZeroSlice.html\" title=\"struct zerovec::zerovec::slice::ZeroSlice\">ZeroSlice</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<ZeroSlice<T>>","rustc_session::options::OptionDescrs"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143894\" title=\"Tracking issue for const_default\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/slice/mod.rs.html#5125\">Source</a></span><a href=\"#impl-Default-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/mod.rs.html#5127\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Creates an empty slice.</p>\n</div></details></div></details>","Default","rustc_session::options::OptionDescrs"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-%26%5BE%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#245-249\">Source</a><a href=\"#impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-%26%5BE%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E, F&gt; <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::encode::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;<a class=\"struct\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/varzerovec/slice/struct.VarZeroSlice.html\" title=\"struct zerovec::varzerovec::slice::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[E]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    E: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::encode::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;T&gt;,\n    F: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/varzerovec/components/trait.VarZeroVecFormat.html\" title=\"trait zerovec::varzerovec::components::VarZeroVecFormat\">VarZeroVecFormat</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#251\">Source</a><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\" class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#257\">Source</a><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#261\">Source</a><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_write\" class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" title=\"method zerovec::ule::encode::EncodeAsVarULE::encode_var_ule_len::encode_var_ule_len\"><code>Self::encode_var_ule_len()</code></a></div></details></div></details>","EncodeAsVarULE<VarZeroSlice<T, F>>","rustc_session::options::OptionDescrs"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-%26%5BT%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#179-181\">Source</a><a href=\"#impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::encode::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;<a class=\"struct\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/zerovec/slice/struct.ZeroSlice.html\" title=\"struct zerovec::zerovec::slice::ZeroSlice\">ZeroSlice</a>&lt;T&gt;&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#183\">Source</a><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\" class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#189\">Source</a><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#193\">Source</a><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_write\" class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" title=\"method zerovec::ule::encode::EncodeAsVarULE::encode_var_ule_len::encode_var_ule_len\"><code>Self::encode_var_ule_len()</code></a></div></details></div></details>","EncodeAsVarULE<ZeroSlice<T>>","rustc_session::options::OptionDescrs"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#21\">Source</a></span><a href=\"#impl-IntoIterator-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#22\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;'a T</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#23\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'a, T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#25\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'a, T&gt;</h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","rustc_session::options::OptionDescrs"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoSliceIdx%3CI,+%5BT%5D%3E-for-I\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustc_index/idx.rs.html#55\">Source</a><a href=\"#impl-IntoSliceIdx%3CI,+%5BT%5D%3E-for-I\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; <a class=\"trait\" href=\"rustc_index/idx/trait.IntoSliceIdx.html\" title=\"trait rustc_index::idx::IntoSliceIdx\">IntoSliceIdx</a>&lt;I, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a>&gt; for I<div class=\"where\">where\n    I: <a class=\"trait\" href=\"rustc_index/idx/trait.Idx.html\" title=\"trait rustc_index::idx::Idx\">Idx</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/rustc_index/idx.rs.html#56\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"rustc_index/idx/trait.IntoSliceIdx.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section><section id=\"method.into_slice_idx\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_index/idx.rs.html#58\">Source</a><a href=\"#method.into_slice_idx\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_index/idx/trait.IntoSliceIdx.html#tymethod.into_slice_idx\" class=\"fn\">into_slice_idx</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></div></details>","IntoSliceIdx<I, [T]>","rustc_session::options::OptionDescrs"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BU;+N%5D%3E-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/array/equality.rs.html#80-82\">Source</a></span><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.array.html\">[U; N]</a>&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/array/equality.rs.html#85\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/array/equality.rs.html#89\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[U; N]>","rustc_session::options::OptionDescrs"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/alloc/vec/partial_eq.rs.html#25\">Source</a></span><a href=\"#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A&gt;&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/alloc/vec/partial_eq.rs.html#25\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/alloc/vec/partial_eq.rs.html#25\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Vec<U, A>>","rustc_session::options::OptionDescrs"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ZeroFrom%3C'zf,+%5BT%5D%3E-for-%26%5BT%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerofrom/0.1.6/src/zerofrom/zero_from.rs.html#125\">Source</a><a href=\"#impl-ZeroFrom%3C'zf,+%5BT%5D%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'zf, T&gt; <a class=\"trait\" href=\"https://docs.rs/zerofrom/0.1.6/zerofrom/zero_from/trait.ZeroFrom.html\" title=\"trait zerofrom::zero_from::ZeroFrom\">ZeroFrom</a>&lt;'zf, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a>&gt; for &amp;'zf <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerofrom/0.1.6/src/zerofrom/zero_from.rs.html#127\">Source</a><a href=\"#method.zero_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerofrom/0.1.6/zerofrom/zero_from/trait.ZeroFrom.html#tymethod.zero_from\" class=\"fn\">zero_from</a>(other: &amp;'zf <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a>) -&gt; &amp;'zf <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Clone the other <code>C</code> into a struct that may retain references into <code>C</code>.</div></details></div></details>","ZeroFrom<'zf, [T]>","rustc_session::options::OptionDescrs"]]],["rustc_target",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CZeroSlice%3CT%3E%3E-for-%26%5B%3CT+as+AsULE%3E::ULE%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/zerovec/slice.rs.html#581\">Source</a><a href=\"#impl-AsRef%3CZeroSlice%3CT%3E%3E-for-%26%5B%3CT+as+AsULE%3E::ULE%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/zerovec/slice/struct.ZeroSlice.html\" title=\"struct zerovec::zerovec::slice::ZeroSlice\">ZeroSlice</a>&lt;T&gt;&gt; for &amp;[&lt;T as <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.AsULE.html#associatedtype.ULE\" title=\"type zerovec::ule::AsULE::ULE\">ULE</a>]<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/zerovec/slice.rs.html#582\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/zerovec/slice/struct.ZeroSlice.html\" title=\"struct zerovec::zerovec::slice::ZeroSlice\">ZeroSlice</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<ZeroSlice<T>>","rustc_target::target_features::ImpliedFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143894\" title=\"Tracking issue for const_default\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/slice/mod.rs.html#5125\">Source</a></span><a href=\"#impl-Default-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/mod.rs.html#5127\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Creates an empty slice.</p>\n</div></details></div></details>","Default","rustc_target::target_features::ImpliedFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-%26%5BE%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#245-249\">Source</a><a href=\"#impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-%26%5BE%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E, F&gt; <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::encode::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;<a class=\"struct\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/varzerovec/slice/struct.VarZeroSlice.html\" title=\"struct zerovec::varzerovec::slice::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[E]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    E: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::encode::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;T&gt;,\n    F: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/varzerovec/components/trait.VarZeroVecFormat.html\" title=\"trait zerovec::varzerovec::components::VarZeroVecFormat\">VarZeroVecFormat</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#251\">Source</a><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\" class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#257\">Source</a><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#261\">Source</a><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_write\" class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" title=\"method zerovec::ule::encode::EncodeAsVarULE::encode_var_ule_len::encode_var_ule_len\"><code>Self::encode_var_ule_len()</code></a></div></details></div></details>","EncodeAsVarULE<VarZeroSlice<T, F>>","rustc_target::target_features::ImpliedFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-%26%5BT%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#179-181\">Source</a><a href=\"#impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::encode::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;<a class=\"struct\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/zerovec/slice/struct.ZeroSlice.html\" title=\"struct zerovec::zerovec::slice::ZeroSlice\">ZeroSlice</a>&lt;T&gt;&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#183\">Source</a><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\" class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#189\">Source</a><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerovec/0.11.4/src/zerovec/ule/encode.rs.html#193\">Source</a><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_write\" class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of <a href=\"https://docs.rs/zerovec/0.11.4/zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" title=\"method zerovec::ule::encode::EncodeAsVarULE::encode_var_ule_len::encode_var_ule_len\"><code>Self::encode_var_ule_len()</code></a></div></details></div></details>","EncodeAsVarULE<ZeroSlice<T>>","rustc_target::target_features::ImpliedFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#21\">Source</a></span><a href=\"#impl-IntoIterator-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#22\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;'a T</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#23\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'a, T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#25\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'a, T&gt;</h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","rustc_target::target_features::ImpliedFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoSliceIdx%3CI,+%5BT%5D%3E-for-I\" class=\"impl\"><a href=\"#impl-IntoSliceIdx%3CI,+%5BT%5D%3E-for-I\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; IntoSliceIdx&lt;I, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a>&gt; for I<div class=\"where\">where\n    I: Idx,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section><section id=\"method.into_slice_idx\" class=\"method trait-impl\"><a href=\"#method.into_slice_idx\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_slice_idx</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></div></details>","IntoSliceIdx<I, [T]>","rustc_target::target_features::ImpliedFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BU;+N%5D%3E-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/array/equality.rs.html#80-82\">Source</a></span><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.array.html\">[U; N]</a>&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/array/equality.rs.html#85\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/array/equality.rs.html#89\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[U; N]>","rustc_target::target_features::ImpliedFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/alloc/vec/partial_eq.rs.html#25\">Source</a></span><a href=\"#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A&gt;&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/alloc/vec/partial_eq.rs.html#25\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/alloc/vec/partial_eq.rs.html#25\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Vec<U, A>>","rustc_target::target_features::ImpliedFeatures"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ZeroFrom%3C'zf,+%5BT%5D%3E-for-%26%5BT%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerofrom/0.1.6/src/zerofrom/zero_from.rs.html#125\">Source</a><a href=\"#impl-ZeroFrom%3C'zf,+%5BT%5D%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'zf, T&gt; <a class=\"trait\" href=\"https://docs.rs/zerofrom/0.1.6/zerofrom/zero_from/trait.ZeroFrom.html\" title=\"trait zerofrom::zero_from::ZeroFrom\">ZeroFrom</a>&lt;'zf, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a>&gt; for &amp;'zf <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/zerofrom/0.1.6/src/zerofrom/zero_from.rs.html#127\">Source</a><a href=\"#method.zero_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/zerofrom/0.1.6/zerofrom/zero_from/trait.ZeroFrom.html#tymethod.zero_from\" class=\"fn\">zero_from</a>(other: &amp;'zf <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a>) -&gt; &amp;'zf <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Clone the other <code>C</code> into a struct that may retain references into <code>C</code>.</div></details></div></details>","ZeroFrom<'zf, [T]>","rustc_target::target_features::ImpliedFeatures"]]],["tidy",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CZeroSlice%3CT%3E%3E-for-%26%5B%3CT+as+AsULE%3E::ULE%5D\" class=\"impl\"><a href=\"#impl-AsRef%3CZeroSlice%3CT%3E%3E-for-%26%5B%3CT+as+AsULE%3E::ULE%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;ZeroSlice&lt;T&gt;&gt; for &amp;[&lt;T as AsULE&gt;::ULE]<div class=\"where\">where\n    T: AsULE,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;ZeroSlice&lt;T&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<ZeroSlice<T>>","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143894\" title=\"Tracking issue for const_default\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/slice/mod.rs.html#5125\">Source</a></span><a href=\"#impl-Default-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/mod.rs.html#5127\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Creates an empty slice.</p>\n</div></details></div></details>","Default","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-%26%5BE%5D\" class=\"impl\"><a href=\"#impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-%26%5BE%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E, F&gt; EncodeAsVarULE&lt;VarZeroSlice&lt;T, F&gt;&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[E]</a><div class=\"where\">where\n    T: VarULE + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    E: EncodeAsVarULE&lt;T&gt;,\n    F: VarZeroVecFormat,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding [<code>VarULE</code>] type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding [<code>VarULE</code>] type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of [<code>Self::encode_var_ule_len()</code>]</div></details></div></details>","EncodeAsVarULE<VarZeroSlice<T, F>>","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-%26%5BT%5D\" class=\"impl\"><a href=\"#impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; EncodeAsVarULE&lt;ZeroSlice&lt;T&gt;&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: AsULE + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding [<code>VarULE</code>] type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding [<code>VarULE</code>] type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of [<code>Self::encode_var_ule_len()</code>]</div></details></div></details>","EncodeAsVarULE<ZeroSlice<T>>","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#21\">Source</a></span><a href=\"#impl-IntoIterator-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#22\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;'a T</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#23\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'a, T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/slice/iter.rs.html#25\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'a, T&gt;</h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/beta/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Offset%3C%3C%26%5BT%5D+as+Stream%3E::Checkpoint%3E-for-%26%5BT%5D\" class=\"impl\"><a href=\"#impl-Offset%3C%3C%26%5BT%5D+as+Stream%3E::Checkpoint%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; Offset&lt;&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::Checkpoint&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset_from\" class=\"method trait-impl\"><a href=\"#method.offset_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">offset_from</a>(&amp;self, other: &amp;&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::Checkpoint) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Offset between the first byte of <code>start</code> and the first byte of <code>self</code>a <a>Read more</a></div></details></div></details>","Offset<<&'a [T] as Stream>::Checkpoint>","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Offset%3C%3C%26%5BT%5D+as+Stream%3E::Checkpoint%3E-for-%26%5BT%5D\" class=\"impl\"><a href=\"#impl-Offset%3C%3C%26%5BT%5D+as+Stream%3E::Checkpoint%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; Offset&lt;&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::Checkpoint&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset_from\" class=\"method trait-impl\"><a href=\"#method.offset_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">offset_from</a>(&amp;self, other: &amp;&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::Checkpoint) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Offset between the first byte of <code>start</code> and the first byte of <code>self</code>a <a>Read more</a></div></details></div></details>","Offset<<&'a [T] as Stream>::Checkpoint>","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Offset-for-%26%5BT%5D\" class=\"impl\"><a href=\"#impl-Offset-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; Offset for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset_from\" class=\"method trait-impl\"><a href=\"#method.offset_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">offset_from</a>(&amp;self, start: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Offset between the first byte of <code>start</code> and the first byte of <code>self</code>a <a>Read more</a></div></details></div></details>","Offset","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Offset-for-%26%5BT%5D\" class=\"impl\"><a href=\"#impl-Offset-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Offset for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset_from\" class=\"method trait-impl\"><a href=\"#method.offset_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">offset_from</a>(&amp;self, start: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Offset between the first byte of <code>start</code> and the first byte of <code>self</code>a <a>Read more</a></div></details></div></details>","Offset","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BU;+N%5D%3E-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/array/equality.rs.html#80-82\">Source</a></span><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.array.html\">[U; N]</a>&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/array/equality.rs.html#85\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/array/equality.rs.html#89\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[U; N]>","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/alloc/vec/partial_eq.rs.html#25\">Source</a></span><a href=\"#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A&gt;&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/alloc/vec/partial_eq.rs.html#25\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/alloc/vec/partial_eq.rs.html#25\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Vec<U, A>>","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SliceLen-for-%26%5BT%5D\" class=\"impl\"><a href=\"#impl-SliceLen-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; SliceLen for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice_len\" class=\"method trait-impl\"><a href=\"#method.slice_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">slice_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Calculates the input length, as indicated by its name,\nand the name of the trait itself</div></details></div></details>","SliceLen","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SliceLen-for-%26%5BT%5D\" class=\"impl\"><a href=\"#impl-SliceLen-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; SliceLen for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice_len\" class=\"method trait-impl\"><a href=\"#method.slice_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">slice_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Calculates the input length, as indicated by its name,\nand the name of the trait itself</div></details></div></details>","SliceLen","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Store%3CK,+V%3E-for-%26%5B(K,+V)%5D\" class=\"impl\"><a href=\"#impl-Store%3CK,+V%3E-for-%26%5B(K,+V)%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V&gt; Store&lt;K, V&gt; for &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.tuple.html\">(K, V)</a>]<div class=\"where\">where\n    K: 'a,\n    V: 'a,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_len\" class=\"method trait-impl\"><a href=\"#method.lm_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of elements in the store.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_is_empty\" class=\"method trait-impl\"><a href=\"#method.lm_is_empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns whether the store is empty (contains 0 elements).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_get\" class=\"method trait-impl\"><a href=\"#method.lm_get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_get</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;V</a>)&gt;</h4></section></summary><div class='docblock'>Gets a key/value pair at the specified index.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_last\" class=\"method trait-impl\"><a href=\"#method.lm_last\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_last</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;V</a>)&gt;</h4></section></summary><div class='docblock'>Gets the last element in the store, or <code>None</code> if the store is empty.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_binary_search_by\" class=\"method trait-impl\"><a href=\"#method.lm_binary_search_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_binary_search_by</a>&lt;F&gt;(&amp;self, cmp: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;K</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class='docblock'>Searches the store for a particular element with a comparator function. <a>Read more</a></div></details></div></details>","Store<K, V>","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StoreConstEmpty%3CK,+V%3E-for-%26%5B(K,+V)%5D\" class=\"impl\"><a href=\"#impl-StoreConstEmpty%3CK,+V%3E-for-%26%5B(K,+V)%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V&gt; StoreConstEmpty&lt;K, V&gt; for &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.tuple.html\">(K, V)</a>]<div class=\"where\">where\n    K: 'a,\n    V: 'a,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.EMPTY\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.EMPTY\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">EMPTY</a>: &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.tuple.html\">(K, V)</a>]</h4></section></summary><div class='docblock'>An empty store</div></details></div></details>","StoreConstEmpty<K, V>","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StoreIterable%3C'a,+K,+V%3E-for-%26%5B(K,+V)%5D\" class=\"impl\"><a href=\"#impl-StoreIterable%3C'a,+K,+V%3E-for-%26%5B(K,+V)%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V&gt; StoreIterable&lt;'a, K, V&gt; for &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.tuple.html\">(K, V)</a>]<div class=\"where\">where\n    K: 'a,\n    V: 'a,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.KeyValueIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.KeyValueIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">KeyValueIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/iter/adapters/map/struct.Map.html\" title=\"struct core::iter::adapters::map::Map\">Map</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.tuple.html\">(K, V)</a>&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.fn.html\">fn</a>(&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.tuple.html\">(K, V)</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.reference.html\">&amp;V</a>)&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_iter\" class=\"method trait-impl\"><a href=\"#method.lm_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_iter</a>(&amp;'a self) -&gt; &lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.tuple.html\">(K, V)</a>] as StoreIterable&lt;'a, K, V&gt;&gt;::KeyValueIter <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;&amp;&#39;a [(K, V)] as StoreIterable&lt;&#39;a, K, V&gt;&gt;::KeyValueIter\">ⓘ</a></h4></section></summary><div class='docblock'>Returns an iterator over key/value pairs.</div></details></div></details>","StoreIterable<'a, K, V>","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StoreSlice%3CK,+V%3E-for-%26%5B(K,+V)%5D\" class=\"impl\"><a href=\"#impl-StoreSlice%3CK,+V%3E-for-%26%5B(K,+V)%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; StoreSlice&lt;K, V&gt; for &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.tuple.html\">(K, V)</a>]</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Slice\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Slice\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Slice</a> = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.tuple.html\">(K, V)</a>]</h4></section><section id=\"method.lm_get_range\" class=\"method trait-impl\"><a href=\"#method.lm_get_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_get_range</a>(\n    &amp;self,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.tuple.html\">(K, V)</a>] as StoreSlice&lt;K, V&gt;&gt;::Slice&gt;</h4></section></div></details>","StoreSlice<K, V>","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stream-for-%26%5BT%5D\" class=\"impl\"><a href=\"#impl-Stream-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'i, T&gt; Stream for &amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Token\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Token\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Token</a> = T</h4></section></summary><div class='docblock'>The smallest unit being parsed <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Slice\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Slice\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Slice</a> = &amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Sequence of <code>Token</code>s <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IterOffsets\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IterOffsets\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">IterOffsets</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/iter/adapters/enumerate/struct.Enumerate.html\" title=\"struct core::iter::adapters::enumerate::Enumerate\">Enumerate</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/iter/adapters/cloned/struct.Cloned.html\" title=\"struct core::iter::adapters::cloned::Cloned\">Cloned</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'i, T&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Iterate with the offset from the current location</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Checkpoint\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Checkpoint\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Checkpoint</a> = Checkpoint&lt;&amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class='docblock'>A parse location within the stream</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_offsets\" class=\"method trait-impl\"><a href=\"#method.iter_offsets\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">iter_offsets</a>(&amp;self) -&gt; &lt;&amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::IterOffsets <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;&amp;&#39;i [T] as Stream&gt;::IterOffsets\">ⓘ</a></h4></section></summary><div class='docblock'>Iterate with the offset from the current location</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.eof_offset\" class=\"method trait-impl\"><a href=\"#method.eof_offset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">eof_offset</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the offset to the end of the input</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_token\" class=\"method trait-impl\"><a href=\"#method.next_token\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">next_token</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;&amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::Token&gt;</h4></section></summary><div class='docblock'>Split off the next token from the input</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset_for\" class=\"method trait-impl\"><a href=\"#method.offset_for\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">offset_for</a>&lt;P&gt;(&amp;self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&lt;&amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::Token) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class='docblock'>Finds the offset of the next matching token</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset_at\" class=\"method trait-impl\"><a href=\"#method.offset_at\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">offset_at</a>(&amp;self, tokens: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>, Needed&gt;</h4></section></summary><div class='docblock'>Get the offset for the number of <code>tokens</code> into the stream <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_slice\" class=\"method trait-impl\"><a href=\"#method.next_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">next_slice</a>(&amp;mut self, offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>) -&gt; &lt;&amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::Slice <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;&amp;&#39;i [T] as Stream&gt;::Slice\">ⓘ</a></h4></section></summary><div class='docblock'>Split off a slice of tokens from the input <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checkpoint\" class=\"method trait-impl\"><a href=\"#method.checkpoint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checkpoint</a>(&amp;self) -&gt; &lt;&amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::Checkpoint <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;&amp;&#39;i [T] as Stream&gt;::Checkpoint\">ⓘ</a></h4></section></summary><div class='docblock'>Save the current parse location within the stream</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reset\" class=\"method trait-impl\"><a href=\"#method.reset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">reset</a>(&amp;mut self, checkpoint: &lt;&amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::Checkpoint)</h4></section></summary><div class='docblock'>Revert the stream to a prior [<code>Self::Checkpoint</code>] <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.raw\" class=\"method trait-impl\"><a href=\"#method.raw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">raw</a>(&amp;self) -&gt; &amp;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a></h4></section></summary><div class='docblock'>Return the inner-most stream</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_token\" class=\"method trait-impl\"><a href=\"#method.peek_token\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">peek_token</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(Self, Self::Token)&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Split off the next token from the input</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_slice\" class=\"method trait-impl\"><a href=\"#method.peek_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">peek_slice</a>(&amp;self, offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>) -&gt; (Self, Self::Slice)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Split off a slice of tokens from the input</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.finish\" class=\"method trait-impl\"><a href=\"#method.finish\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">finish</a>(&amp;mut self) -&gt; Self::Slice</h4></section></summary><div class='docblock'>Advance to the end of the stream</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_finish\" class=\"method trait-impl\"><a href=\"#method.peek_finish\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">peek_finish</a>(&amp;self) -&gt; (Self, Self::Slice)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Advance to the end of the stream</div></details></div></details>","Stream","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stream-for-%26%5BT%5D\" class=\"impl\"><a href=\"#impl-Stream-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'i, T&gt; Stream for &amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Token\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Token\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Token</a> = T</h4></section></summary><div class='docblock'>The smallest unit being parsed <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Slice\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Slice\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Slice</a> = &amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Sequence of <code>Token</code>s <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IterOffsets\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IterOffsets\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">IterOffsets</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/iter/adapters/enumerate/struct.Enumerate.html\" title=\"struct core::iter::adapters::enumerate::Enumerate\">Enumerate</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/iter/adapters/cloned/struct.Cloned.html\" title=\"struct core::iter::adapters::cloned::Cloned\">Cloned</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'i, T&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Iterate with the offset from the current location</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Checkpoint\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Checkpoint\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Checkpoint</a> = Checkpoint&lt;&amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a>, &amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class='docblock'>A parse location within the stream</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_offsets\" class=\"method trait-impl\"><a href=\"#method.iter_offsets\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">iter_offsets</a>(&amp;self) -&gt; &lt;&amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::IterOffsets <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;&amp;&#39;i [T] as Stream&gt;::IterOffsets\">ⓘ</a></h4></section></summary><div class='docblock'>Iterate with the offset from the current location</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.eof_offset\" class=\"method trait-impl\"><a href=\"#method.eof_offset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">eof_offset</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the offset to the end of the input</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_token\" class=\"method trait-impl\"><a href=\"#method.next_token\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">next_token</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;&amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::Token&gt;</h4></section></summary><div class='docblock'>Split off the next token from the input</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_token\" class=\"method trait-impl\"><a href=\"#method.peek_token\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">peek_token</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;&amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::Token&gt;</h4></section></summary><div class='docblock'>Split off the next token from the input</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset_for\" class=\"method trait-impl\"><a href=\"#method.offset_for\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">offset_for</a>&lt;P&gt;(&amp;self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&lt;&amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::Token) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class='docblock'>Finds the offset of the next matching token</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset_at\" class=\"method trait-impl\"><a href=\"#method.offset_at\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">offset_at</a>(&amp;self, tokens: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>, Needed&gt;</h4></section></summary><div class='docblock'>Get the offset for the number of <code>tokens</code> into the stream <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_slice\" class=\"method trait-impl\"><a href=\"#method.next_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">next_slice</a>(&amp;mut self, offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>) -&gt; &lt;&amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::Slice <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;&amp;&#39;i [T] as Stream&gt;::Slice\">ⓘ</a></h4></section></summary><div class='docblock'>Split off a slice of tokens from the input <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_slice_unchecked\" class=\"method trait-impl\"><a href=\"#method.next_slice_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">next_slice_unchecked</a>(\n    &amp;mut self,\n    offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>,\n) -&gt; &lt;&amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::Slice <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;&amp;&#39;i [T] as Stream&gt;::Slice\">ⓘ</a></h4></section></summary><div class='docblock'>Split off a slice of tokens from the input <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_slice\" class=\"method trait-impl\"><a href=\"#method.peek_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">peek_slice</a>(&amp;self, offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>) -&gt; &lt;&amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::Slice <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;&amp;&#39;i [T] as Stream&gt;::Slice\">ⓘ</a></h4></section></summary><div class='docblock'>Split off a slice of tokens from the input</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_slice_unchecked\" class=\"method trait-impl\"><a href=\"#method.peek_slice_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">peek_slice_unchecked</a>(\n    &amp;self,\n    offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.usize.html\">usize</a>,\n) -&gt; &lt;&amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::Slice <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;&amp;&#39;i [T] as Stream&gt;::Slice\">ⓘ</a></h4></section></summary><div class='docblock'>Split off a slice of tokens from the input <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checkpoint\" class=\"method trait-impl\"><a href=\"#method.checkpoint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checkpoint</a>(&amp;self) -&gt; &lt;&amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::Checkpoint <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;&amp;&#39;i [T] as Stream&gt;::Checkpoint\">ⓘ</a></h4></section></summary><div class='docblock'>Save the current parse location within the stream</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reset\" class=\"method trait-impl\"><a href=\"#method.reset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">reset</a>(&amp;mut self, checkpoint: &amp;&lt;&amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::Checkpoint)</h4></section></summary><div class='docblock'>Revert the stream to a prior [<code>Self::Checkpoint</code>] <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.raw\" class=\"method trait-impl\"><a href=\"#method.raw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">raw</a>(&amp;self) -&gt; &amp;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.7.10: Replaced with <code>Stream::trace</code></span></div></span><div class='docblock'>Deprecated for callers as of 0.7.10, instead call [<code>Stream::trace</code>]</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trace\" class=\"method trait-impl\"><a href=\"#method.trace\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">trace</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Write out a single-line summary of the current parse location</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.finish\" class=\"method trait-impl\"><a href=\"#method.finish\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">finish</a>(&amp;mut self) -&gt; Self::Slice</h4></section></summary><div class='docblock'>Advance to the end of the stream</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_finish\" class=\"method trait-impl\"><a href=\"#method.peek_finish\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">peek_finish</a>(&amp;self) -&gt; Self::Slice<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Advance to the end of the stream</div></details></div></details>","Stream","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StreamIsPartial-for-%26%5BT%5D\" class=\"impl\"><a href=\"#impl-StreamIsPartial-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; StreamIsPartial for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.PartialState\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.PartialState\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">PartialState</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>Whether the stream is currently partial or complete</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.complete\" class=\"method trait-impl\"><a href=\"#method.complete\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">complete</a>(&amp;mut self) -&gt; &lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as StreamIsPartial&gt;::PartialState <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;&amp;&#39;a [T] as StreamIsPartial&gt;::PartialState\">ⓘ</a></h4></section></summary><div class='docblock'>Mark the stream is complete</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.restore_partial\" class=\"method trait-impl\"><a href=\"#method.restore_partial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">restore_partial</a>(\n    &amp;mut self,\n    _state: &lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as StreamIsPartial&gt;::PartialState,\n)</h4></section></summary><div class='docblock'>Restore the stream back to its previous state</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_partial_supported\" class=\"method trait-impl\"><a href=\"#method.is_partial_supported\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_partial_supported</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Report whether the [<code>Stream</code>] is can ever be incomplete</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_partial\" class=\"method trait-impl\"><a href=\"#method.is_partial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_partial</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Report whether the [<code>Stream</code>] is currently incomplete</div></details></div></details>","StreamIsPartial","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StreamIsPartial-for-%26%5BT%5D\" class=\"impl\"><a href=\"#impl-StreamIsPartial-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; StreamIsPartial for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.PartialState\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.PartialState\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">PartialState</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>Whether the stream is currently partial or complete</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.complete\" class=\"method trait-impl\"><a href=\"#method.complete\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">complete</a>(&amp;mut self) -&gt; &lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as StreamIsPartial&gt;::PartialState <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;&amp;[T] as StreamIsPartial&gt;::PartialState\">ⓘ</a></h4></section></summary><div class='docblock'>Mark the stream is complete</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.restore_partial\" class=\"method trait-impl\"><a href=\"#method.restore_partial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">restore_partial</a>(&amp;mut self, _state: &lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as StreamIsPartial&gt;::PartialState)</h4></section></summary><div class='docblock'>Restore the stream back to its previous state</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_partial_supported\" class=\"method trait-impl\"><a href=\"#method.is_partial_supported\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_partial_supported</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Report whether the [<code>Stream</code>] is can ever be incomplete</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_partial\" class=\"method trait-impl\"><a href=\"#method.is_partial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_partial</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Report whether the [<code>Stream</code>] is currently incomplete</div></details></div></details>","StreamIsPartial","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpdateSlice-for-%26%5BT%5D\" class=\"impl\"><a href=\"#impl-UpdateSlice-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; UpdateSlice for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.update_slice\" class=\"method trait-impl\"><a href=\"#method.update_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">update_slice</a>(self, inner: &lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::Slice) -&gt; &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Convert an <code>Output</code> type to be used as <code>Stream</code></div></details></div></details>","UpdateSlice","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpdateSlice-for-%26%5BT%5D\" class=\"impl\"><a href=\"#impl-UpdateSlice-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; UpdateSlice for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.update_slice\" class=\"method trait-impl\"><a href=\"#method.update_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">update_slice</a>(self, inner: &lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a> as Stream&gt;::Slice) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Convert an <code>Output</code> type to be used as <code>Stream</code></div></details></div></details>","UpdateSlice","tidy::deps::ExceptionList"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ZeroFrom%3C'zf,+%5BT%5D%3E-for-%26%5BT%5D\" class=\"impl\"><a href=\"#impl-ZeroFrom%3C'zf,+%5BT%5D%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'zf, T&gt; ZeroFrom&lt;'zf, <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a>&gt; for &amp;'zf <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero_from\" class=\"method trait-impl\"><a href=\"#method.zero_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zero_from</a>(other: &amp;'zf <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a>) -&gt; &amp;'zf <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Clone the other <code>C</code> into a struct that may retain references into <code>C</code>.</div></details></div></details>","ZeroFrom<'zf, [T]>","tidy::deps::ExceptionList"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[25570,23649,113776,25485,24979,68050]}