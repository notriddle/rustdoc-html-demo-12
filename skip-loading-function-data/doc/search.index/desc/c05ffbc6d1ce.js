rd_("CiErrors which can occur when attempting to interpret a \xe2\x80\xa60CiTrait which permits the allowed types to be used with \xe2\x80\xa60CnA mutable iterator over the values of a <code>BTreeMap</code>.CmA mutable iterator over the values of a <code>HashMap</code>.1CnAn error returned when an operation could not be completed \xe2\x80\xa6BbExpected 1 char, but 0 were found.CmCRC32-C single round checksum for bytes (8 bits). Arm\xe2\x80\x99s \xe2\x80\xa60CnCRC32-C single round checksum for quad words (64 bits). Arm\xe2\x80\xa6CnCRC32-C single round checksum for bytes (16 bits). Arm\xe2\x80\x99s \xe2\x80\xa60CnCRC32-C single round checksum for bytes (32 bits). Arm\xe2\x80\x99s \xe2\x80\xa60DhThe <code>__mmask16</code> type used in AVX-512 intrinsics, a 16-bit \xe2\x80\xa60DhThe <code>__mmask32</code> type used in AVX-512 intrinsics, a 32-bit \xe2\x80\xa60DhThe <code>__mmask64</code> type used in AVX-512 intrinsics, a 64-bit \xe2\x80\xa60BoSigned halving parallel halfword-wise addition.CbSigned halving parallel halfword-wise subtraction.CjCancels the current transaction and discards all state \xe2\x80\xa6CnCommits the current transaction. For a nested transaction, \xe2\x80\xa6E`Bitwise logical <code>AND</code> of inverted <code>a</code> with <code>b</code>.00DiSets all bits of <code>x</code> to 1 except for the least significant \xe2\x80\xa600CfSets the least significant zero bit of <code>x</code>.00BaExtracts lowest set isolated bit.00BlResets the lowest set bit of <code>x</code>.00CnZeroes higher bits of <code>a</code> &gt;= <code>index</code>.00FiSaves the <code>x87</code> FPU, <code>MMX</code> technology, <code>XMM</code>, and <code>MXCSR</code> \xe2\x80\xa6BoReturns the dot product of two __m128d vectors.0BnReturns the dot product of two __m128 vectors.0CmComputes the bitwise OR of <code>a</code> and <code>b</code>.0CbBitwise OR of packed single-precision (32-bit) \xe2\x80\xa60CnProvides a hint to the processor that the code sequence is \xe2\x80\xa60BjUnsigned multiply without affecting flags.00DhScatter contiguous low order bits of <code>a</code> to the result at \xe2\x80\xa600EbGathers the bits of <code>x</code> specified by the <code>mask</code> into the \xe2\x80\xa600AmCounts the bits that are set.00DgFetch the cache line that contains address <code>p</code> using the \xe2\x80\xa6CePerforms a full or partial restore of the enabled \xe2\x80\xa6ClPerforms a full or partial save of the enabled processor \xe2\x80\xa6000BfAdd credentials to the ancillary data.CaAES middle round decryption instruction for RV32.CfAES middle round encryption instruction for RV32 with.CgThis instruction implements part of the KeySchedule \xe2\x80\xa6DnWhen <code>false</code>, <code>TransmuteFrom</code> is not implemented for \xe2\x80\xa60C`Returns a reference to the underlying allocator.00000000000000000000000000000CdDetermines if the <code>#</code> flag was specified.BgSets or unsets the <code>#</code> flag.1010CnProduces an iterator over <code>Path</code> and its ancestors.DcSplits the slice into a slice of <code>N</code>-element arrays, \xe2\x80\xa60CkReturns a read-only cursor pointing to the current element.ClReturns a read-only cursor pointing to the same location \xe2\x80\xa600000001AcBorrows the handle.ClReturns the total number of whole microseconds contained \xe2\x80\xa60ClReturns the total number of whole milliseconds contained \xe2\x80\xa60CnReturns the eight-bit integers this address consists of as \xe2\x80\xa6CiReturns the four eight-bit integers that make up this \xe2\x80\xa6CkReturns the sixteen eight-bit integers the IPv6 address \xe2\x80\xa6210BhConverts to an <code>OsStr</code> slice.BoYields the underlying <code>OsStr</code> slice.CiReturns the raw <code>OsStr</code> slice for this prefix.CaExtracts the underlying <code>OsStr</code> slice.BaExtracts the raw file descriptor.CkViews the underlying data as a pair of subslices of the \xe2\x80\xa60CiReturns a pair of slices which contain, in order, the \xe2\x80\xa6011AcBorrows the socket.ChAsserts that two expressions are equal to each other \xe2\x80\xa60ClAsserts that two expressions are not equal to each other \xe2\x80\xa60CmBitwise or with the current value, returning the previous \xe2\x80\xa60BhSets an attribute on the attribute list.CgSupport for capturing a stack backtrace of an OS threadCcCreates a Unix datagram socket bound to an address.DbCreates a new <code>UnixListener</code> bound to the specified \xe2\x80\xa6ClReturns the minimum number of bits required to represent \xe2\x80\xa600000000000EcAn identity function that <em><strong>hints</strong></em> to the compiler to be \xe2\x80\xa6DcSee documentation of <code>std::hint::black_box</code> for details.101DgGets the value of the <code>SO_BROADCAST</code> option for this socket.BaAn ordered map based on a B-Tree.0BaAn ordered set based on a B-Tree.0EcEquivalent to C\xe2\x80\x99s <code>ssize_t</code> (on POSIX) or <code>SSIZE_T</code> (on \xe2\x80\xa60AlPerforms the call operation.0CnPerforms an initialization routine once and only once. The \xe2\x80\xa6CkThe span of the invocation of the current procedural macro.ClCasts from a maybe-uninitialized type to its initialized \xe2\x80\xa600000AbCharacter literal.ChHints to the compiler that given path is cold, i.e., \xe2\x80\xa6CeHints to the compiler that current code path is cold.10ChWhether the process was continued from a stopped status.CjUnstable module containing the unstable contracts lang \xe2\x80\xa6FjCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>self</code>. The \xe2\x80\xa6000CkCalculate the CRC value using the IEEE 802.3 polynomial \xe2\x80\xa6000000DcCreates a <code>DebugMap</code> builder designed to assist with \xe2\x80\xa600DcCreates a <code>DebugSet</code> builder designed to assist with \xe2\x80\xa600C`Returns the delimiter of this <code>Group</code>AoMutably dereferences the value.fPanics100DhIndicates whether <code>OpenOptions</code> must open a directory or not.EcCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the \xe2\x80\xa600000000000000000000000CkCreates a new <code>Weak</code> pointer to this allocation.CkCreates a new weak reference to the <code>UniqueArc</code>.1CjCreates a new weak reference to the <code>UniqueRc</code>.21DbDowngrades a write-locked <code>RwLockWriteGuard</code> into a \xe2\x80\xa6031A`End index bound.000EfReturns <code>true</code> if <code>needle</code> is a suffix of the slice or equal \xe2\x80\xa6DkReturns <code>true</code> if the given pattern matches a suffix of this \xe2\x80\xa610DgDetermines whether <code>child</code> is a suffix of <code>self</code>.CiCreates an iterator which gives the current iteration \xe2\x80\xa600CgClears all explicitly set environment variables and \xe2\x80\xa6BlProvides more information about the failure:00ChChecked integer division without remainder. Computes \xe2\x80\xa600000000000CfPerforms an exact division, resulting in undefined \xe2\x80\xa61111111111110CgExtracts the extension (without the leading dot) of \xe2\x80\xa6BeAdd two values, round to nearest evenBiFused multiply-add, round to nearest evenAnFind the maximum of two valuesAnFind the minimum of two valuesBjMultiply two values, round to nearest evenAaArithmetic negateBjSubtract two values, round to nearest evenDkGenerates the <code>f32.floor</code> instruction, returning the largest \xe2\x80\xa600DhGenerates the <code>f32.trunc</code> instruction, roundinging to the \xe2\x80\xa600CkCalculates the absolute value of each lane of a 128-bit \xe2\x80\xa600ClLane-wise addition of two 128-bit vectors interpreted as \xe2\x80\xa600ClLane-wise division of two 128-bit vectors interpreted as \xe2\x80\xa600CkCalculates the lane-wise minimum of two 128-bit vectors \xe2\x80\xa600000CcLane-wise multiplication of two 128-bit vectors \xe2\x80\xa600CmNegates each lane of a 128-bit vector interpreted as four \xe2\x80\xa600ClLane-wise subtraction of two 128-bit vectors interpreted \xe2\x80\xa600DkGenerates the <code>f64.floor</code> instruction, returning the largest \xe2\x80\xa600DhGenerates the <code>f64.trunc</code> instruction, roundinging to the \xe2\x80\xa600888CkLane-wise add of two 128-bit vectors interpreted as two \xe2\x80\xa600CnLane-wise divide of two 128-bit vectors interpreted as two \xe2\x80\xa600CkCalculates the lane-wise maximum of two 128-bit vectors \xe2\x80\xa600888ClLane-wise multiply of two 128-bit vectors interpreted as \xe2\x80\xa600ClNegates each lane of a 128-bit vector interpreted as two \xe2\x80\xa600ClLane-wise subtract of two 128-bit vectors interpreted as \xe2\x80\xa600CeFloat addition that allows optimizations based on \xe2\x80\xa60ClStop at first failing test. May run a few more tests due \xe2\x80\xa60CeFloat division that allows optimizations based on \xe2\x80\xa60ChAdds to the current value, returning the previous value.00000000000000000000000BgLogical \xe2\x80\x9cand\xe2\x80\x9d with a boolean value.ClPerforms a bitwise \xe2\x80\x9cand\xe2\x80\x9d operation on the address of \xe2\x80\xa6BiBitwise \xe2\x80\x9cand\xe2\x80\x9d with the current value.0000000000021000000000000AoMaximum with the current value.00000000000000000000000AoMinimum with the current value.00000000000000000000000BgLogical \xe2\x80\x9cnot\xe2\x80\x9d with a boolean value.0ClSubtracts from the current value, returning the previous \xe2\x80\xa600000000000000000000000BgLogical \xe2\x80\x9cxor\xe2\x80\x9d with a boolean value.ClPerforms a bitwise \xe2\x80\x9cxor\xe2\x80\x9d operation on the address of \xe2\x80\xa6BiBitwise \xe2\x80\x9cxor\xe2\x80\x9d with the current value.0000000000021000000000000DfReturns the final component of the <code>Path</code>, if there is one.CmReturns the file name of this directory entry without any \xe2\x80\xa6DhReturns the value of the <code>nFileSize</code> fields of this metadata.DkExtracts the stem (non-extension) portion of <code>self.file_name</code>\xe2\x80\xa6CmReturns the file type for the file that this entry points \xe2\x80\xa6BhReturns the file type for this metadata.DgFills <code>self</code> with elements returned by calling a closure \xe2\x80\xa60CkReturns a mutable reference to the first element of the \xe2\x80\xa60BiFinds the index of the first set element.0DgReturns the largest integer less than or equal to an <code>f128</code>.0CkFloat multiplication that allows optimizations based on \xe2\x80\xa60CmProduces layout describing a record that could be used to \xe2\x80\xa600CjForces the evaluation of this lazy value and returns a \xe2\x80\xa600ClCalculate the approximate double-precision result of 1.0 \xe2\x80\xa60ClCalculate the approximate single-precision result of 1.0 \xe2\x80\xa60CfFloat remainder that allows optimizations based on \xe2\x80\xa60BhRaw transmutation from <code>u16</code>.BhRaw transmutation from <code>u32</code>.BhRaw transmutation from <code>u64</code>.BiRaw transmutation from <code>u128</code>.CjRaw transmutation from an unsigned integer vector type \xe2\x80\xa6DcConverts a native byte order <code>u32</code> into an IPv4 address.DdConverts a native byte order <code>u128</code> into an IPv6 address.BgRaw transmutation from <code>u16</code>76543321DfCreates a new <code>Duration</code> from the specified number of days.0DkTakes each element in the <code>Iterator</code> and collects it into an \xe2\x80\xa6E`Constructs a <code>BTreeMap&lt;K, V&gt;</code> from an iterator of key-value \xe2\x80\xa61BaCreates a value from an iterator.EcTakes each element in the <code>Iterator</code>: if it is <code>None</code>, no \xe2\x80\xa6EeTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no \xe2\x80\xa6BlConverts an iterator into an async iterator.32E`Creates a new <code>PathBuf</code> from the <code>Path</code> elements of an \xe2\x80\xa62616DoConstructs a <code>HashMap&lt;K, V&gt;</code> from an iterator of key-value \xe2\x80\xa66DdCreates a new <code>Duration</code> from the specified number of \xe2\x80\xa60CkCreates a new instance from the given mode permission bits.DjCreates a new <code>Duration</code> from the specified number of whole \xe2\x80\xa60BlConverts a slice of bytes to a string slice.CdConverts a vector of bytes to a <code>String</code>.11110DiCreates an <code>OsString</code> from a potentially ill-formed UTF-16 \xe2\x80\xa6DkProvides a mutable reference to the front element, or <code>None</code> \xe2\x80\xa6ClProvides a mutable reference to the front element of the \xe2\x80\xa61110ChCalculate the approximate double-precision result of \xe2\x80\xa60ChCalculate the approximate single-precision result of \xe2\x80\xa60ChFloat subtraction that allows optimizations based on \xe2\x80\xa60DiReads from potentially discontiguous indices in <code>slice</code> to \xe2\x80\xa60AnReturns the current alignment.00AjReturns the current width.00BjCreates a new hard link on the filesystem.BbLane-wise wrapping absolute value.00CmAdds two 128-bit vectors as if they were two packed eight \xe2\x80\xa600CgCompares lane-wise signed integers, and returns the \xe2\x80\xa600000CmMultiplies two 128-bit vectors as if they were two packed \xe2\x80\xa600CiNegates a 128-bit vectors interpreted as eight 16-bit \xe2\x80\xa600CkShifts each lane to the left by the specified number of \xe2\x80\xa600ClShifts each lane to the right by the specified number of \xe2\x80\xa600ClSubtracts two 128-bit vectors as if they were two packed \xe2\x80\xa600777ClAdds two 128-bit vectors as if they were two packed four \xe2\x80\xa600666666555ChNegates a 128-bit vectors interpreted as four 32-bit \xe2\x80\xa600444333222999CkAdds two 128-bit vectors as if they were two packed two \xe2\x80\xa600777CnNegates a 128-bit vectors interpreted as two 64-bit signed \xe2\x80\xa600666555444;;;CgAdds two 128-bit vectors as if they were two packed \xe2\x80\xa600::::::CjNegates a 128-bit vectors interpreted as sixteen 8-bit \xe2\x80\xa600888777666CeReturns a mutable reference to the output at this \xe2\x80\xa6DhPerforms the mutable indexing (<code>container[index]</code>) operation.101DkARM-specific vector of two packed <code>i16</code> packed into a 32-bit \xe2\x80\xa6D`Arm-specific 64-bit wide vector of four packed <code>i16</code>.0DbArm-specific 128-bit wide vector of eight packed <code>i16</code>.0CoArm-specific 64-bit wide vector of two packed <code>i32</code>.0DaArm-specific 128-bit wide vector of four packed <code>i32</code>.0CoArm-specific 64-bit wide vector of one packed <code>i64</code>.0D`Arm-specific 128-bit wide vector of two packed <code>i64</code>.0DcArm-specific 128-bit wide vector of sixteen packed <code>i8</code>.0DfCompute the intersection of  <code>self</code> and <code>other</code>.0000CnCreates a consuming iterator, that is, one that moves each \xe2\x80\xa60CkConsumes the list into an iterator yielding elements by \xe2\x80\xa6CmConsumes the deque into a front-to-back iterator yielding \xe2\x80\xa6ChGets an owning iterator over the entries of the map, \xe2\x80\xa6DjGets an iterator for moving out the <code>BTreeSet</code>\xe2\x80\x99s contents \xe2\x80\xa64BaCreates an iterator from a value.ClReturns a consuming iterator over the possibly contained \xe2\x80\xa60610066663254CjCreates a consuming iterator visiting all the keys, in \xe2\x80\xa6CiCreates a consuming iterator visiting all the keys in \xe2\x80\xa61AfReads the 8-bit IO-CSR0AgReads the 64-bit IO-CSRAgReads the 16-bit IO-CSR0AgReads the 32-bit IO-CSR0AgWrites the 8-bit IO-CSR0AhWrites the 64-bit IO-CSRAhWrites the 16-bit IO-CSR0AhWrites the 32-bit IO-CSR0DeReturns <code>true</code> if this number is neither infinite nor NaN.000CiReturns true for each element if its value is neither \xe2\x80\xa6111100DcReturns <code>true</code> if the address appears to be globally \xe2\x80\xa600000DkReturns <code>true</code> if this thread is the \xe2\x80\x9cleader thread\xe2\x80\x9d for \xe2\x80\xa6DfReturns <code>true</code> if the number is neither zero, infinite, \xe2\x80\xa60003000033EfReturns <code>true</code> if the result is <code>Ok</code> and the value inside of \xe2\x80\xa60DkReturns <code>true</code> if this address is part of the Shared Address \xe2\x80\xa60ChReturns <code>true</code> if this file type is a socket.DbReturns <code>true</code> if this file type is any type of socket.C`Checks if the elements of this slice are sorted.CcChecks if the elements of this iterator are sorted.010EhReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>\xe2\x80\xa600CiDetermine whether this is the unique reference to the \xe2\x80\xa60CgKeep unyielded elements in the source <code>Vec</code>.0DhReturns the number of 16-bit code units this <code>char</code> would \xe2\x80\xa60DnWhen <code>false</code>, <code>TransmuteFrom</code> is not implemented for \xe2\x80\xa60BoReturns an iterator over the lines of a string.0CfReturns the base 10 logarithm of an <code>f128</code>.0FcMaps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;T, C&gt;</code> by applying a \xe2\x80\xa60EfSplits a <code>Ref</code> into multiple <code>Ref</code>s for different components \xe2\x80\xa6EaSplits a <code>RefMut</code> into multiple <code>RefMut</code>s for different \xe2\x80\xa610ClCreates an iterator that both yields elements based on a \xe2\x80\xa600ChA SIMD mask with 16 elements for vectors with 16-bit \xe2\x80\xa600ChA SIMD mask with 32 elements for vectors with 16-bit \xe2\x80\xa600ChA SIMD mask with 64 elements for vectors with 16-bit \xe2\x80\xa600ChA SIMD mask with 16 elements for vectors with 32-bit \xe2\x80\xa600ChA SIMD mask with 32 elements for vectors with 32-bit \xe2\x80\xa600ChA SIMD mask with 64 elements for vectors with 32-bit \xe2\x80\xa600ChA SIMD mask with 16 elements for vectors with 64-bit \xe2\x80\xa600ChA SIMD mask with 32 elements for vectors with 64-bit \xe2\x80\xa600ChA SIMD mask with 64 elements for vectors with 64-bit \xe2\x80\xa600CkNew code should prefer to use <code>i8::MAX</code> instead.ClNew code should prefer to use <code>i16::MAX</code> instead.ClNew code should prefer to use <code>i32::MAX</code> instead.ClNew code should prefer to use <code>i64::MAX</code> instead.CmNew code should prefer to use <code>i128::MAX</code> instead.CkNew code should prefer to use <code>u8::MAX</code> instead.ClNew code should prefer to use <code>u16::MAX</code> instead.ClNew code should prefer to use <code>u32::MAX</code> instead.ClNew code should prefer to use <code>u64::MAX</code> instead.CmNew code should prefer to use <code>u128::MAX</code> instead.CnNew code should prefer to use <code>isize::MAX</code> instead.CnNew code should prefer to use <code>usize::MAX</code> instead.;:9876543210DfReturns the maximum (IEEE 754-2008 maxNum) of two <code>f16</code> \xe2\x80\xa60DfReturns the maximum (IEEE 754-2008 maxNum) of two <code>f32</code> \xe2\x80\xa60DfReturns the maximum (IEEE 754-2008 maxNum) of two <code>f64</code> \xe2\x80\xa60CkNew code should prefer to use <code>i8::MIN</code> instead.ClNew code should prefer to use <code>i16::MIN</code> instead.ClNew code should prefer to use <code>i32::MIN</code> instead.ClNew code should prefer to use <code>i64::MIN</code> instead.CmNew code should prefer to use <code>i128::MIN</code> instead.CkNew code should prefer to use <code>u8::MIN</code> instead.ClNew code should prefer to use <code>u16::MIN</code> instead.ClNew code should prefer to use <code>u32::MIN</code> instead.ClNew code should prefer to use <code>u64::MIN</code> instead.CmNew code should prefer to use <code>u128::MIN</code> instead.CnNew code should prefer to use <code>isize::MIN</code> instead.CnNew code should prefer to use <code>usize::MIN</code> instead.;:9876543210CjReturns minimum and maximum values with respect to the \xe2\x80\xa60DfReturns the minimum (IEEE 754-2008 minNum) of two <code>f16</code> \xe2\x80\xa60DfReturns the minimum (IEEE 754-2008 minNum) of two <code>f32</code> \xe2\x80\xa60DfReturns the minimum (IEEE 754-2008 minNum) of two <code>f64</code> \xe2\x80\xa60DdMoves the cursor to the next element of the <code>LinkedList</code>.000DhMoves the cursor to the previous element of the <code>LinkedList</code>.000DbInline assembly used in combination with <code>#[naked]</code> \xe2\x80\xa6CePerforms the next search step starting from the back.CfRemoves and returns an element from the end of the \xe2\x80\xa6101ChReturns the greatest number less than <code>self</code>.0000000B`Non-poisoning synchronous locks.CfExpands to the offset in bytes of a field from the \xe2\x80\xa60CmCreates an iterator that lazily generates a value exactly \xe2\x80\xa60ClEnsures a value is in the entry by inserting the default \xe2\x80\xa6CjEnsures a value is in the entry by inserting if it was \xe2\x80\xa61100CkPanics the current thread with the given message as the \xe2\x80\xa6CgThe entry point for panicking with a formatted message.AfPanic support for coreCnDetermines whether the current thread is unwinding because \xe2\x80\xa6CnReturns the OS-assigned process identifier associated with \xe2\x80\xa6CgConsumes an iterator, creating two collections from it.00CmReceives a single datagram message on the socket, without \xe2\x80\xa60BhReturns a reference to the next element.0ChReturns a reference to the key and value of the next \xe2\x80\xa600CnReturns a reference to the next element without moving the \xe2\x80\xa60CjReturns a reference to next element without moving the \xe2\x80\xa622211033BlReturns a reference to the previous element.0ClReturns a reference to the key and value of the previous \xe2\x80\xa600CnReturns a reference to the previous element without moving \xe2\x80\xa60011100022CmReturns the socket address of the remote peer of this TCP \xe2\x80\xa6CmReturns the socket address of the remote peer this socket \xe2\x80\xa6BlReturns the address of this socket\xe2\x80\x99s peer.CiReturns the socket address of the remote half of this \xe2\x80\xa6CfGets the peer credentials for this Unix domain socket.CeAttempts to pull out the next value of this async \xe2\x80\xa60CnArm-specific 64-bit wide polynomial vector of eight packed \xe2\x80\xa60CmRemoves and returns the first element in the map. The key \xe2\x80\xa6CmRemoves the first element from the set and returns it, if \xe2\x80\xa610DiRemoves the first element and returns it, or <code>None</code> if the \xe2\x80\xa6CmRemoves the first element from the cursor\xe2\x80\x99s parent list \xe2\x80\xa61110DePlatform-specific intrinsics for the <code>PowerPC64</code> platform.CjReturns the optionally specified precision for numeric \xe2\x80\xa6AnSets or removes the precision.1010ClThis module reexports the primitive types to allow usage \xe2\x80\xa60BhAdds an element to the back of the list.CkAppends an element to the back of the cursor\xe2\x80\x99s parent \xe2\x80\xa6BlAppends an element to the back of the deque.201CiQuartiles of the sample: three values that divide the \xe2\x80\xa6CiCreates an iterator that covers the specified mutable \xe2\x80\xa6CeConstructs a mutable double-ended iterator over a \xe2\x80\xa601CgReads the upper 32-bit stable counter value and the \xe2\x80\xa60CgReads the lower 32-bit stable counter value and the \xe2\x80\xa60CmLocks this handle and reads a line of input, appending it \xe2\x80\xa6DkReads all bytes until a newline (the <code>0xA</code> byte) is reached, \xe2\x80\xa6CkReads a symbolic link, returning the file that the link \xe2\x80\xa60BfReads the contents of a symbolic link.CmIndicates that directories should be created recursively, \xe2\x80\xa6ChReceives a single datagram message on the socket. On \xe2\x80\xa6AnReceives data from the socket.CfReturns the cumulative bitwise \xe2\x80\x9cor\xe2\x80\x9d across the \xe2\x80\xa600000ClReferences, <code>&amp;T</code> and <code>&amp;mut T</code>.0CkReturns the remainder of the original slice that is not \xe2\x80\xa60BfReturns remainder of the split string.000000C`Returns the remaining lines of the split string.BeReturns remainder of the split string2332222222102CgReturns the remainder of the range being iterated over.00443333333213000DhReturns the nearest integer to an <code>f128</code>. Rounds half-way \xe2\x80\xa60CjSearches for an element in an iterator from the right, \xe2\x80\xa600BeThe 2015 version of the core prelude.ChThe 2015 version of the prelude of The Rust Standard \xe2\x80\xa6BeThe 2018 version of the core prelude.ChThe 2018 version of the prelude of The Rust Standard \xe2\x80\xa6BeThe 2021 version of the core prelude.ChThe 2021 version of the prelude of The Rust Standard \xe2\x80\xa6BeThe 2024 version of the core prelude.ChThe 2024 version of the prelude of The Rust Standard \xe2\x80\xa6CfSeeks to a given position and reads a number of bytes.CjSets the level in <code>self</code> to <code>level</code>.CiSets the number of bytes that can be read before this \xe2\x80\xa6DgSets the <code>Span</code>s in <code>self</code> to <code>spans</code>.BnChanges the timestamps of the underlying file.CfShrinks the capacity of the vector with a lower bound.BeDiscards capacity with a lower bound.CeShrinks the capacity of the deque with a lower bound.DdShrinks the capacity of this <code>String</code> with a lower bound.DeShrinks the capacity of the <code>OsString</code> with a lower bound.EcInvokes <code>shrink_to</code> on the underlying instance of <code>OsString</code>.52CjShrinks the capacity of the map with a lower limit. It \xe2\x80\xa65CjShrinks the capacity of the set with a lower limit. It \xe2\x80\xa65CdDetermines if the <code>+</code> flag was specified.00BhNumerically casts a vector, elementwise.0CmRounds up each element to the next highest integer-valued \xe2\x80\xa60BiCounts the leading zeros of each element.0BjCounts the trailing zeros of each element.0C`Returns absolute value of a vector, elementwise.0Bj<code>T</code> must be a vector of floats.00000C`Returns the maximum of two vectors, elementwise.0C`Returns the minimum of two vectors, elementwise.022CkReturns the bounds on the remaining length of the iterator.0CkReturns the bounds on the remaining length of the async \xe2\x80\xa6010BnCreates a new symbolic link on the filesystem.DfAdds a new child diagnostics message to <code>self</code> with the \xe2\x80\xa60CnReturns the span pointing to the opening delimiter of this \xe2\x80\xa6ClEmits a machine instruction to signal the processor that \xe2\x80\xa60CkReturns an iterator over mutable subslices separated by \xe2\x80\xa60CjSplits the underlying slice at the cursor position and \xe2\x80\xa6CbSplits the collection into two at the given index.ChSplits the list into two at the given index. Returns \xe2\x80\xa6BmSplits the deque into two at the given index.ClSplits the collection into two at the given key. Returns \xe2\x80\xa6CnSplits the collection into two at the value. Returns a new \xe2\x80\xa6CcSplits the string into two at the given byte index.CmRemoves the subslice corresponding to the given range and \xe2\x80\xa60613254CgReturns the number of blocks allocated to the file, \xe2\x80\xa6CmReturns the unescaped string value if the current literal \xe2\x80\xa6AjStringifies its arguments.0ClUnpack first and zeroth into two 16-bit signed halfwords \xe2\x80\xa60CmUnpack second and zeroth into two 16-bit signed halfwords \xe2\x80\xa60ClUnpack third and zeroth into two 16-bit signed halfwords \xe2\x80\xa60CnUnpack third and first into two 16-bit signed halfwords in \xe2\x80\xa60ClUnpack third and second into two 16-bit signed halfwords \xe2\x80\xa60DkThis function is similar to <code>sync_all</code>, except that it might \xe2\x80\xa6CfUnregisters the current panic hook and returns it, \xe2\x80\xa6EbAn implementation detail of the <code>#[test]</code> and <code>#[bench]</code> \xe2\x80\xa60CmReturns None for ignored test or tests that are just run, \xe2\x80\xa6FkReturns <code>Some(t)</code> if the <code>bool</code> is <code>true</code>, or <code>None</code> otherwise.0BlChains the ordering with the given function.0DbReturns <code>true</code> if the wait was known to have timed out.CbConverts the given value to a <code>String</code>.0CnWrite <code>self</code> to the given <code>TokenStream</code>.DgCopies <code>self</code> into a new <code>Vec</code> with an allocator.DfReturns the ordering between <code>self</code> and <code>other</code>.0000000CkReinterprets the bits of a value of one type as another \xe2\x80\xa60CmTransmutes a <code>Src</code> value into a <code>Self</code>.0110FdTransposes a <code>[MaybeUninit&lt;T&gt;; N]</code> into a <code>MaybeUninit&lt;[T; N]&gt;</code>\xe2\x80\xa6EhTransposes a <code>[Option&lt;T&gt;; N]</code> into a <code>Option&lt;[T; N]&gt;</code>.GbTransposes an <code>Option</code> of a <code>Result</code> into a <code>Result</code> of an <code>Option</code>\xe2\x80\xa6GbTransposes a <code>Result</code> of an <code>Option</code> into an <code>Option</code> of a <code>Result</code>\xe2\x80\xa6FdTransposes a <code>MaybeUninit&lt;[T; N]&gt;</code> into a <code>[MaybeUninit&lt;T&gt;; N]</code>\xe2\x80\xa643210CgReturns a string slice with leading whitespace removed.0DeIs <code>true</code> if during a recv operation the ancillary was \xe2\x80\xa6CaReturns the integer part of an <code>f128</code>.0DaCreates a new <code>File</code> instance that shares the same \xe2\x80\xa6DgCreates a new <code>PipeReader</code> instance that shares the same \xe2\x80\xa6DgCreates a new <code>PipeWriter</code> instance that shares the same \xe2\x80\xa6CnCreates a new independently owned handle to the underlying \xe2\x80\xa600000DhCreates a new <code>OwnedHandle</code> instance that shares the same \xe2\x80\xa6DhCreates a new <code>OwnedSocket</code> instance that shares the same \xe2\x80\xa6DdCreates a new <code>OwnedFd</code> instance that shares the same \xe2\x80\xa6CfPerforms bounds checking of a range without panicking.00DhThis is the reverse version of <code>Iterator::try_fold()</code>: it \xe2\x80\xa600DfAttempts to lock this <code>RwLock</code> with exclusive write access.0BmReturns the name of a type as a string slice.CiGets a static string slice containing the name of a type.10CmAdds two 128-bit vectors as if they were two packed eight \xe2\x80\xa600CiCompares lane-wise unsigned integers, and returns the \xe2\x80\xa600000CmMultiplies two 128-bit vectors as if they were two packed \xe2\x80\xa600CkShifts each lane to the left by the specified number of \xe2\x80\xa600ClShifts each lane to the right by the specified number of \xe2\x80\xa600ClSubtracts two 128-bit vectors as if they were two packed \xe2\x80\xa600ClAdds two 128-bit vectors as if they were two packed four \xe2\x80\xa600555555444333222111CkAdds two 128-bit vectors as if they were two packed two \xe2\x80\xa600555444333222CgAdds two 128-bit vectors as if they were two packed \xe2\x80\xa600777777555444333DiProvides the <code>assert_unsafe_precondition</code> macro as well as \xe2\x80\xa6CiReturns whether we should perform some UB-checking at \xe2\x80\xa60DkARM-specific vector of four packed <code>u8</code> packed into a 32-bit \xe2\x80\xa6D`Arm-specific 64-bit wide vector of eight packed <code>u8</code>.0CkUndo the effect of leaked guards on the borrow state of \xe2\x80\xa60DdReturns the contained <code>Some</code> value or a provided default.DbReturns the contained <code>Ok</code> value or a provided default.10CmLoads a <code>v128</code> vector from the given heap address.00CjSigned Absolute difference and Accumulate Long Arm\xe2\x80\x99s \xe2\x80\xa6000ClUnsigned Absolute difference and Accumulate Long Arm\xe2\x80\x99s \xe2\x80\xa6000ChAbsolute difference and accumulate (128-bit) Arm\xe2\x80\x99s \xe2\x80\xa60000000ChFloating-point absolute difference Arm\xe2\x80\x99s documentation0CeSigned Absolute difference Long Arm\xe2\x80\x99s documentation000CgUnsigned Absolute difference Long Arm\xe2\x80\x99s documentation000ClAbsolute difference between the arguments of Floating Arm\xe2\x80\xa60000CeAbsolute difference between the arguments Arm\xe2\x80\x99s \xe2\x80\xa600000004C`Absolute Value (wrapping). Arm\xe2\x80\x99s documentationCcFloating-point absolute value Arm\xe2\x80\x99s documentation000000C`Absolute value (wrapping). Arm\xe2\x80\x99s documentation0002kVector add.0AiAdd Arm\xe2\x80\x99s documentation0BhAdd Long (vector). Arm\xe2\x80\x99s documentation0000000CcSigned Add Long across Vector Arm\xe2\x80\x99s documentationCeUnsigned Add Long across Vector Arm\xe2\x80\x99s documentationCbFloating-point Add (vector). Arm\xe2\x80\x99s documentation0BaVector add. Arm\xe2\x80\x99s documentation06BjBitwise exclusive OR Arm\xe2\x80\x99s documentation000111111111111CfFloating-point add across vector Arm\xe2\x80\x99s documentationBgAdd across vector Arm\xe2\x80\x99s documentation00000AnAdd Wide Arm\xe2\x80\x99s documentation0000000CbAES single round encryption. Arm\xe2\x80\x99s documentation000ChMulti-vector floating-point absolute maximum Arm\xe2\x80\x99s \xe2\x80\xa6ChMulti-vector floating-point absolute minimum Arm\xe2\x80\x99s \xe2\x80\xa6BhVector bitwise and Arm\xe2\x80\x99s documentation00000000000C`Bit clear and exclusive OR Arm\xe2\x80\x99s documentation0BoVector bitwise bit clear. Arm\xe2\x80\x99s documentation00000000000BeBitwise Select. Arm\xe2\x80\x99s documentation000AiBitwise Select. (128-bit)110111111111111ClFloating-point absolute compare greater than or equal Arm\xe2\x80\xa60000ChFloating-point absolute compare greater than Arm\xe2\x80\x99s \xe2\x80\xa60000CnFloating-point absolute compare less than or equal Arm\xe2\x80\x99s \xe2\x80\xa60000CeFloating-point absolute compare less than Arm\xe2\x80\x99s \xe2\x80\xa60000CbFloating-point compare equal Arm\xe2\x80\x99s documentationBkCompare bitwise equal Arm\xe2\x80\x99s documentation0111111CdCompare bitwise Equal (vector) Arm\xe2\x80\x99s documentation00000000002ChFloating-point compare bitwise equal to zero Arm\xe2\x80\x99s \xe2\x80\xa600CjSigned compare bitwise equal to zero Arm\xe2\x80\x99s documentation000CbUnsigned compare bitwise equal to zero Arm\xe2\x80\x99s \xe2\x80\xa600110ChFloating-point compare greater than or equal Arm\xe2\x80\x99s \xe2\x80\xa6CcCompare greater than or equal Arm\xe2\x80\x99s documentation0111111CjCompare signed greater than or equal Arm\xe2\x80\x99s documentation0000CbCompare unsigned greater than or equal Arm\xe2\x80\x99s \xe2\x80\xa600003CnFloating-point compare greater than or equal to zero Arm\xe2\x80\x99\xe2\x80\xa6000ChCompare signed greater than or equal to zero Arm\xe2\x80\x99s \xe2\x80\xa6000CiFloating-point compare greater than Arm\xe2\x80\x99s documentationBjCompare greater than Arm\xe2\x80\x99s documentation0111111CaCompare signed greater than Arm\xe2\x80\x99s documentation0000CcCompare unsigned greater than Arm\xe2\x80\x99s documentation00003CdFloating-point compare greater than zero Arm\xe2\x80\x99s \xe2\x80\xa6000CfCompare signed greater than zero Arm\xe2\x80\x99s documentation000CeFloating-point compare less than or equal Arm\xe2\x80\x99s \xe2\x80\xa6C`Compare less than or equal Arm\xe2\x80\x99s documentation0111111CgCompare signed less than or equal Arm\xe2\x80\x99s documentation0000CiCompare unsigned less than or equal Arm\xe2\x80\x99s documentation00003CmFloating-point compare less than or equal to zero Arm\xe2\x80\x99s \xe2\x80\xa6000CeCompare signed less than or equal to zero Arm\xe2\x80\x99s \xe2\x80\xa6000BmCount leading sign bits Arm\xe2\x80\x99s documentation0000000CfFloating-point compare less than Arm\xe2\x80\x99s documentationBgCompare less than Arm\xe2\x80\x99s documentation0111111BnCompare signed less than Arm\xe2\x80\x99s documentation0000C`Compare unsigned less than Arm\xe2\x80\x99s documentation0000333CkFloating-point compare less than zero Arm\xe2\x80\x99s documentation0CcCompare signed less than zero Arm\xe2\x80\x99s documentation000BmCount leading zero bits Arm\xe2\x80\x99s documentation0000000CfFloating-point complex multiply accumulate Arm\xe2\x80\x99s \xe2\x80\xa60AlDivide Arm\xe2\x80\x99s documentation000CeDot product arithmetic (vector) Arm\xe2\x80\x99s documentation000ChDuplicate vector element to vector or scalar Arm\xe2\x80\x99s \xe2\x80\xa600000mVector cmpeq.0AdVector Compare EqualmVector cmpge.0BdVector Compare Greater Than or EqualmVector cmpgt.0AkVector Compare Greater ThanmVector cmple.0BaVector Compare Less Than or EqualmVector cmplt.0AcVector Compare LessAhVector Compare Not Equal00AeVector Compare RangesAjVector Count Leading Zeros00AkVector Count Trailing ZerosClA double-ended queue (deque) implemented with a growable \xe2\x80\xa60mVector expte.0B`Vector Convert from int to floatmVector floor.0lVector FloorAmVector Multiply Add Saturated0AlVector Multiply and Add EvenAlVector Multiply and Add HighBnVector Multiply Low and Add Unsigned Half Word0AkVector Multiply and Add LowAkVector Multiply and Add OddAmVector Multiply Sum Saturated0AlVector Negative Multiply AddBaVector Negative Multiply Subtract00AeVector Pack Saturated00lVector Round00lVector Splat00BiVector Sum Across Partial (1/2) Saturated0BiVector Sum Across Partial (1/4) Saturated0oVector TruncateBlThree-way exclusive OR Arm\xe2\x80\x99s documentation0CjVector bitwise exclusive or (vector) Arm\xe2\x80\x99s documentation00000000000CiExtract vector from pair of vectors Arm\xe2\x80\x99s documentation0000000000000000000ClFloating-point fused multiply-add to accumulator Arm\xe2\x80\x99s \xe2\x80\xa6CmFloating-point fused Multiply-Add to accumulator (vector) \xe2\x80\xa60ClFloating-point fused Multiply-Add to accumulator(vector) \xe2\x80\xa600CnFloating-point fused multiply-subtract from accumulator Arm\xe2\x80\xa600000BaHalving add Arm\xe2\x80\x99s documentation00000000000BmSigned halving subtract Arm\xe2\x80\x99s documentation00000000000ChLoad multiple single-element structures to one, two, \xe2\x80\xa60000000000CnLoad single 2-element structure and replicate to all lanes \xe2\x80\xa60CmLoad multiple 2-element structures to two registers Arm\xe2\x80\x99\xe2\x80\xa6000000000000000CnLoad single 3-element structure and replicate to all lanes \xe2\x80\xa60ClLoad multiple 3-element structures to three registers Arm\xe2\x80\xa6000000000000000CnLoad single 4-element structure and replicate to all lanes \xe2\x80\xa60CnLoad multiple 4-element structures to four registers Arm\xe2\x80\x99\xe2\x80\xa6000000000000000BfMaximum (vector) Arm\xe2\x80\x99s documentation0000000000000CgFloating-point maximum number across vector Arm\xe2\x80\x99s \xe2\x80\xa6BlHorizontal vector max. Arm\xe2\x80\x99s documentation000000BfMinimum (vector) Arm\xe2\x80\x99s documentation0000000000000CgFloating-point minimum number across vector Arm\xe2\x80\x99s \xe2\x80\xa6BlHorizontal vector min. Arm\xe2\x80\x99s documentation000000BnSigned multiply-add long Arm\xe2\x80\x99s documentation000C`Unsigned multiply-add long Arm\xe2\x80\x99s documentation000CfFloating-point multiply-add to accumulator Arm\xe2\x80\x99s \xe2\x80\xa600CaMultiply-add to accumulator Arm\xe2\x80\x99s documentation0000000CcSigned multiply-subtract long Arm\xe2\x80\x99s documentation000CeUnsigned multiply-subtract long Arm\xe2\x80\x99s documentation000CmFloating-point multiply-subtract from accumulator Arm\xe2\x80\x99s \xe2\x80\xa600ChMultiply-subtract from accumulator Arm\xe2\x80\x99s documentation0000000ChDuplicate vector element to vector or scalar Arm\xe2\x80\x99s \xe2\x80\xa600000BgVector long move. Arm\xe2\x80\x99s documentation0000000BlVector narrow integer. Arm\xe2\x80\x99s documentation00000000000AiAdd Arm\xe2\x80\x99s documentationBnPolynomial multiply long Arm\xe2\x80\x99s documentationBjSigned multiply long Arm\xe2\x80\x99s documentation000BlUnsigned multiply long Arm\xe2\x80\x99s documentation000AnMultiply Arm\xe2\x80\x99s documentation000000000000CfFloating-point multiply extended Arm\xe2\x80\x99s documentation00BiVector bitwise not. Arm\xe2\x80\x99s documentation0000000AlNegate Arm\xe2\x80\x99s documentation00000000000CeVector bitwise inclusive OR NOT Arm\xe2\x80\x99s documentation00000000000CdVector bitwise or (immediate, inclusive) Arm\xe2\x80\x99s \xe2\x80\xa600000000000CdSigned Add and Accumulate Long Pairwise. Arm\xe2\x80\x99s \xe2\x80\xa60CfUnsigned Add and Accumulate Long Pairwise. Arm\xe2\x80\x99s \xe2\x80\xa60CaFloating-point add pairwise Arm\xe2\x80\x99s documentation000BcAdd pairwise. Arm\xe2\x80\x99s documentation00000003322BbAdd Pairwise Arm\xe2\x80\x99s documentation02CgFolding maximum of adjacent pairs Arm\xe2\x80\x99s documentation000000000003CgFolding minimum of adjacent pairs Arm\xe2\x80\x99s documentation00000000000CfSigned saturating Absolute value Arm\xe2\x80\x99s documentation0000CfSigned saturating absolute value Arm\xe2\x80\x99s documentation11BdSaturating add Arm\xe2\x80\x99s documentation00000000000000000BnSigned saturating negate Arm\xe2\x80\x99s documentation0000000CkSigned saturating rounding shift left Arm\xe2\x80\x99s documentation0CjUnsigned signed saturating rounding shift left Arm\xe2\x80\x99s \xe2\x80\xa60CbSigned saturating shift left Arm\xe2\x80\x99s documentation00000CdUnsigned saturating shift left Arm\xe2\x80\x99s documentation00000101100BiSaturating subtract Arm\xe2\x80\x99s documentation00000000000000000BcTable look-up Arm\xe2\x80\x99s documentation00000000000BlExtended table look-up Arm\xe2\x80\x99s documentation00000000000BgReverse bit order Arm\xe2\x80\x99s documentation00CgReversing vector elements (swap endianness) Arm\xe2\x80\x99s \xe2\x80\xa600000000000000000BjRounding halving add Arm\xe2\x80\x99s documentation000CmFloating-point round to integral, to nearest with ties to \xe2\x80\xa6000ClFloating-point round to integral, using current rounding \xe2\x80\xa600CnFloating-point round to integral, toward minus infinity Arm\xe2\x80\xa60022222CmFloating-point round to integral, toward plus infinity Arm\xe2\x80\xa600CiFloating-point round to integral, toward zero Arm\xe2\x80\x99s \xe2\x80\xa600CiFloating-point round to integral exact, using current \xe2\x80\xa600C`Signed rounding shift left Arm\xe2\x80\x99s documentation00000CbUnsigned rounding shift left Arm\xe2\x80\x99s documentation000001100B`Shift left Arm\xe2\x80\x99s documentation000BgSigned Shift left Arm\xe2\x80\x99s documentationBiUnsigned Shift left Arm\xe2\x80\x99s documentation111111000000BaShift right Arm\xe2\x80\x99s documentation000CgShift Left and Insert (immediate) Arm\xe2\x80\x99s documentation00CkUnsigned saturating Accumulate of Signed value. Arm\xe2\x80\x99s \xe2\x80\xa6CdCalculates the square root of each lane. Arm\xe2\x80\x99s \xe2\x80\xa600CgSigned shift right and accumulate Arm\xe2\x80\x99s documentation0CiUnsigned shift right and accumulate Arm\xe2\x80\x99s documentation0ChShift Right and Insert (immediate) Arm\xe2\x80\x99s documentation00CkStore multiple single-element structures from one, two, \xe2\x80\xa60000000000CmStore multiple 2-element structures from two registers Arm\xe2\x80\xa600000000000000000ClStore multiple 3-element structures from three registers \xe2\x80\xa600000000000000000CnStore multiple 4-element structures from four registers Arm\xe2\x80\xa600000000000000000AnSubtract Arm\xe2\x80\x99s documentation00BjSigned Subtract Long Arm\xe2\x80\x99s documentation000BlUnsigned Subtract Long Arm\xe2\x80\x99s documentation00022222222222222222BjSigned Subtract Wide Arm\xe2\x80\x99s documentation000BlUnsigned Subtract Wide Arm\xe2\x80\x99s documentation000BgTranspose vectors Arm\xe2\x80\x99s documentation0000000000000000000BhTranspose elements Arm\xe2\x80\x99s documentation0000000000000CgCompare bitwise test bits nonzero Arm\xe2\x80\x99s documentation0CdSigned compare bitwise Test bits nonzero Arm\xe2\x80\x99s \xe2\x80\xa60000000CfUnsigned compare bitwise Test bits nonzero Arm\xe2\x80\x99s \xe2\x80\xa60000CkSigned saturating Accumulate of Unsigned value. Arm\xe2\x80\x99s \xe2\x80\xa6BcUnzip vectors Arm\xe2\x80\x99s documentation000000000000000000000000000000000BmExclusive OR and rotate Arm\xe2\x80\x99s documentationBaZip vectors Arm\xe2\x80\x99s documentation000000000000000000000000000000000FcReturns <code>true</code> if this <code>Waker</code> and another <code>Waker</code> would awake \xe2\x80\xa6FaReturns <code>true</code> if this <code>LocalWaker</code> and another <code>LocalWaker</code> \xe2\x80\xa610CjWinsorize a set of samples, replacing values above the \xe2\x80\xa6ChCreates a new pointer with the given address and the \xe2\x80\xa600BmCreates a new pointer with the given address.01110000ChCopies the <code>va_list</code> at the current location.0CdAttempts to write an entire buffer into this writer.DhGlue for usage of the <code>write!</code> macro with implementors of \xe2\x80\xa600000CmWrites a formatted string into this writer, returning any \xe2\x80\xa6CbWrites a single <code>i16</code> into this hasher.0CbWrites a single <code>i32</code> into this hasher.0CbWrites a single <code>i64</code> into this hasher.0CmWrites a string slice into this writer, returning whether \xe2\x80\xa6CnWrites some data to the underlying buffer contained within \xe2\x80\xa610CbWrites a single <code>str</code> into this hasher.210CbWrites a single <code>u16</code> into this hasher.0CbWrites a single <code>u32</code> into this hasher.0CbWrites a single <code>u64</code> into this hasher.0CgCooperatively gives up a timeslice to the OS scheduler.CnUnpack first and zeroth into two 16-bit unsigned halfwords \xe2\x80\xa60CeUnpack second and zeroth into two 16-bit unsigned \xe2\x80\xa60CnUnpack third and zeroth into two 16-bit unsigned halfwords \xe2\x80\xa60CmUnpack third and first into two 16-bit unsigned halfwords \xe2\x80\xa60CnUnpack third and second into two 16-bit unsigned halfwords \xe2\x80\xa60AbAdmin-Local scope.0DjThe <code>AllocError</code> error indicates an allocation failure that \xe2\x80\xa6BfThe memory allocator returned an error110fU+00270CgAn async-aware version of the <code>FnMut</code> trait.0CjA boolean type which can be safely shared between threads.0CkAn integer type which can be safely shared between threads.000AoType representing basic blocks.0C`A priority queue implemented with a binary heap.00AkA borrowed file descriptor.BoThe operation failed because a pipe was closed.EbLike <code>Iterator::by_ref</code>, but requiring <code>Sized</code> so it can \xe2\x80\xa60EaA wrapper for <code>Vec&lt;u8&gt;</code> representing a human-readable string \xe2\x80\xa60CgA handle to a child process\xe2\x80\x99s standard input (stdin).CnAn iterator over slice in (non-overlapping) mutable chunks \xe2\x80\xa600DfUnix-specific extensions to the <code>process::Command</code> builder.DdWindows-specific extensions to the <code>process::Command</code> \xe2\x80\xa6BoOs-specific extensions for <code>Command</code>DdAn iterator over the <code>Component</code>s of a <code>Path</code>.CjSpecifies the filename prefix, if any, used for shared \xe2\x80\xa6CjSpecifies the filename suffix, if any, used for shared \xe2\x80\xa6CmSpecifies whether the <code>Debug</code> trait should use \xe2\x80\xa600CnA struct to help with <code>fmt::Debug</code> implementations.00CeA structure representing a diagnostic message and \xe2\x80\xa6CkA lazy iterator producing elements in the difference of \xe2\x80\xa600ChA builder used to create directories in various manners.fU+00240CnSpecifies the filename suffix, if any, used for executable \xe2\x80\xa6ChIterator returned by <code>OsStrExt::encode_wide</code>.fU+003D0CjDescribes the result of a process after it has terminated.EgSupporting trait for inherent methods of <code>f32</code> and <code>f64</code> such \xe2\x80\xa60BkA classification of floating point numbers.0CjThe operation was partially successful and needs to be \xe2\x80\xa6C`The error type for errors that can never happen.0CfUsed to convert a range into start and end bounds, \xe2\x80\xa6000BfConversion into a <code>Future</code>.BnWhich kind of future are we turning this into?10CnAn owning iterator over the values of a <code>BTreeMap</code>.CmAn owning iterator over the values of a <code>HashMap</code>.1CiA buffer type used with <code>Read::read_vectored</code>.CiTrait to determine if a descriptor/handle refers to a \xe2\x80\xa6CiAn owned permission to join on a thread (block on its \xe2\x80\xa6CnWraps a writer and buffers output to it, flushing whenever \xe2\x80\xa6BfA doubly-linked list with owned nodes.00EcA <code>LocalWaker</code> is analogous to a <code>Waker</code>, but it does not \xe2\x80\xa60CmA type alias for the result of a lock method which can be \xe2\x80\xa60BbMaximum x for which 10x is normal.000DkMaximum possible power of 10 exponent. Use <code>f32::MAX_10_EXP</code> \xe2\x80\xa6DkMaximum possible power of 10 exponent. Use <code>f64::MAX_10_EXP</code> \xe2\x80\xa6222210BbMinimum x for which 10x is normal.000CeMinimum possible normal power of 10 exponent. Use \xe2\x80\xa60111100ChAn iterator over the mapped windows of another iterator.0CmAn RAII implementation of a \xe2\x80\x9cscoped lock\xe2\x80\x9d of a mutex. \xe2\x80\xa600AoThe duration of one nanosecond.0CdAn <code>i16</code> that is known not to equal zero.0CdAn <code>i32</code> that is known not to equal zero.0CdAn <code>i64</code> that is known not to equal zero.0CcA <code>u16</code> that is known not to equal zero.0CcA <code>u32</code> that is known not to equal zero.0CcA <code>u64</code> that is known not to equal zero.0CmThe specified environment variable was not present in the \xe2\x80\xa6ClThe specified environment variable was found, but it did \xe2\x80\xa6fU+00230BiA type alias for <code>Infallible</code>.0BjTrait for types that form a partial order.DiDerive macro generating an impl of the trait <code>PartialOrd</code>. \xe2\x80\xa610AnRead end of an anonymous pipe.AoWrite end of an anonymous pipe.CiAn iterator over a slice in (non-overlapping) mutable \xe2\x80\xa600CiAn iterator over subslices separated by elements that \xe2\x80\xa600BnThe type of raw OS error codes returned by \xe2\x80\xa6AbRealm-Local scope.0DiAn iterator that repeats elements of type <code>A</code> endlessly by \xe2\x80\xa60BiWhether ignored test should be run or not0CoProvides intentionally-saturating arithmetic on <code>T</code>.0CfResult of calling <code>Searcher::next()</code> or \xe2\x80\xa600BoOperations on SIMD vectors of mutable pointers.00BlA helper trait used for indexing operations.00C`An internet socket address, either IPv4 or IPv6.0BiAn address associated with a Unix socket.CnAn iterator that splits an environment variable into paths \xe2\x80\xa6CeA locked reference to the <code>Stderr</code> handle.CeA locked reference to the <code>Stdout</code> handle.fU+001A0CnAn iterator which, starting from an initial item, computes \xe2\x80\xa60DhThe sending-half of Rust\xe2\x80\x99s synchronous <code>sync_channel</code> type.ClA measurement of the system clock, useful for talking to \xe2\x80\xa6CeAn iterator that reports an accurate length using \xe2\x80\xa60CeAn anchor in time which can be used to create new \xe2\x80\xa60AeA Unix stream socket.CcThe core primitive for interior mutability in Rust.0CmA marker trait which represents \xe2\x80\x9cpanic safe\xe2\x80\x9d types in \xe2\x80\xa60ClAn iterator used to decode a slice of mostly UTF-8 bytes \xe2\x80\xa600BoBasic implementation of a <code>va_list</code>.0CkThe lock could not be acquired at this time because the \xe2\x80\xa60CiA lock could not be acquired at this time because the \xe2\x80\xa6CmThe lock could not be acquired at this time because it is \xe2\x80\xa6CnThe operation needs to block to complete, but the blocking \xe2\x80\xa6AnEqual (ordered, non-signaling)0AjEqual (ordered, signaling)0B`Equal (unordered, non-signaling)0AlEqual (unordered, signaling)0BnGreater-than-or-equal (ordered, non-signaling)0BjGreater-than-or-equal (ordered, signaling)0BeGreater-than (ordered, non-signaling)0BaGreater-than (ordered, signaling)0BkLess-than-or-equal (ordered, non-signaling)0BgLess-than-or-equal (ordered, signaling)0BbLess-than (ordered, non-signaling)0AnLess-than (ordered, signaling)0AgOrdered (non-signaling)0AcOrdered (signaling)0GbExtracts bits in range [<code>start</code>, <code>start</code> + <code>length</code>) from <code>a</code> into \xe2\x80\xa600EeReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>.DhSets the least significant zero bit of <code>x</code> and clears all \xe2\x80\xa600CeClears least significant bit and sets all other bits.00G`Restores the <code>XMM</code>, <code>MMX</code>, <code>MXCSR</code>, and <code>x87</code> FPU registers from \xe2\x80\xa6CnBitwise OR of 8-bit masks a and b, and store the result in \xe2\x80\xa60BnCounts the leading most significant zero bits.00CmCompute the bitwise OR of 16-bit masks a and b, and store \xe2\x80\xa60CjFinds the absolute value of each packed half-precision \xe2\x80\xa60ChAdds packed double-precision (64-bit) floating-point \xe2\x80\xa60CnAdd packed half-precision (16-bit) floating-point elements \xe2\x80\xa60ChAdds packed single-precision (32-bit) floating-point \xe2\x80\xa60DkReturns a new vector with the low element of <code>a</code> replaced by \xe2\x80\xa60ChAdd the lower half-precision (16-bit) floating-point \xe2\x80\xa60EgAdds the first component of <code>a</code> and <code>b</code>, the other components \xe2\x80\xa60CgComputes the bitwise AND of packed double-precision \xe2\x80\xa60CcBitwise AND of packed single-precision (32-bit) \xe2\x80\xa60ClCompares packed double-precision (64-bit) floating-point \xe2\x80\xa60ClCompares packed single-precision (32-bit) floating-point \xe2\x80\xa60C`Compares the lower double-precision (64-bit) \xe2\x80\xa60C`Compares the lower single-precision (32-bit) \xe2\x80\xa60CjDivide packed double-precision (64-bit) floating-point \xe2\x80\xa60ChDivide packed half-precision (16-bit) floating-point \xe2\x80\xa60CkDivides packed single-precision (32-bit) floating-point \xe2\x80\xa60;;CkDivide the lower half-precision (16-bit) floating-point \xe2\x80\xa60DnDivides the first component of <code>b</code> by <code>a</code>, the other \xe2\x80\xa60CkGets the unsigned 32-bit value of the MXCSR control and \xe2\x80\xa60ClPerforms a serializing operation on all load-from-memory \xe2\x80\xa60CeReturns a new vector with the maximum values from \xe2\x80\xa60CiCompare packed half-precision (16-bit) floating-point \xe2\x80\xa60;;DkReturns a new vector with the low element of <code>a</code> replaced by \xe2\x80\xa60ClCompare the lower half-precision (16-bit) floating-point \xe2\x80\xa60C`Compares the first single-precision (32-bit) \xe2\x80\xa6055CeReturns a new vector with the minimum values from \xe2\x80\xa6044??332211CnMultiplies packed double-precision (64-bit) floating-point \xe2\x80\xa60CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa60CnMultiplies packed single-precision (32-bit) floating-point \xe2\x80\xa6066CmMultiply the lower half-precision (16-bit) floating-point \xe2\x80\xa60EbMultiplies the first component of <code>a</code> and <code>b</code>, the other \xe2\x80\xa60CgCompute the approximate reciprocal of packed 16-bit \xe2\x80\xa60C`Returns the approximate reciprocal of packed \xe2\x80\xa60CcCompute the approximate reciprocal of the lower \xe2\x80\xa60CcReturns the approximate reciprocal of the first \xe2\x80\xa60ChSets packed double-precision (64-bit) floating-point \xe2\x80\xa60CnSet packed half-precision (16-bit) floating-point elements \xe2\x80\xa60DkConstruct a <code>__m128</code> from four floating point values highest \xe2\x80\xa60DjCopies double-precision (64-bit) floating-point element <code>a</code> \xe2\x80\xa60CmCopy half-precision (16-bit) floating-point elements from \xe2\x80\xa60EeConstruct a <code>__m128</code> with the lowest element set to <code>a</code> and \xe2\x80\xa60ClSets the MXCSR register with the 32-bit unsigned integer \xe2\x80\xa60ClPerforms a serializing operation on all non-temporal (\xe2\x80\x9c\xe2\x80\xa60ClSubtract packed double-precision (64-bit) floating-point \xe2\x80\xa60CjSubtract packed half-precision (16-bit) floating-point \xe2\x80\xa60CmSubtracts packed single-precision (32-bit) floating-point \xe2\x80\xa60DkReturns a new vector with the low element of <code>a</code> replaced by \xe2\x80\xa60CmSubtract the lower half-precision (16-bit) floating-point \xe2\x80\xa60EbSubtracts the first component of <code>b</code> from <code>a</code>, the other \xe2\x80\xa60CnComputes the bitwise XOR of <code>a</code> and <code>b</code>.0ClBitwise exclusive OR of packed single-precision (32-bit) \xe2\x80\xa60BaZero the tile specified by tdest.CjCounts the number of trailing least significant zero bits.0000DgSets all bits below the least significant one of <code>x</code> and \xe2\x80\xa600CePerforms a full or partial restore of the enabled \xe2\x80\xa6BgPerforms the <code>+=</code> operation.0CaAdvances the iterator by <code>n</code> elements.00CiProvides in-place mutable access to an occupied entry \xe2\x80\xa600CnReturns a raw mutable pointer to the vector\xe2\x80\x99s buffer, or \xe2\x80\xa6DcReturns a raw mutable pointer to the <code>Box</code>\xe2\x80\x99s contents.BnReturns a raw pointer to the array\xe2\x80\x99s buffer.BnReturns a raw pointer to the slice\xe2\x80\x99s buffer.CjReturns an unsafe mutable pointer to the slice\xe2\x80\x99s buffer.CaConverts a mutable string slice to a raw pointer.2CjGets a mutable pointer to the contained value. Reading \xe2\x80\xa643213605CkConverts a <code>String</code> into a mutable string slice.0DhReturns a mutable reference to the contents of this <code>String</code>.0C`Returns the alignment as a NonZero&lt;usize&gt;.0EiConverts from Pin&lt;&amp;mut Option&lt;T&gt;&gt; to Option&lt;Pin&lt;&amp;mut T&gt;&gt;.0EaConverts from Pin&lt;&amp;Option&lt;T&gt;&gt; to Option&lt;Pin&lt;&amp;T&gt;&gt;.0DcSplits the slice into a slice of <code>N</code>-element arrays, \xe2\x80\xa60DiConverts a <code>VaListImpl</code> into a <code>VaList</code> that is \xe2\x80\xa60DkCall the <code>AsyncFn</code>, returning a future which may borrow from \xe2\x80\xa60BbComposable asynchronous iteration.0ClReturns the last access time of the file, in nanoseconds \xe2\x80\xa6CnBitwise and with the current value, returning the previous \xe2\x80\xa60DkMaximum with the current value using a signed comparison. <code>T</code>\xe2\x80\xa60DkMinimum with the current value using a signed comparison. <code>T</code>\xe2\x80\xa60CnBitwise xor with the current value, returning the previous \xe2\x80\xa60DbSets the <code>dwFileAttributes</code> argument to the call to \xe2\x80\xa6CdReverses the bits in an integer type <code>T</code>.0BdMutably borrows from an owned value.0BbMutably borrows the wrapped value.01DcReturns a <code>BorrowedHandle</code> holding the given raw handle.DcReturns a <code>BorrowedSocket</code> holding the given raw socket.DhReturns a <code>BorrowedFd</code> holding the given raw file descriptor.CiExecutes a breakpoint trap, for inspection by a debugger.CeCompiles to a target-specific software breakpoint \xe2\x80\xa61CjReturns the span\xe2\x80\x99s byte position range in the source \xe2\x80\xa6E`Equivalent to C\xe2\x80\x99s <code>signed long long</code> (<code>long long</code>) type.00CnReturns whether the panic handler is allowed to unwind the \xe2\x80\xa60DkCasts from a pointer-to-<code>T</code> to a pointer-to-<code>[T; N]</code>.00000BlChanges constness without changing the type.0000DbSelects code at compile-time based on <code>cfg</code> predicates.0DjReturns an iterator over <code>chunk_size</code> elements of the slice \xe2\x80\xa60DdOverwrites the contents of <code>self</code> with a clone of the \xe2\x80\xa6EeCopies <code>source</code>\xe2\x80\x99s contents into <code>self</code> without creating a \xe2\x80\xa60111DbClones the contents of <code>source</code> into <code>self</code>.CbPerforms copy-assignment from <code>source</code>.fPanicsDgAssigns a clone of <code>source</code> to <code>self</code>, unless \xe2\x80\xa62335144355550ChUses borrowed data to replace owned data, usually by \xe2\x80\xa60CeCompares and exchange 16 bytes (128 bits) of data \xe2\x80\xa6DbProduces an iterator over the <code>Component</code>s of the path.CnReturns the number of ones in the binary representation of \xe2\x80\xa600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CkCalculate the CRC value using the Castagnoli polynomial \xe2\x80\xa6000000CcCreates a new, empty directory at the provided pathClCreates a new file in read-write mode; error if the file \xe2\x80\xa6CgSets the option to create a new file, failing if it \xe2\x80\xa6CmReturns the unescaped string value if the current literal \xe2\x80\xa6CgReturns the last status change time of the file, in \xe2\x80\xa6CfDeallocates the memory referenced by <code>ptr</code>.00DdCreates a <code>DebugList</code> builder designed to assist with \xe2\x80\xa600CnVisits the elements representing the difference, i.e., the \xe2\x80\xa6ClVisits the values representing the difference, i.e., the \xe2\x80\xa61EaSame as <code>self /= other.get()</code>, but because <code>other</code> is a \xe2\x80\xa600000BgPerforms the <code>/=</code> operation.1111110CjCalculates Euclidean division, the matching method for \xe2\x80\xa60DiCalculates the quotient of Euclidean division of <code>self</code> by \xe2\x80\xa60000AlPerforms Euclidean division.000010DmExperimental version of <code>div_euclid</code> in <code>core</code>. See \xe2\x80\xa603333222221111121BcAdds a new entry to the set output.BdAdds a new entry to the list output.1010CfRemoves an explicitly set environment variable and \xe2\x80\xa6EdReturns the contained <code>Err</code> value, consuming the <code>self</code> value.0BnExtends a collection with exactly one element.00ClCreates an iterator which uses a closure to determine if \xe2\x80\xa60CnCreates an iterator that visits elements (key-value pairs) \xe2\x80\xa6CmCreates an iterator that visits elements in the specified \xe2\x80\xa6222102ChLane-wise rounding to the nearest integral value not \xe2\x80\xa600DaLane-wise maximum value, defined as <code>a &lt; b ? b : a</code>00DaLane-wise minimum value, defined as <code>b &lt; a ? b : a</code>00ChCalculates the square root of each lane of a 128-bit \xe2\x80\xa600333222111000BhLogical \xe2\x80\x9cnand\xe2\x80\x9d with a boolean value.BjBitwise \xe2\x80\x9cnand\xe2\x80\x9d with the current value.000000000001000000000000C`Adds a new field to the generated struct output.CfAdds a new field to the generated tuple struct output.1010DcReturns the value of the <code>nFileIndex</code> fields of this \xe2\x80\xa6BkFills <code>bytes</code> with random bytes.0ClReturns a mutable reference to the filled portion of the \xe2\x80\xa60BoCreates an iterator that both filters and maps.0DjMakes a new <code>Ref</code> for an optional component of the borrowed \xe2\x80\xa6DdMakes a new <code>RefMut</code> for an optional component of the \xe2\x80\xa62DiMakes a <code>MappedMutexGuard</code> for a component of the borrowed \xe2\x80\xa60DeMakes a <code>MappedRwLockReadGuard</code> for a component of the \xe2\x80\xa6DfMakes a <code>MappedRwLockWriteGuard</code> for a component of the \xe2\x80\xa61022101043EeReturns <code>a * b + c</code> for <code>f16</code> values, non-deterministically \xe2\x80\xa60EeReturns <code>a * b + c</code> for <code>f32</code> values, non-deterministically \xe2\x80\xa60EeReturns <code>a * b + c</code> for <code>f64</code> values, non-deterministically \xe2\x80\xa60DdCompares the <em>addresses</em> of the two function pointers for \xe2\x80\xa60BjConverts an array of bools to a SIMD mask.BcConverts an array to a SIMD vector.10CkParses an integer from an ASCII-byte slice with decimal \xe2\x80\xa600000000000000000000000C`Creates an <code>OsStr</code> from a byte slice.0CkConverts a digit in the given radix to a <code>char</code>.DcConverts a digit in the given radix to a <code>char</code>. Use \xe2\x80\xa610DgCreates a new <code>Duration</code> from the specified number of hours.0DdCreates a new <code>Duration</code> from the specified number of \xe2\x80\xa60EgCreates a <code>Vec&lt;T&gt;</code> directly from a <code>NonNull</code> pointer, a \xe2\x80\xa60DeConverts a slice to a SIMD vector containing <code>slice[..N]</code>.0DhDecode a native endian UTF-16\xe2\x80\x93encoded vector <code>v</code> into a \xe2\x80\xa60DbCreates a new <code>Context</code> from a <code>&amp;Waker</code>.BfCreates a ContextBuilder from a Waker.10DgCreates a new <code>Duration</code> from the specified number of weeks.0CcReads elementwise from pointers into a SIMD vector.0BjReturns the contained value by cloning it.000AmModule-level inline assembly.CnFeeds a slice of this type into the given <code>Hasher</code>.0DhInserts an element at position <code>index</code> within the vector, \xe2\x80\xa6DkInserts an element at <code>index</code> within the deque, shifting all \xe2\x80\xa610DiInserts a string slice into this <code>String</code> at byte position \xe2\x80\xa60CoArm-specific type containing two <code>int8x8_t</code> vectors.0DaArm-specific type containing three <code>int8x8_t</code> vectors.0D`Arm-specific type containing four <code>int8x8_t</code> vectors.0AeInterleave two masks.AgInterleave two vectors.10BoConverts the reference-counted slice into a \xe2\x80\xa6BlConverts the boxed slice into a boxed array.1101DeConsumes the <code>CString</code> and returns the underlying byte \xe2\x80\xa6CiReturns the bytes that were attempted to convert to a \xe2\x80\xa6CbConverts a <code>String</code> into a byte vector.12101EfConverts a <code>String</code> into an iterator over the <code>char</code>s of the \xe2\x80\xa60DhConsumes the <code>IntoInnerError</code> and returns the error which \xe2\x80\xa6DkReturns the inner value, if the <code>Arc</code> has exactly one strong \xe2\x80\xa6CkConsumes the <code>Box</code>, returning the wrapped value.DjReturns the inner value, if the <code>Rc</code> has exactly one strong \xe2\x80\xa6CmConsumes the <code>Ready</code>, returning the wrapped value.ClConsumes the <code>Rev</code>, returning the inner iterator.DiDestructures the <code>RangeInclusive</code> into (lower bound, upper \xe2\x80\xa6ClUnwraps the value, consuming this <code>UnsafePinned</code>.DkUnwraps this <code>Pin&lt;Ptr&gt;</code>, returning the underlying pointer.ChUnwrap the value contained in the <code>Exclusive</code>CdConsumes the atomic and returns the contained value.0000000000000DaConsumes the <code>DropGuard</code>, returning the wrapped value.D`Extracts the value from the <code>ManuallyDrop</code> container.CoConsumes this <code>LazyCell</code> returning the stored value.BoConsumes the cell, returning the wrapped value.BfUnwraps the value, consuming the cell.CoConsumes the <code>RefCell</code>, returning the wrapped value.11<;:98?CcConsumes this mutex, returning the underlying data.DaConsumes this <code>RwLock</code>, returning the underlying data.CoConsumes this <code>LazyLock</code> returning the stored value.DhConsumes the <code>OnceLock</code>, returning the wrapped value. ReturnsCbConsumes this lock, returning the underlying data.<;;;;;;;;;;;;;;CkConsumes this error indicating that a lock is poisoned, \xe2\x80\xa654987677;:CkConsumes the <code>Box</code>, returning the wrapped value.DjReturns the inner value, if the <code>Rc</code> has exactly one strong \xe2\x80\xa6DnUnwraps this <code>BufReader&lt;R&gt;</code>, returning the underlying reader.DnUnwraps this <code>BufWriter&lt;W&gt;</code>, returning the underlying writer.CnReturns the perhaps-unwritten data.  Some of this data may \xe2\x80\xa6DfUnwraps this <code>LineWriter</code>, returning the underlying writer.DdConsumes the <code>Error</code>, returning its inner error (if any).ClReturns the buffered writer instance which generated the \xe2\x80\xa6CeConsumes this cursor, returning the underlying value.CoConsumes the <code>Chain</code>, returning the wrapped readers.CmConsumes the <code>Take</code>, returning the wrapped reader.AhExtracts the owned data.0DcDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: \xe2\x80\xa60DoDisassembles this <code>BufWriter&lt;W&gt;</code>, returning the underlying \xe2\x80\xa6DhConsumes the <code>IntoInnerError</code> and returns the error which \xe2\x80\xa6EeReturns the <code>PidFd</code> created for this <code>Child</code>, if available. \xe2\x80\xa6CkViews the underlying data as a subslice of the original \xe2\x80\xa600ChGet the underlying bytes as a mutable slice with the \xe2\x80\xa6CoConverts <code>self</code> into a <code>Vec&lt;Span&gt;</code>.AlTake ownership of the value.EjExtracts the value <code>T</code> that is wrapped by <code>ControlFlow&lt;T, T&gt;</code>.011AdCompiler intrinsics.0DcReturns whether the pointer is properly aligned for <code>T</code>.00000EdReturns <code>true</code> if this <code>char</code> has the general category for \xe2\x80\xa6ClChecks if the value is a control character: 0x00 NUL ..= \xe2\x80\xa610EgReturns <code>true</code> if the result is <code>Err</code> and the value inside of \xe2\x80\xa60ClChecks if the value is a graphic character: 0x21 \xe2\x80\x98!\xe2\x80\x99 \xe2\x80\xa60EfReturns <code>true</code> if the option is a <code>None</code> or the value inside \xe2\x80\xa60DnReturns <code>true</code> if this <code>char</code> has one of the general \xe2\x80\xa60DfReturns <code>true</code> if the poll is a <code>Pending</code> value.0CgReturns <code>true</code> if this is a private address.0DkReturns <code>true</code> if the path exists on disk and is pointing at \xe2\x80\xa6DbReturns <code>true</code> if this metadata is for a symbolic link.ClTests whether this file type represents a symbolic link. \xe2\x80\xa6DiReturns <code>true</code> if this is a unicast address, as defined by \xe2\x80\xa60CdReturns <code>true</code> if the address is unnamed.EdJoins a collection of <code>Path</code>s appropriately for the <code>PATH</code> \xe2\x80\xa6DfReturns an array reference to the last <code>N</code> items in the \xe2\x80\xa60CbReturns the last entry in the map for in-place \xe2\x80\xa60ClReturns the socket address of the local half of this TCP \xe2\x80\xa6CbReturns the local socket address of this listener.CkReturns the socket address that this socket was created \xe2\x80\xa6BcReturns the address of this socket.2ChReturns the socket address of the local half of this \xe2\x80\xa6ClThe path to the source file in which this span occurs on \xe2\x80\xa6CmCreates a new span with the same name resolution behavior \xe2\x80\xa6BnPrints passed tokens into the standard output.0DkReturns the index of the lowest bit set to one in <code>self</code>, or \xe2\x80\xa600000000000DdReturns the index of the lowest bit set to one in <code>self</code>.00000000000111111111111000000000000EeReturns <code>true</code> if this requires <code>Command</code> to create a new pipe.CaA SIMD mask with one element for vectors with \xe2\x80\xa600CbA SIMD mask with two elements for vectors with \xe2\x80\xa600CcA SIMD mask with four elements for vectors with \xe2\x80\xa600CdA SIMD mask with eight elements for vectors with \xe2\x80\xa600CmReturns the element that gives the maximum value from the \xe2\x80\xa60000DgReturns the maximum (IEEE 754-2019 maximum) of two <code>f16</code> \xe2\x80\xa60DgReturns the maximum (IEEE 754-2019 maximum) of two <code>f32</code> \xe2\x80\xa60DgReturns the maximum (IEEE 754-2019 maximum) of two <code>f64</code> \xe2\x80\xa60DgReturns the maximum (IEEE 754-2008 maxNum) of two <code>f128</code> \xe2\x80\xa60CmReturns the element that gives the minimum value from the \xe2\x80\xa60000DgReturns the minimum (IEEE 754-2019 minimum) of two <code>f16</code> \xe2\x80\xa60DgReturns the minimum (IEEE 754-2019 minimum) of two <code>f32</code> \xe2\x80\xa60DgReturns the minimum (IEEE 754-2019 minimum) of two <code>f64</code> \xe2\x80\xa60DgReturns the minimum (IEEE 754-2008 minNum) of two <code>f128</code> \xe2\x80\xa60DjA span that represents <code>macro_rules</code> hygiene, and sometimes \xe2\x80\xa6BaMoves data from a FCSR to the GPR0BaMoves data from a GPR to the FCSR0CfReturns the last modification time of the file, in \xe2\x80\xa6BgPerforms the <code>*=</code> operation.0EfReturns <code>true</code> if the actual type given as <code>T</code> requires drop \xe2\x80\xa6DlReturns <code>true</code> if dropping values of type <code>T</code> matters.10FcConstructs a new <code>Arc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the \xe2\x80\xa6FbConstructs a new <code>Rc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the \xe2\x80\xa610CnConstructs a new <code>Arc</code> with uninitialized contents.CaConstructs a new box with uninitialized contents.CmConstructs a new <code>Rc</code> with uninitialized contents.210DiMoves a type to the heap with its <code>Metadata</code> stored in the \xe2\x80\xa60DkConstructs a new <code>Arc</code> with uninitialized contents, with the \xe2\x80\xa6DkConstructs a new <code>Box</code> with uninitialized contents, with the \xe2\x80\xa6DjConstructs a new <code>Rc</code> with uninitialized contents, with the \xe2\x80\xa6210CmAdvances the iterator and returns an array containing the \xe2\x80\xa600DkConsume and return the next item if it is equal to <code>expected</code>\xe2\x80\xa60BnRetrieve the current position of the iterator.0DbFinds the next <code>Match</code> result. See <code>next()</code>.00BmWakes up all blocked threads on this condvar.0BlWakes up one blocked thread on this condvar.0FnReturns <code>Ok(())</code> if the <code>bool</code> is <code>true</code>, or <code>Err(f())</code> otherwise.EoTransforms the <code>Option&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping \xe2\x80\xa610CjOptionally inspects an environment variable at compile \xe2\x80\xa60ClEnsures a value is in the entry by inserting the default \xe2\x80\xa600ClParses command line arguments into test options. Returns \xe2\x80\xa6DePercentile: the value below which <code>pct</code> percent of the \xe2\x80\xa6D`Arm-specific 64-bit wide vector of four packed <code>p16</code>.0DbArm-specific 128-bit wide vector of eight packed <code>p16</code>.0CoArm-specific 64-bit wide vector of one packed <code>p64</code>.0D`Arm-specific 128-bit wide vector of two packed <code>p64</code>.0DcArm-specific 128-bit wide vector of sixteen packed <code>p8</code>.0CiA support library for macro authors when defining new \xe2\x80\xa6BiAdds an element to the front of the list.ClAppends an element to the front of the cursor\xe2\x80\x99s parent \xe2\x80\xa6BaPrepends an element to the deque.201E`Quote a <code>Span</code> into a <code>TokenStream</code>. This is needed to \xe2\x80\xa6DbReads the exact number of bytes required to fill <code>buf</code>.EfReads all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF \xe2\x80\xa6CgReturns the cumulative bitwise \xe2\x80\x9cand\xe2\x80\x9d across the \xe2\x80\xa600000BjReturns the maximum element in the vector.00000000BjReturns the minimum element in the vector.00000000BnReturns the sum of the elements of the vector.CgReturns the sum of the elements of the vector, with \xe2\x80\xa60100100CgReturns the cumulative bitwise \xe2\x80\x9cxor\xe2\x80\x9d across the \xe2\x80\xa600000DgThis operation satisfies <code>n % d == n - (n / d) * d</code>, and \xe2\x80\xa600000BgPerforms the <code>%=</code> operation.1111110CaCalculates the least nonnegative remainder of \xe2\x80\xa6000000CnCalculates the least remainder of <code>self (mod rhs)</code>.000010DmExperimental version of <code>rem_euclid</code> in <code>core</code>. See \xe2\x80\xa602222222221111121AkRemoves an empty directory.CkRemoves an environment variable from the environment of \xe2\x80\xa6CiRetains only the elements specified by the predicate, \xe2\x80\xa6CeRetains only the elements specified by the predicate.10CkReturns an iterator over mutable subslices separated by \xe2\x80\xa60ClMagic intrinsic that derives its meaning from attributes \xe2\x80\xa60CgSeeks to a given position and writes a number of bytes.DcSets the value of the <code>SO_LINGER</code> option on this socket.ChSupervisor memory management fence for given virtual \xe2\x80\xa60ClImplements the Sigma0 transformation function as used in \xe2\x80\xa60ClImplements the Sigma1 transformation function as used in \xe2\x80\xa60CnImplements the Sum0 transformation function as used in the \xe2\x80\xa60CnImplements the Sum1 transformation function as used in the \xe2\x80\xa603210DbOverrides the <code>dwShareMode</code> argument to the call to \xe2\x80\xa6BnPerforms the <code>&lt;&lt;=</code> operation.0BnPerforms the <code>&gt;&gt;=</code> operation.0CdDetermines if the <code>-</code> flag was specified.00AlSwaps bytes of each element.0BlRestrict each element to a certain interval.ClRestrict each element to a certain interval unless it is \xe2\x80\xa61010BjCounts the number of ones in each element.0Bj<code>T</code> must be a vector of floats.000CnRounds down each element to the next lowest integer-valued \xe2\x80\xa60BfTakes the square root of each element.0ClRounds each element to the closest integer-valued float. \xe2\x80\xa60CbReturns the integer part of each element as an \xe2\x80\xa60CmInvalidate supervisor translation cache for given virtual \xe2\x80\xa60DhSkips all bytes until the delimiter <code>byte</code> or EOF is reached.DcCreates an iterator that <code>skip</code>s elements based on a \xe2\x80\xa600CnReturns the span pointing to the closing delimiter of this \xe2\x80\xa6DfAdds a new child diagnostics message to <code>self</code> with the \xe2\x80\xa6ClReturns the last and all the rest of the elements of the \xe2\x80\xa60CjSplits the slice on the first element that matches the \xe2\x80\xa6CnSplits the string on the first occurrence of the specified \xe2\x80\xa610CkReturns an iterator over mutable subslices separated by \xe2\x80\xa60ChReturns the \xe2\x80\x9cpreferred\xe2\x80\x9d block size for efficient \xe2\x80\xa6CiSets the size of the stack (in bytes) for the new thread.CjGets a pinning mutable reference from a static mutable \xe2\x80\xa60DhGets a pinning reference from a <code>&amp;&#39;static</code> reference.0CiRun-time feature detection for the Rust standard library.BkReturns the length of this file (in bytes).BmReturns the length of this stream (in bytes).DiStrict absolute value. Computes <code>self.abs()</code>, panicking if \xe2\x80\xa600000000000DkStrict integer addition. Computes <code>self + rhs</code>, panicking if \xe2\x80\xa600000000000000000000000DkStrict integer division. Computes <code>self / rhs</code>, panicking if \xe2\x80\xa60000CjStrict integer division. Computes <code>self / rhs</code>.000010111110000010DdStrict integer multiplication. Computes <code>self * rhs</code>, \xe2\x80\xa600000000000000000000000EdStrict negation. Computes <code>-self</code>, panicking if <code>self == MIN</code>.0000EhStrict negation. Computes <code>-self</code>, panicking unless <code>self == 0</code>\xe2\x80\xa6000010111110000010DhStrict exponentiation. Computes <code>self.pow(exp)</code>, panicking if00000000000000000000000DhStrict integer remainder. Computes <code>self % rhs</code>, panicking if0000CkStrict integer remainder. Computes <code>self % rhs</code>.000010111110000010EmStrict shift left. Computes <code>self &lt;&lt; rhs</code>, panicking if <code>rhs</code> \xe2\x80\xa600000000000000000000000EnStrict shift right. Computes <code>self &gt;&gt; rhs</code>, panicking <code>rhs</code> is \xe2\x80\xa600000000000000000000000DkStrict integer subtraction. Computes <code>self - rhs</code>, panicking \xe2\x80\xa600000000000000000000000BgPerforms the <code>-=</code> operation.0CmCreates an iterator which, starting from an initial item, \xe2\x80\xa60BgReverses the byte order of the integer.00000000000BhReverses the byte order of each element.01111111111111111111111111111111111111111111111110000111111111111111111111111111111111111DbGets the value of the <code>SO_ERROR</code> option on this socket.00CfReturns the value of the <code>SO_ERROR</code> option.00CgCreates an iterator that yields elements based on a \xe2\x80\xa600AnCreates a bitmask from a mask.0AlConverts radians to degrees.000BnConverts each element from radians to degrees.111100AlConverts degrees to radians.000BnConverts each element from degrees to radians.111100ChReturns a byte slice with leading and trailing ASCII \xe2\x80\xa6CjReturns a string slice with leading and trailing ASCII \xe2\x80\xa610ChReturns a string slice with trailing whitespace removed.0CgReturns a string slice with leading whitespace removed.0CnImmutably borrows the wrapped value, returning an error if \xe2\x80\xa60DgReturns <code>Ok(true)</code> if the path points at an existing entity.CnTries to insert a key-value pair into the map, and returns \xe2\x80\xa6DjInitializes the contents of the cell to <code>value</code> if the cell \xe2\x80\xa60011DlConstructs a new <code>Arc&lt;T, A&gt;</code> in the provided allocator, \xe2\x80\xa6DkAllocates memory in the given allocator then places <code>x</code> into \xe2\x80\xa6DhConstructs a new <code>Rc&lt;T&gt;</code> in the provided allocator, \xe2\x80\xa6210EgConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator, \xe2\x80\xa60CfReduces the elements to a single one by repeatedly \xe2\x80\xa600DkReturns the inner value, if the <code>Arc</code> has exactly one strong \xe2\x80\xa6DjReturns the inner value, if the <code>Rc</code> has exactly one strong \xe2\x80\xa610ChFetches the value, and applies a function to it that \xe2\x80\xa6000000000000000000000000000DbTests (at compile-time) if two <code>crate::any::TypeId</code> \xe2\x80\xa60AkLane-wise rounding average.00000DkARM-specific vector of two packed <code>u16</code> packed into a 32-bit \xe2\x80\xa6D`Arm-specific 64-bit wide vector of four packed <code>u16</code>.0DbArm-specific 128-bit wide vector of eight packed <code>u16</code>.0CoArm-specific 64-bit wide vector of two packed <code>u32</code>.0DaArm-specific 128-bit wide vector of four packed <code>u32</code>.0CoArm-specific 64-bit wide vector of one packed <code>u64</code>.0D`Arm-specific 128-bit wide vector of two packed <code>u64</code>.0DcArm-specific 128-bit wide vector of sixteen packed <code>u8</code>.0EdReturns the contained <code>Err</code> value, consuming the <code>self</code> value.0CkAccess the underlying UTF-8 error that was the cause of \xe2\x80\xa6DkFetch a <code>Utf8Error</code> to get more details about the conversion \xe2\x80\xa610ClStores a <code>v128</code> vector to the given heap address.00C`Add returning High Narrow. Arm\xe2\x80\x99s documentation00000000000CcSigned Add Long across Vector Arm\xe2\x80\x99s documentation0CeUnsigned Add Long across Vector Arm\xe2\x80\x99s documentation010BjBitwise exclusive OR Arm\xe2\x80\x99s documentation0CfFloating-point add across vector Arm\xe2\x80\x99s documentation0BgAdd across vector Arm\xe2\x80\x99s documentation00000BfAES mix columns. Arm\xe2\x80\x99s documentation0CeAdds the value part of a new entry to the map output.00CjGets a mutable iterator over the values of the map, in \xe2\x80\xa6CkAn iterator visiting all values mutably in arbitrary order.1ChMulti-vector floating-point absolute maximum Arm\xe2\x80\x99s \xe2\x80\xa60ChMulti-vector floating-point absolute minimum Arm\xe2\x80\x99s \xe2\x80\xa60C`Bit clear and exclusive OR Arm\xe2\x80\x99s documentation00000ClFloating-point absolute compare greater than or equal Arm\xe2\x80\xa60000000ChFloating-point absolute compare greater than Arm\xe2\x80\x99s \xe2\x80\xa60000000CnFloating-point absolute compare less than or equal Arm\xe2\x80\x99s \xe2\x80\xa60000000CeFloating-point absolute compare less than Arm\xe2\x80\x99s \xe2\x80\xa60000000ChFloating-point compare bitwise equal to zero Arm\xe2\x80\x99s \xe2\x80\xa6CcCompare bitwise equal to zero Arm\xe2\x80\x99s documentation01111CjSigned compare bitwise equal to zero Arm\xe2\x80\x99s documentation000CbUnsigned compare bitwise equal to zero Arm\xe2\x80\x99s \xe2\x80\xa6003CnFloating-point compare greater than or equal to zero Arm\xe2\x80\x99\xe2\x80\xa6ChCompare signed greater than or equal to zero Arm\xe2\x80\x99s \xe2\x80\xa6111110001CdFloating-point compare greater than zero Arm\xe2\x80\x99s \xe2\x80\xa6CfCompare signed greater than zero Arm\xe2\x80\x99s documentation111110001CmFloating-point compare less than or equal to zero Arm\xe2\x80\x99s \xe2\x80\xa6ChCompare less than or equal to zero Arm\xe2\x80\x99s documentation11111CeCompare signed less than or equal to zero Arm\xe2\x80\x99s \xe2\x80\xa6002CkFloating-point compare less than zero Arm\xe2\x80\x99s documentationBlCompare less than zero Arm\xe2\x80\x99s documentation1CfFloating-point compare less than Arm\xe2\x80\x99s documentation022CcCompare signed less than zero Arm\xe2\x80\x99s documentation003CfFloating-point complex multiply accumulate Arm\xe2\x80\x99s \xe2\x80\xa600CmInsert vector element from another vector element Arm\xe2\x80\x99s \xe2\x80\xa600000CmCreate a new vector with all lanes set to a value Arm\xe2\x80\x99s \xe2\x80\xa60ChDuplicate vector element to vector or scalar Arm\xe2\x80\x99s \xe2\x80\xa60BlDuplicate vector element to vector or scalar110111111111111111111AiVector All Elements Equal0AbAll Elements EqualBdVector All Elements Greater or Equal0BbAll Elements Greater Than or EqualB`Vector All Elements Greater Than0AiAll Elements Greater ThanmVector All In0BfVector All Elements Less Than or Equal0AoAll Elements Less Than or EqualAmVector All Elements Less Than0AfAll Elements Less ThanAmVector All Elements Not Equal0AfAll Elements Not Equal<<AaAny Element EqualBcVector Any Element Greater or Equal0BbAny Elements Greater Than or EqualAoVector Any Element Greater Than0AiAny Elements Greater ThanBeVector Any Element Less Than or Equal0AoAny Elements Less Than or EqualAlVector Any Element Less Than0AfAny Elements Less ThanAmVector Any Elements Not Equal0AeAny Element Not EqualAlVector Compare Not in RangesBgVector Convert from long long to doubleCcVector Convert from double to float (even elements)B`Vector Galois Field Multiply SummVector Insert00AaVector Merge Even0AaVector Merge High00A`Vector Merge Low00A`Vector Merge Odd0BmMove From Vector Status and Control Register.0BgVector Multiply Round and Add Saturated0AnVector Pack Saturated Unsigned00AgVector Population CountAgVector Round to CurrentBeVector Round toward Negative InfinityBeVector Round toward Positive InfinityAhVector Round toward ZeroBgVector Convert floating point to signednVector splats.0mVector SplatsAgVector Load with LengthBlThree-way exclusive OR Arm\xe2\x80\x99s documentation00000ClFloating-point fused Multiply-Subtract from accumulator. \xe2\x80\xa6ClFloating-point fused Multiply-Add to accumulator(vector) \xe2\x80\xa6001BmFloating-point fused Multiply-subtract to \xe2\x80\xa600BaHalving add Arm\xe2\x80\x99s documentation0000000BmSigned halving subtract Arm\xe2\x80\x99s documentation0000000ChLoad multiple single-element structures to one, two, \xe2\x80\xa600000000000000000CiStore SIMD&amp;FP register (immediate offset) Arm\xe2\x80\x99s \xe2\x80\xa60CbFloating-point Maximum Number (vector) Arm\xe2\x80\x99s \xe2\x80\xa60000CgFloating-point maximum number across vector Arm\xe2\x80\x99s \xe2\x80\xa6BlHorizontal vector max. Arm\xe2\x80\x99s documentation00000CbFloating-point Minimum Number (vector) Arm\xe2\x80\x99s \xe2\x80\xa60000CgFloating-point minimum number across vector Arm\xe2\x80\x99s \xe2\x80\xa6BlHorizontal vector min. Arm\xe2\x80\x99s documentation00000CbVector multiply accumulate with scalar Arm\xe2\x80\x99s \xe2\x80\xa6000000000CjVector multiply subtract with scalar Arm\xe2\x80\x99s documentation000000000Cd8-bit integer matrix multiply-accumulate Arm\xe2\x80\x99s \xe2\x80\xa6000CaDuplicate element to vector Arm\xe2\x80\x99s documentation0ChDuplicate vector element to vector or scalar Arm\xe2\x80\x99s \xe2\x80\xa60BlDuplicate vector element to vector or scalar110111111111111111111BoVector multiply by scalar Arm\xe2\x80\x99s documentation000000000000CfFloating-point multiply extended Arm\xe2\x80\x99s documentation00000CdSigned Add and Accumulate Long Pairwise. Arm\xe2\x80\x99s \xe2\x80\xa6000CfUnsigned Add and Accumulate Long Pairwise. Arm\xe2\x80\x99s \xe2\x80\xa60001100CaFloating-point add pairwise Arm\xe2\x80\x99s documentationBbAdd pairwise Arm\xe2\x80\x99s documentation0333322223322111BbAdd Pairwise Arm\xe2\x80\x99s documentation0000022CgFolding maximum of adjacent pairs Arm\xe2\x80\x99s documentation00000CeFloating-point maximum pairwise Arm\xe2\x80\x99s documentation4CgFolding minimum of adjacent pairs Arm\xe2\x80\x99s documentation00000CeFloating-point minimum pairwise Arm\xe2\x80\x99s documentationCfSigned saturating absolute value Arm\xe2\x80\x99s documentation0CfSigned saturating Absolute value Arm\xe2\x80\x99s documentation00001BdSaturating add Arm\xe2\x80\x99s documentation00000000000000000CfSigned saturating extract narrow Arm\xe2\x80\x99s documentation00000ChUnsigned saturating extract narrow Arm\xe2\x80\x99s documentation00000BnSigned saturating negate Arm\xe2\x80\x99s documentation0000000CkSigned saturating rounding shift left Arm\xe2\x80\x99s documentation00000CjUnsigned signed saturating rounding shift left Arm\xe2\x80\x99s \xe2\x80\xa600000101100CbSigned saturating shift left Arm\xe2\x80\x99s documentation0CdUnsigned saturating shift left Arm\xe2\x80\x99s documentation0101011111100000010BiSaturating subtract Arm\xe2\x80\x99s documentation00000000000000000BcTable look-up Arm\xe2\x80\x99s documentation00000000000BlExtended table look-up Arm\xe2\x80\x99s documentation00000000000BmRotate and exclusive OR Arm\xe2\x80\x99s documentationBjReciprocal estimate. Arm\xe2\x80\x99s documentation0000CbUnsigned reciprocal estimate Arm\xe2\x80\x99s documentation0CdFloating-point reciprocal step Arm\xe2\x80\x99s documentation0000CgReversing vector elements (swap endianness) Arm\xe2\x80\x99s \xe2\x80\xa600000000000000000CbReverse elements in 64-bit doublewords Arm\xe2\x80\x99s \xe2\x80\xa60111111111111111111BjRounding halving add Arm\xe2\x80\x99s documentation00000000000CmFloating-point round to integral, to nearest with ties to \xe2\x80\xa6000ClFloating-point round to integral, using current rounding \xe2\x80\xa6000CnFloating-point round to integral, toward minus infinity Arm\xe2\x80\xa60000222222CmFloating-point round to integral, toward plus infinity Arm\xe2\x80\xa60002CiFloating-point round to integral exact, using current \xe2\x80\xa600C`Signed rounding shift left Arm\xe2\x80\x99s documentationCbUnsigned rounding shift left Arm\xe2\x80\x99s documentation111111000000CaSigned rounding shift right Arm\xe2\x80\x99s documentation0CcUnsigned rounding shift right Arm\xe2\x80\x99s documentation0CfSigned rounding shift right and accumulate Arm\xe2\x80\x99s \xe2\x80\xa60ChUnsigned rounding shift right and accumulate Arm\xe2\x80\x99s \xe2\x80\xa60BhSHA1 fixed rotate. Arm\xe2\x80\x99s documentation0B`Shift left Arm\xe2\x80\x99s documentation00000000000BlSigned shift left long Arm\xe2\x80\x99s documentation0001111BaShift right Arm\xe2\x80\x99s documentation000000000000000CgShift Left and Insert (immediate) Arm\xe2\x80\x99s documentation0000000000B`SM4 encode Arm\xe2\x80\x99s documentationCkUnsigned saturating Accumulate of Signed value. Arm\xe2\x80\x99s \xe2\x80\xa600CjUnsigned saturating accumulate of signed value Arm\xe2\x80\x99s \xe2\x80\xa61ClFloating-point round to integral, using current rounding \xe2\x80\xa6CdCalculates the square root of each lane. Arm\xe2\x80\x99s \xe2\x80\xa600CgSigned shift right and accumulate Arm\xe2\x80\x99s documentation00000CiUnsigned shift right and accumulate Arm\xe2\x80\x99s documentation000001100ChShift Right and Insert (immediate) Arm\xe2\x80\x99s documentation0000000000CiStore multiple single-element structures to one, two, \xe2\x80\xa600000CkStore multiple single-element structures from one, two, \xe2\x80\xa600000111111CiStore SIMD&amp;FP register (immediate offset) Arm\xe2\x80\x99s \xe2\x80\xa60CdSubtract returning high narrow Arm\xe2\x80\x99s documentation00000000000BgTranspose vectors Arm\xe2\x80\x99s documentation000000000000000000000CkSigned saturating Accumulate of Unsigned value. Arm\xe2\x80\x99s \xe2\x80\xa600CjSigned saturating accumulate of unsigned value Arm\xe2\x80\x99s \xe2\x80\xa61CmDot product vector form with unsigned and signed integers \xe2\x80\xa60BcUnzip vectors Arm\xe2\x80\x99s documentation000000000000000000000BaZip vectors Arm\xe2\x80\x99s documentation000000000000000000000CfBlocks the current thread until initialization has \xe2\x80\xa6CjBlocks the current thread until the provided condition \xe2\x80\xa60DaGets the number of <code>Weak</code> pointers to this allocation.DeGets an approximation of the number of <code>Weak</code> pointers \xe2\x80\xa61DbGets the number of <code>Weak</code> pointers pointing to this \xe2\x80\xa62120DfWrites a <code>char</code> into this writer, returning whether the \xe2\x80\xa600CcWrites a single <code>i128</code> into this hasher.0ClFills a slice with elements yielded by an iterator until \xe2\x80\xa60CcWrites a single <code>u128</code> into this hasher.0CmFills a slice with elements returned by calling a closure \xe2\x80\xa60CeAn error returned by <code>LocalKey::try_with</code>.fU+00060DcAn iterator over <code>N</code> elements of the iterator at a time.0AeExtracts raw handles.AeExtracts raw sockets.ChAn async-aware version of the <code>FnOnce</code> trait.0B`Temporary implementation detail.0CkAn integer type which can be safely shared between threads.000CfThe number of bytes in a bitmask with this many lanes.0CcThe bitwise OR assignment operator <code>|=</code>.0CfAn error returned by <code>RefCell::try_borrow</code>.0ClA borrowed byte buffer which is incrementally filled and \xe2\x80\xa60CfA trait for creating instances of <code>Hasher</code>.0DhAn iterator over the <code>char</code>s of a string slice, and their \xe2\x80\xa600AlType returned by char types.00BgA handle to a child process\xe2\x80\x99s stderr.CiA handle to a child process\xe2\x80\x99s standard output (stdout).CiAn iterator over a slice in (non-overlapping) chunks (\xe2\x80\xa600BoWhether should console output be colored or notBgAn iterator over the command arguments.CcAn iterator over the command environment variables.CmUsed to tell an operation whether it should exit early or \xe2\x80\xa60BmResult of the <code>cpuid</code> instruction.0CnA struct to help with <code>fmt::Debug</code> implementations.00ClAn iterator that decodes UTF-16 encoded code points from \xe2\x80\xa60CnUnix-specific extension methods for <code>fs::DirEntry</code>.CnWASI-specific extension methods for <code>fs::DirEntry</code>.DcA draining iterator over the elements of a <code>BinaryHeap</code>.0DfThe metadata for a <code>Dyn = dyn SomeTrait</code> trait object type.0DbAn iterator of <code>u16</code> over the string encoded as UTF-16.00fU+00190CeAn iterator over the escaped version of a byte slice.00CbThe return type of <code>str::escape_debug</code>.DgAn iterator that yields the literal escape code of a <code>char</code>.101CkErrors and warnings that can occur during string, char, \xe2\x80\xa6CnWindows-specific extensions to <code>process::ExitCode</code>.CjError returned from <code>TokenStream::expand_expr</code>.CgUnix-specific extensions for <code>fs::FileType</code>.CiWindows-specific extensions to <code>fs::FileType</code>.CgWASI-specific extensions for <code>fs::FileType</code>.CmA memory allocator that can be registered as the standard \xe2\x80\xa600fU+00600fU+002D0CgData provided contains an interior nul byte at byte \xe2\x80\xa6000AoThis operation was interrupted.CkAn iterator adapter that places a separator between all \xe2\x80\xa60CbData not valid for the operation were encountered.DiThe <code>LayoutError</code> is returned when the parameters given to \xe2\x80\xa600B`The duration of one microsecond.0B`The duration of one millisecond.0ChMarker trait for types that may be used as SIMD mask \xe2\x80\xa60DfA wrapper type to construct uninitialized instances of <code>T</code>.0CfUnix-specific extensions to <code>fs::Metadata</code>.CiWindows-specific extensions to <code>fs::Metadata</code>.CdOS-specific extensions to <code>fs::Metadata</code>.CfWASI-specific extensions to <code>fs::Metadata</code>.1CeInteger is too small to store in target integer type.0BbThe system\xe2\x80\x99s networking is down.CeAn <code>i128</code> that is known not to equal zero.0CdA <code>u128</code> that is known not to equal zero.0AhSeek on unseekable file.CjOptions and flags which can be used to configure how a \xe2\x80\xa6CfPlatform-specific extensions to <code>OsString</code>.CeWindows-specific extensions to <code>OsString</code>.1CmAn operation could not be completed, because it failed to \xe2\x80\xa6A`An owned handle.A`An owned socket.Ad<code>( ... )</code>fU+00250CdRepresentation of the various permissions on a file.CkZero-sized type used to mark things that \xe2\x80\x9cact like\xe2\x80\x9d \xe2\x80\xa60ClA type of error which can be returned whenever a lock is \xe2\x80\xa60CeInteger is too large to store in target integer type.0Dm<code>RandomState</code> is the default state for <code>HashMap</code> types.0Df<code>RangeBounds</code> is implemented by Rust\xe2\x80\x99s built-in range \xe2\x80\xa6000BhWhether test is expected to panic or not0CjMarker trait for types that may be used as SIMD vector \xe2\x80\xa60fU+00020CiThe underlying storage (typically, a filesystem) is full.EeAssociated type for <code>&lt;&amp;str as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.00BoA TCP socket server, listening for connections.DkA trait for implementing arbitrary return types in the <code>main</code>\xe2\x80\xa6ClReturns an iterator that yields the lowercase equivalent \xe2\x80\xa60ClReturns an iterator that yields the uppercase equivalent \xe2\x80\xa60CiThe main type provided by this crate, representing an \xe2\x80\xa6ChA type that upholds all invariants of <code>Step</code>.0ChAn IPv4 address representing an unspecified address: \xe2\x80\xa6DfAn IPv6 address representing the unspecified address: <code>::</code>.10ClCapturing a backtrace is not supported, likely because it\xe2\x80\xa6BoThis operation is unsupported on this platform.DjResult of calling <code>Pattern::as_utf8_pattern()</code>. Can be used \xe2\x80\xa600DhA view into a vacant entry in a <code>BTreeMap</code>. It is part of \xe2\x80\xa6DhA view into a vacant entry in a <code>BTreeSet</code>. It is part of \xe2\x80\xa6DkA view into a vacant entry in a <code>HashMap</code>. It is part of the \xe2\x80\xa621DkA view into a vacant entry in a <code>HashSet</code>. It is part of the \xe2\x80\xa6GgVerbatim prefix using Windows\xe2\x80\x99 <em><strong>U</strong>niform <strong>N</strong>aming <strong>C</strong>onvention</em>,BbNot-equal (ordered, non-signaling)0AnNot-equal (ordered, signaling)0BdNot-equal (unordered, non-signaling)0B`Not-equal (unordered, signaling)0CdNot-greater-than-or-equal (unordered, non-signaling)0C`Not-greater-than-or-equal (unordered, signaling)0BkNot-greater-than (unordered, non-signaling)0BgNot-greater-than (unordered, signaling)0CaNot-less-than-or-equal (unordered, non-signaling)0BmNot-less-than-or-equal (unordered, signaling)0BhNot-less-than (unordered, non-signaling)0BdNot-less-than (unordered, signaling)0AnSee <code>_mm_prefetch</code>.00000CkA utility function for creating masks to use with Intel \xe2\x80\xa60EdExtracts bits of <code>a</code> specified by <code>control</code> into the least \xe2\x80\xa600000DhSets the least significant zero bit of <code>x</code> and clears all \xe2\x80\xa600AoGets mask up to lowest set bit.00Ajx-th block-grid dimension.Ajy-th block-grid dimension.Ajz-th block-grid dimension.CeAdd 8-bit masks a and b, and store the result in dst.0ClBitwise AND of 8-bit masks a and b, and store the result \xe2\x80\xa60CiBitwise NOT of 8-bit mask a, and store the result in dst.0CmCompute the bitwise OR of 16-bit masks a and b, and store \xe2\x80\xa60CmCompute the bitwise OR of 32-bit masks a and b, and store \xe2\x80\xa60CmCompute the bitwise OR of 64-bit masks a and b, and store \xe2\x80\xa60ClBitwise XOR of 8-bit masks a and b, and store the result \xe2\x80\xa60AkLoad 8-bit mask from memory0CnCompute the bitwise AND of 16-bit masks a and b, and store \xe2\x80\xa60AhCopy 16-bit mask a to k.0CkCompute the bitwise NOT of 16-bit mask a, and store the \xe2\x80\xa60CnCompute the bitwise XOR of 16-bit masks a and b, and store \xe2\x80\xa60CmRound the packed double-precision (64-bit) floating-point \xe2\x80\xa60CmRound the packed single-precision (32-bit) floating-point \xe2\x80\xa60ClRound the lower double-precision (64-bit) floating-point \xe2\x80\xa60ClRound the lower single-precision (32-bit) floating-point \xe2\x80\xa60DgInvalidates and flushes the cache line that contains <code>p</code> \xe2\x80\xa60ClCompare the lower half-precision (16-bit) floating-point \xe2\x80\xa60CiCopy the lower half-precision (16-bit) floating-point \xe2\x80\xa60ChHorizontally adds adjacent pairs of double-precision \xe2\x80\xa60ChHorizontally adds adjacent pairs of single-precision \xe2\x80\xa60ClHorizontally subtract adjacent pairs of double-precision \xe2\x80\xa6011CiLoads 128-bits (composed of 2 packed double-precision \xe2\x80\xa60CfLoad 128-bits (composed of 8 packed half-precision \xe2\x80\xa60EoLoads four <code>f32</code> values from <em>aligned</em> memory into a <code>__m128</code>. \xe2\x80\xa60ClLoads a 64-bit double-precision value to the low element \xe2\x80\xa60CnLoad a half-precision (16-bit) floating-point element from \xe2\x80\xa60EhConstruct a <code>__m128</code> with the lowest element read from <code>p</code> and \xe2\x80\xa60DjConstructs a 128-bit floating-point vector of <code>[2 x double]</code>\xe2\x80\xa60CiMove the lower half-precision (16-bit) floating-point \xe2\x80\xa60EfReturns a <code>__m128</code> with the first component from <code>b</code> and the \xe2\x80\xa60CmMultiply packed complex numbers in a and b, and store the \xe2\x80\xa60ClMultiply the lower complex numbers in a and b, and store \xe2\x80\xa60CmBroadcasts double-precision (64-bit) floating-point value \xe2\x80\xa60CnBroadcast the half-precision (16-bit) floating-point value \xe2\x80\xa60DgConstruct a <code>__m128</code> with all element set to <code>a</code>.022BbAlias for <code>_mm_set1_ps</code>0ChSets packed double-precision (64-bit) floating-point \xe2\x80\xa60CnSet packed half-precision (16-bit) floating-point elements \xe2\x80\xa60DjConstruct a <code>__m128</code> from four floating point values lowest \xe2\x80\xa60ClReturns a new vector with the square root of each of the \xe2\x80\xa60CmCompute the square root of packed half-precision (16-bit) \xe2\x80\xa60CfReturns the square root of packed single-precision \xe2\x80\xa60DkReturns a new vector with the low element of <code>a</code> replaced by \xe2\x80\xa60CgCompute the square root of the lower half-precision \xe2\x80\xa60CiReturns the square root of the first single-precision \xe2\x80\xa60DjClears all bits below the least significant zero of <code>x</code> and \xe2\x80\xa600CmLoad tile rows from memory specifieid by base address and \xe2\x80\xa6ClPerforms a full or partial save of the enabled processor \xe2\x80\xa6DfOverrides the <code>dwDesiredAccess</code> argument to the call to \xe2\x80\xa6DjCreates a <code>mut</code> raw pointer to a place, without creating an \xe2\x80\xa60DiReturns a <code>NonNull</code> pointer to the vector\xe2\x80\x99s buffer, or a \xe2\x80\xa60DiReturns the contents of this address if it is a <code>pathname</code> \xe2\x80\xa6DhGain a reference to the underlying <code>stat</code> structure which \xe2\x80\xa60DiReturns the number of seconds contained by this <code>Duration</code> \xe2\x80\xa6000CmSplits a mutable slice into a mutable prefix, a middle of \xe2\x80\xa60BhConverts to <code>Arc&lt;[T]&gt;</code>.BfConverts to <code>Arc&lt;T&gt;</code>.BiConverts to <code>Box&lt;T, A&gt;</code>.BkConverts to <code>Box&lt;[T], A&gt;</code>.BeConverts to <code>Rc&lt;T&gt;</code>.BgConverts to <code>Rc&lt;[T]&gt;</code>.EaExtracts the value from the <code>MaybeUninit&lt;T&gt;</code> container. This \xe2\x80\xa66504321DkWhen <code>process::Command</code> creates pipes, request that our side \xe2\x80\xa6DeLoads the current value of the pointer. <code>T</code> must be an \xe2\x80\xa60CfBitwise nand with the current value, returning the \xe2\x80\xa60CdMaximum with the current value using an unsigned \xe2\x80\xa60CdMinimum with the current value using an unsigned \xe2\x80\xa60DkAdds to the current value, returning the previous value. <code>T</code> \xe2\x80\xa60CfStores the value at the specified memory location, \xe2\x80\xa60CkSubtract from the current value, returning the previous \xe2\x80\xa60DcSchedules a closure to be run just before the <code>exec</code> \xe2\x80\xa6C`A priority queue implemented with a binary heap.0FcConverts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if \xe2\x80\xa60BkAdds a signed offset in bytes to a pointer.0BnCalculates the offset from a pointer in bytes.110AdByte string literal.EcEquivalent to C\xe2\x80\x99s <code>ptrdiff_t</code> type, from <code>stddef.h</code> (or \xe2\x80\xa60CiEquivalent to C\xe2\x80\x99s <code>unsigned long long</code> type.00DjReturns the bit pattern of <code>self</code> reinterpreted as a signed \xe2\x80\xa600000000000000000000000CeCasts from a type to its maybe-uninitialized version.00000DcReturns the value of the <code>ChangeTime</code> fields of this \xe2\x80\xa6EhChecked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>\xe2\x80\xa600000CkChecked absolute value. Checks for overflow and returns \xe2\x80\xa600000111111000000DiChecked integer addition. Computes <code>self + rhs</code>, returning \xe2\x80\xa600000000000ClAdds an unsigned integer to a non-zero value. Checks for \xe2\x80\xa600000DoChecked <code>Duration</code> addition. Computes <code>self + other</code>, \xe2\x80\xa6222222222222111111G`Returns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> \xe2\x80\xa601DiChecked integer division. Computes <code>self / rhs</code>, returning \xe2\x80\xa600000000000DoChecked <code>Duration</code> division. Computes <code>self / other</code>, \xe2\x80\xa61111111111110DeChecked integer multiplication. Computes <code>self * rhs</code>, \xe2\x80\xa600000000000CiMultiplies two non-zero integers together. Checks for \xe2\x80\xa600000000000EeChecked <code>Duration</code> multiplication. Computes <code>self * other</code>, \xe2\x80\xa62222222222221111111111110EaChecked negation. Computes <code>-self</code>, returning <code>None</code> if \xe2\x80\xa60000EeChecked negation. Computes <code>-self</code>, returning <code>None</code> unless \xe2\x80\xa6000010111111111110000010111111DjChecked exponentiation. Computes <code>self.pow(exp)</code>, returning \xe2\x80\xa600000000000CiRaises non-zero value to an integer power. Checks for \xe2\x80\xa600000000000111111111111000000000000DjChecked integer remainder. Computes <code>self % rhs</code>, returning \xe2\x80\xa600000000000000000000000ElChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> \xe2\x80\xa600000000000000000000000EmChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> \xe2\x80\xa600000000000000000000000DbChecked integer subtraction. Computes <code>self - rhs</code>, \xe2\x80\xa60000DhChecked integer subtraction. Computes <code>self - rhs</code>, returning000010EbChecked <code>Duration</code> subtraction. Computes <code>self - other</code>, \xe2\x80\xa6222221111121G`Returns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> \xe2\x80\xa601AaCollection types.0ClCreates a new I/O error from a known kind of error and a \xe2\x80\xa6FeConverts the <code>ControlFlow</code> into an <code>Result</code> which is <code>Ok</code> if the \xe2\x80\xa60CnCopies elements from one part of the slice to another part \xe2\x80\xa60EbCopies the sign from <code>y</code> to <code>x</code> for <code>f16</code> values.0EbCopies the sign from <code>y</code> to <code>x</code> for <code>f32</code> values.0EbCopies the sign from <code>y</code> to <code>x</code> for <code>f64</code> values.0CnIf the process was terminated by a signal, says whether it \xe2\x80\xa6EfReturns the length of <code>self</code>. Like C\xe2\x80\x99s <code>strlen</code>, this does \xe2\x80\xa60ClReturns the number of zeros in the binary representation \xe2\x80\xa600000000000000000000000000000000000000000000000000000000000000000000000000000D`Returns the current working directory as a <code>PathBuf</code>.CaSets the working directory for the child process.CkReturns the full filesystem path of the current running \xe2\x80\xa6BfProvides a cursor at the back element.0DeCreates a <code>DebugTuple</code> builder designed to assist with \xe2\x80\xa600CjEncodes this character as UTF-8 into the provided byte \xe2\x80\xa60DhRe-encodes an <code>OsStr</code> as a wide character sequence, i.e., \xe2\x80\xa6BdInitializes all bytes in the cursor.0DiParses this <code>TokenStream</code> as an expression and attempts to \xe2\x80\xa6DjGenerates the <code>f32.nearest</code> instruction, roundinging to the \xe2\x80\xa600ChLane-wise rounding to the nearest integral value not \xe2\x80\xa600BfCreates a vector with identical lanes.00CmLane-wise rounding to the nearest integral value with the \xe2\x80\xa600DjGenerates the <code>f64.nearest</code> instruction, roundinging to the \xe2\x80\xa600333222111CcExtracts the prefix of <code>self.file_name</code>.DgReturns an array reference to the first <code>N</code> items in the \xe2\x80\xa60CcReturns the first entry in the map for in-place \xe2\x80\xa60D`Arm-specific 64-bit wide vector of four packed <code>f16</code>.0DbArm-specific 128-bit wide vector of eight packed <code>f16</code>.0CoArm-specific 64-bit wide vector of two packed <code>f32</code>.0DaArm-specific 128-bit wide vector of four packed <code>f32</code>.0CoARM-specific 64-bit wide vector of one packed <code>f64</code>.D`ARM-specific 128-bit wide vector of two packed <code>f64</code>.EfReturns <code>a * b + c</code> for <code>f128</code> values, non-deterministically \xe2\x80\xa60CiConstructs parameters for the other string-formatting \xe2\x80\xa60CgAllows users to write an integer (in signed decimal \xe2\x80\xa600000000000000000000000DdCreates a new <code>Duration</code> from the specified number of \xe2\x80\xa6000D`Creates an <code>Ipv4Addr</code> from a four element byte array.DcCreates an <code>Ipv6Addr</code> from a sixteen element byte array.10CfConstructs the type from its <code>Output</code> type.0DjConstructs a new instance of <code>Self</code> from the given raw file \xe2\x80\xa60CnConstructs an <code>Arc&lt;T, A&gt;</code> from a raw pointer.DkConverts a raw pointer previously created by <code>into_raw</code> back \xe2\x80\xa6CkConstructs a box from a raw pointer in the given allocator.E`Constructs an <code>Rc&lt;T, A&gt;</code> from a raw pointer in the provided \xe2\x80\xa6232102DiGets the contents of the cell, initializing it to <code>f()</code> if \xe2\x80\xa600CeGets pinned exclusive access to the underlying value.0CeReturns the path to the program that was given to \xe2\x80\xa6DjBehaves like <code>grow</code>, but also ensures that the new contents \xe2\x80\xa600CiHypervisor memory management fence for guest physical \xe2\x80\xa60CnHypervisor memory management fence for given guest virtual \xe2\x80\xa60DiReturns the index of the highest bit set to one in <code>self</code>, \xe2\x80\xa600000000000DeReturns the index of the highest bit set to one in <code>self</code>.00000000000111111111111000000000000CnInvalidate hypervisor translation cache for guest physical \xe2\x80\xa60CkInvalidate hypervisor translation cache for given guest \xe2\x80\xa60BfCreates a vector with identical lanes.00000000CmCreates a new suffixed integer literal with the specified \xe2\x80\xa6111BjIncludes a UTF-8 encoded file as a string.0ClCalls a function with a reference to the contained value \xe2\x80\xa60D`Arm-specific type containing two <code>int16x4_t</code> vectors.0DbArm-specific type containing three <code>int16x4_t</code> vectors.0DaArm-specific type containing four <code>int16x4_t</code> vectors.0D`Arm-specific type containing two <code>int16x8_t</code> vectors.0DbArm-specific type containing three <code>int16x8_t</code> vectors.0DaArm-specific type containing four <code>int16x8_t</code> vectors.0D`Arm-specific type containing two <code>int32x2_t</code> vectors.0DbArm-specific type containing three <code>int32x2_t</code> vectors.0DaArm-specific type containing four <code>int32x2_t</code> vectors.0D`Arm-specific type containing two <code>int32x4_t</code> vectors.0DbArm-specific type containing three <code>int32x4_t</code> vectors.0DaArm-specific type containing four <code>int32x4_t</code> vectors.0D`Arm-specific type containing two <code>int64x1_t</code> vectors.0DbArm-specific type containing three <code>int64x1_t</code> vectors.0DaArm-specific type containing four <code>int64x1_t</code> vectors.0D`Arm-specific type containing two <code>int64x2_t</code> vectors.0DbArm-specific type containing three <code>int64x2_t</code> vectors.0DaArm-specific type containing four <code>int64x2_t</code> vectors.0D`Arm-specific type containing two <code>int8x16_t</code> vectors.0DbArm-specific type containing three <code>int8x16_t</code> vectors.0DaArm-specific type containing four <code>int8x16_t</code> vectors.0DhCreates a new iterator which places a copy of <code>separator</code> \xe2\x80\xa600CmConvert this range into the start and end bounds. Returns \xe2\x80\xa6000EhGroups every <code>N</code> elements in the <code>Vec&lt;T&gt;</code> into chunks to \xe2\x80\xa60CkReturns a shared reference to the filled portion of the \xe2\x80\xa60AnCreates a future from a value.0CkConsumes this object, returning the raw underlying file \xe2\x80\xa6CkViews the underlying data as a pair of subslices of the \xe2\x80\xa60DnConverts an <code>ExitStatusError</code> (back) to an <code>ExitStatus</code>.EeConverts the <code>CString</code> into a <code>String</code> if it contains valid \xe2\x80\xa6DdConsumes the <code>IntoChars</code>, returning the remaining string.EhConverts a <code>Box&lt;str&gt;</code> into a <code>String</code> without copying or \xe2\x80\xa62EfConverts the <code>OsString</code> into a <code>String</code> if it contains valid \xe2\x80\xa62ClCreates a consuming iterator visiting all the values, in \xe2\x80\xa6CkCreates a consuming iterator visiting all the values in \xe2\x80\xa61EbReturns <code>true</code> if the <code>Path</code> is absolute, i.e., if it is \xe2\x80\xa6DkReturns true if the data is borrowed, i.e. if <code>to_mut</code> would \xe2\x80\xa60DeReturns <code>true</code> if this is a <code>Continue</code> variant.0FeReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. \xe2\x80\xa600ClChecks if the associated thread has finished running its \xe2\x80\xa60BkChecks if the value is a hexadecimal digit:0DcReturns <code>true</code> if this value is positive infinity or \xe2\x80\xa6000CjReturns true for each element if its value is positive \xe2\x80\xa6111100ChReturns <code>true</code> if this is a loopback address.EcReturns <code>true</code> if this is a loopback address (<code>127.0.0.0/8</code>).EdReturns <code>true</code> if this is the loopback address (<code>::1</code>), as \xe2\x80\xa6210FcReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number \xe2\x80\xa600000CmReturns true for each negative element and false if it is \xe2\x80\xa611111111111111111111111100111111111111111111CkChecks if the value is an octal digit: 0x30 \xe2\x80\x980\xe2\x80\x99 ..= \xe2\x80\xa60BiDetermines whether the mutex is poisoned.EgReturns <code>true</code> if the associated <code>Once</code> was poisoned prior to \xe2\x80\xa6BhDetermines whether the lock is poisoned.FcReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number \xe2\x80\xa600000CmReturns true for each positive element and false if it is \xe2\x80\xa611111111111111111111111100111111111111111111EcReturns <code>true</code> if the <code>Path</code> is relative, i.e., not absolute.DeReturns <code>true</code> if this address is reserved by IANA for \xe2\x80\xa60EgReturns <code>true</code> if the option is a <code>Some</code> and the value inside \xe2\x80\xa60DhReturns <code>true</code> if the set is a superset of another, i.e., \xe2\x80\xa600DbReturns <code>true</code> if the descriptor/handle refers to a \xe2\x80\xa6CkDetermines if the prefix is verbatim, i.e., begins with \xe2\x80\xa6BfA doubly-linked list with owned nodes.0DkReads contiguous elements from <code>slice</code>. Each element is read \xe2\x80\xa60DhReturns a reference to the <code>LocalWaker</code> for the current task.CkSets the value for the local waker on <code>Context</code>.10CmAcquire a shared (non-exclusive) lock on the file. Blocks \xe2\x80\xa6DgPlatform-specific intrinsics for the <code>loongarch32</code> platform.DgPlatform-specific intrinsics for the <code>loongarch64</code> platform.DiReturns a <code>Cursor</code> pointing at the gap before the smallest \xe2\x80\xa6000CnComputes a default function result (if none), or applies a \xe2\x80\xa6EjMaps a <code>Result&lt;T, E&gt;</code> to <code>U</code> by applying fallback function \xe2\x80\xa610DiCalls the given function <code>f</code> for each contiguous window of \xe2\x80\xa600CaA SIMD mask with 16 elements for vectors with \xe2\x80\xa600CaA SIMD mask with 32 elements for vectors with \xe2\x80\xa600CaA SIMD mask with 64 elements for vectors with \xe2\x80\xa600DhReturns the maximum (IEEE 754-2019 maximum) of two <code>f128</code> \xe2\x80\xa60DhCorresponding intrinsic to wasm\xe2\x80\x99s <code>memory.grow</code> instruction00DhCorresponding intrinsic to wasm\xe2\x80\x99s <code>memory.size</code> instruction00BnReturns the attributes of a file or directory.DhReturns the minimum (IEEE 754-2019 minimum) of two <code>f128</code> \xe2\x80\xa60CjExpands to a string that represents the current module \xe2\x80\xa60FaFinds the next <code>Reject</code> result. See <code>next()</code> and <code>next_match()</code>.00CkCalculates the distance between two pointers within the \xe2\x80\xa600000BjParse an IP address from a slice of bytes.BlParse an IPv4 address from a slice of bytes.BlParse an IPv6 address from a slice of bytes.BmParse a socket address from a slice of bytes.CcParse an IPv4 socket address from a slice of bytes.CcParse an IPv6 socket address from a slice of bytes.543210BmPartial comparison for two <code>Arc</code>s.CcPartial comparison for two <code>UniqueArc</code>s.BlPartial comparison for two <code>Rc</code>s.CbPartial comparison for two <code>UniqueRc</code>s.EdThis method returns an ordering between <code>self</code> and <code>other</code> \xe2\x80\xa6DkLexicographically compares the <code>PartialOrd</code> elements of this \xe2\x80\xa60fPanics2165043CiReturns the permissions of the file this metadata is for.D`Arm-specific type containing two <code>poly8x8_t</code> vectors.0DbArm-specific type containing three <code>poly8x8_t</code> vectors.0DaArm-specific type containing four <code>poly8x8_t</code> vectors.0CnRemoves and returns the last element from the deque if the \xe2\x80\xa60CmProvides a reference. The referee type must be bounded by \xe2\x80\xa60BlGets a mutable pointer to the wrapped value.0DjReturns an iterator over <code>chunk_size</code> elements of the slice \xe2\x80\xa60DkThis function is not supported by <code>io::Repeat</code>, because there\xe2\x80\xa6CjReads all bytes until EOF in this source, placing them \xe2\x80\xa6BcRemoves a file from the filesystem.oUnlinks a file.ChRemoves the next element from the <code>BTreeMap</code>.0ChRemoves the next element from the <code>BTreeSet</code>.01100CmRemoves the preceding element from the <code>BTreeMap</code>.0CmRemoves the preceding element from the <code>BTreeSet</code>.01100DgCreates a new iterator that repeats elements of type <code>A</code> \xe2\x80\xa60EcRequests a reference of type <code>T</code> from the given <code>impl Error</code>.0F`Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.DfModifies the deque in-place so that <code>len()</code> is equal to \xe2\x80\xa610ClCreates a new span with the same line/column information \xe2\x80\xa6DaRotates the double-ended queue <code>n</code> places to the left.DcRotates the slice in-place such that the first <code>mid</code> \xe2\x80\xa6DfShifts the bits to the left by a specified amount, <code>n</code>, \xe2\x80\xa600000000000AePerforms rotate left.111111111111111111111111111111111111211111111111103111111111111111111111111111111111111CiSplits the slice on the last element that matches the \xe2\x80\xa6CmSplits the string on the last occurrence of the specified \xe2\x80\xa610ClReturns an iterator over subslices separated by elements \xe2\x80\xa60BoWrites pointers elementwise into a SIMD vector.0AoChoose elements from two masks.0BbSends a signal to a child process.B`Set the creation time of a file.0CnSets the message in <code>self</code> to <code>message</code>.DeSets the value of the <code>TCP_NODELAY</code> option on this socket.CmImplements the high half of the Sigma0 transformation, as \xe2\x80\xa6ClImplements the low half of the Sigma0 transformation, as \xe2\x80\xa6CmImplements the high half of the Sigma1 transformation, as \xe2\x80\xa6ClImplements the low half of the Sigma1 transformation, as \xe2\x80\xa6CfImplements the Sum0 transformation, as used in the \xe2\x80\xa6CfImplements the Sum1 transformation, as used in the \xe2\x80\xa6DiSets the field <code>wShowWindow</code> of STARTUPINFO that is passed \xe2\x80\xa6Bj<code>T</code> must be a vector of floats.0AkReads a vector of pointers.0CkInserts an element into a vector, returning the updated \xe2\x80\xa60AmSelects elements from a mask.0BjThe size of the referenced value in bytes.CbReturns the size of the pointed-to value in bytes.10ChPuts the current thread to sleep until the specified \xe2\x80\xa6ClSorts the slice in ascending order with a key extraction \xe2\x80\xa6AjSorts the slice of floats.000CmReturns the source text behind a span. This preserves the \xe2\x80\xa6ClSplits the list into two after the current element. This \xe2\x80\xa60CmReturns the first and all the rest of the elements of the \xe2\x80\xa60DhParses input according to platform conventions for the <code>PATH</code>AbStart index bound.000EfReturns <code>true</code> if <code>needle</code> is a prefix of the slice or equal \xe2\x80\xa6DkReturns <code>true</code> if the given pattern matches a prefix of this \xe2\x80\xa610DfDetermines whether <code>base</code> is a prefix of <code>self</code>.CjStandard deviation as a percent of the mean value. See \xe2\x80\xa6CbRemoves an element from the vector and returns it.0ClSwizzle a vector of bytes according to the index vector. \xe2\x80\xa60CgCreates a new symlink to a directory on the filesystem.ClReturns the memory representation of this floating point \xe2\x80\xa6000CjReturns the memory representation of this integer as a \xe2\x80\xa60000000000001111000000000000011110000000000000111100000000000001111000000000000011110000000000000CnConverts a <code>Path</code> to an owned <code>PathBuf</code>.BhTracked access to environment variables.CdReturns a subslice with the optional prefix removed.ChReturns a string slice with the optional prefix removed.10CdReturns a subslice with the optional suffix removed.ChReturns a string slice with the optional suffix removed.10ClFallibly transforms an iterator into a collection, short \xe2\x80\xa600EhCreates an array <code>[T; N]</code> where each fallible array element <code>T</code>\xe2\x80\xa60DgTries to reserve capacity for at least <code>additional</code> more \xe2\x80\xa6DkTries to reserve capacity for at least <code>additional</code> elements \xe2\x80\xa61DhTries to reserve capacity for at least <code>additional</code> bytes \xe2\x80\xa62EeInvokes <code>try_reserve</code> on the underlying instance of <code>OsString</code>.313233BfCreates a vector with identical lanes.00000000CmCreates a new suffixed integer literal with the specified \xe2\x80\xa6111D`Arm-specific type containing two <code>uint8x8_t</code> vectors.0DbArm-specific type containing three <code>uint8x8_t</code> vectors.0DaArm-specific type containing four <code>uint8x8_t</code> vectors.0AkIndicates unreachable code.ClInforms the optimizer that this point in the code is not \xe2\x80\xa6DgGenerates the <code>unreachable</code> instruction, which causes an \xe2\x80\xa60021EgAtomic combination of <code>take_hook</code> and <code>set_hook</code>. Use this to \xe2\x80\xa6DhReturns a <code>Cursor</code> pointing at the gap after the greatest keyDhReturns a <code>Cursor</code> pointing at the gap after the greatest \xe2\x80\xa610CnCreates an iterator over the contiguous valid UTF-8 ranges \xe2\x80\xa60DiBitwise AND of bits of <code>a</code> and the logical inverse of bits \xe2\x80\xa600CcSigned Add Long across Vector Arm\xe2\x80\x99s documentation0CeUnsigned Add Long across Vector Arm\xe2\x80\x99s documentation0BnAES inverse mix columns. Arm\xe2\x80\x99s documentation0CkReturns the index in the given string up to which valid \xe2\x80\xa600CnJoin two smaller vectors into a single larger vector Arm\xe2\x80\x99\xe2\x80\xa600000CmInsert vector element from another vector element Arm\xe2\x80\x99s \xe2\x80\xa600000000000000000000CmCreate a new vector with all lanes set to a value Arm\xe2\x80\x99s \xe2\x80\xa60ChDuplicate vector element to vector or scalar Arm\xe2\x80\x99s \xe2\x80\xa60BlDuplicate vector element to vector or scalar110111111111111AiAll Elements Not a Number00BfAll Elements Not Greater Than or Equal00AmAll Elements Not Greater Than00BcAll Elements Not Less Than or Equal00AjAll Elements Not Less Than00AiAny Elements Not a Number00BfAny Elements Not Greater Than or Equal00AmAny Elements Not Greater Than00BcAny Elements Not Less Than or Equal00AjAny Elements Not Less Than00AiAny Element Out of Bounds0CcVector Convert from float (even elements) to doublenVector Extract00AiVector Generate Byte MasknVector PromoteAbVector Unpack High00AaVector Unpack Low00AhVector Store with LengthClFloating-point fused Multiply-Subtract from accumulator. \xe2\x80\xa6ClFloating-point fused Multiply-Add to accumulator(vector) \xe2\x80\xa6001BmFloating-point fused Multiply-subtract to \xe2\x80\xa600ChDuplicate vector element to vector or scalar Arm\xe2\x80\x99s \xe2\x80\xa600000CjLoad one single-element structure and Replicate to all \xe2\x80\xa600000ChLoad multiple single-element structures to one, two, \xe2\x80\xa600000000000000000000000000000000000000000000000000000000000000000000000000000000CnLoad single 2-element structure and replicate to all lanes \xe2\x80\xa600000CnLoad single 3-element structure and replicate to all lanes \xe2\x80\xa600000CnLoad single 4-element structure and replicate to all lanes \xe2\x80\xa600000CcFloating-point Maximum Number Arm\xe2\x80\x99s documentationCbFloating-point Maximum Number (vector) Arm\xe2\x80\x99s \xe2\x80\xa60000CgFloating-point maximum number across vector Arm\xe2\x80\x99s \xe2\x80\xa60CcFloating-point Minimum Number Arm\xe2\x80\x99s documentationCbFloating-point Minimum Number (vector) Arm\xe2\x80\x99s \xe2\x80\xa60000CgFloating-point minimum number across vector Arm\xe2\x80\x99s \xe2\x80\xa60CkVector widening multiply accumulate with scalar Arm\xe2\x80\x99s \xe2\x80\xa60000000CbVector multiply accumulate with scalar Arm\xe2\x80\x99s \xe2\x80\xa6000000000CiVector widening multiply subtract with scalar Arm\xe2\x80\x99s \xe2\x80\xa60000000CjVector multiply subtract with scalar Arm\xe2\x80\x99s documentation000000000CaDuplicate element to vector Arm\xe2\x80\x99s documentation0ChDuplicate vector element to vector or scalar Arm\xe2\x80\x99s \xe2\x80\xa60BlDuplicate vector element to vector or scalar110111111111111CfVector long multiply with scalar Arm\xe2\x80\x99s documentation0000000BoVector multiply by scalar Arm\xe2\x80\x99s documentation0000000000000CdSigned Add and Accumulate Long Pairwise. Arm\xe2\x80\x99s \xe2\x80\xa6000CfUnsigned Add and Accumulate Long Pairwise. Arm\xe2\x80\x99s \xe2\x80\xa600011110000CaFloating-point add pairwise Arm\xe2\x80\x99s documentationClFloating-point Maximum Number Pairwise (vector). Arm\xe2\x80\x99s \xe2\x80\xa6CeFloating-point maximum pairwise Arm\xe2\x80\x99s documentation2ClFloating-point Minimum Number Pairwise (vector). Arm\xe2\x80\x99s \xe2\x80\xa6CeFloating-point minimum pairwise Arm\xe2\x80\x99s documentationChSigned saturating doubling multiply-add long Arm\xe2\x80\x99s \xe2\x80\xa6000CmSigned saturating doubling multiply-subtract long Arm\xe2\x80\x99s \xe2\x80\xa6000CnSigned saturating doubling multiply returning high half Arm\xe2\x80\xa6000CdSigned saturating doubling multiply long Arm\xe2\x80\x99s \xe2\x80\xa6000BoSaturating extract narrow Arm\xe2\x80\x99s documentation00000CeSigned saturating extract unsigned narrow Arm\xe2\x80\x99s \xe2\x80\xa600000CkSigned saturating rounding shift left Arm\xe2\x80\x99s documentationCjUnsigned signed saturating rounding shift left Arm\xe2\x80\x99s \xe2\x80\xa61011111100000010CbSigned saturating shift left Arm\xe2\x80\x99s documentation00000CdUnsigned saturating shift left Arm\xe2\x80\x99s documentation00000101100CkSigned saturating shift left unsigned Arm\xe2\x80\x99s documentation0CiRounding Add returning High Narrow. Arm\xe2\x80\x99s documentation00000000000BjReciprocal estimate. Arm\xe2\x80\x99s documentation000000CbUnsigned reciprocal estimate Arm\xe2\x80\x99s documentation01CdFloating-point reciprocal step Arm\xe2\x80\x99s documentation0000000ChFloating-point reciprocal exponent Arm\xe2\x80\x99s documentation00CgReversing vector elements (swap endianness) Arm\xe2\x80\x99s \xe2\x80\xa600000CbReverse elements in 64-bit doublewords Arm\xe2\x80\x99s \xe2\x80\xa60111111111111BjRounding halving add Arm\xe2\x80\x99s documentation0000000CiFloating-point round to 32-bit integer, using current \xe2\x80\xa60CnFloating-point round to 32-bit integer toward zero Arm\xe2\x80\x99s \xe2\x80\xa60CiFloating-point round to 64-bit integer, using current \xe2\x80\xa60CnFloating-point round to 64-bit integer toward zero Arm\xe2\x80\x99s \xe2\x80\xa60CaSigned rounding shift right Arm\xe2\x80\x99s documentation00000CcUnsigned rounding shift right Arm\xe2\x80\x99s documentation000001100CfReciprocal square-root estimate. Arm\xe2\x80\x99s documentation0000CdUnsigned reciprocal square root estimate Arm\xe2\x80\x99s \xe2\x80\xa60CfFloating-point reciprocal square root step Arm\xe2\x80\x99s \xe2\x80\xa60000CfSigned rounding shift right and accumulate Arm\xe2\x80\x99s \xe2\x80\xa600000ChUnsigned rounding shift right and accumulate Arm\xe2\x80\x99s \xe2\x80\xa6000001100CcRounding subtract returning high narrow Arm\xe2\x80\x99s \xe2\x80\xa600000000000CkSHA1 hash update accelerator, choose. Arm\xe2\x80\x99s documentation0CbSHA1 hash update accelerator, majority Arm\xe2\x80\x99s \xe2\x80\xa60CjSHA1 hash update accelerator, parity Arm\xe2\x80\x99s documentation0jShift left0BlSigned shift left long Arm\xe2\x80\x99s documentation0000000B`Shift left Arm\xe2\x80\x99s documentation00000000000AbSigned shift rightAdUnsigned shift rightBhShift right narrow Arm\xe2\x80\x99s documentation00000000000BaShift right Arm\xe2\x80\x99s documentation00000000000BkShift left and insert Arm\xe2\x80\x99s documentation0CgShift Left and Insert (immediate) Arm\xe2\x80\x99s documentation0000000CjUnsigned saturating accumulate of signed value Arm\xe2\x80\x99s \xe2\x80\xa60CkUnsigned saturating Accumulate of Signed value. Arm\xe2\x80\x99s \xe2\x80\xa6001BaSigned shift right and accumulateBcUnsigned shift right and accumulateCgSigned shift right and accumulate Arm\xe2\x80\x99s documentation00000CiUnsigned shift right and accumulate Arm\xe2\x80\x99s documentation00000BlShift right and insert Arm\xe2\x80\x99s documentation0ChShift Right and Insert (immediate) Arm\xe2\x80\x99s documentation0000000CiStore multiple single-element structures to one, two, \xe2\x80\xa600000000000000000000000000CkStore multiple single-element structures from one, two, \xe2\x80\xa600000000000000000111111111111111111111111000000111111CiThe intrinsic will return the size stored in that vtable.0CjSigned saturating accumulate of unsigned value Arm\xe2\x80\x99s \xe2\x80\xa60CkSigned saturating Accumulate of Unsigned value. Arm\xe2\x80\x99s \xe2\x80\xa6001CmDot product vector form with unsigned and signed integers \xe2\x80\xa60BkWake this task without consuming the waker.CaWake this task without consuming the local waker.DeWakes up the task associated with this <code>Waker</code> without \xe2\x80\xa6DjWakes up the task associated with this <code>LocalWaker</code> without \xe2\x80\xa63210BlAcquires a reference to the contained value.DgCreates an empty <code>HashMap</code> which will use the given hash \xe2\x80\xa6CiCreates a new empty hash set which will use the given \xe2\x80\xa6BbWrap a type into an unsafe binder.0CdInvokes memset on the specified pointer, setting \xe2\x80\xa6DjThis is an accidentally-stable alias to <code>ptr::write_bytes</code>; \xe2\x80\xa6EnSets <code>count * size_of::&lt;T&gt;()</code> bytes of memory starting at <code>dst</code>\xe2\x80\xa622102CdWrites a single <code>isize</code> into this hasher.0CdWrites a single <code>usize</code> into this hasher.0DjA windowed iterator over a slice in overlapping chunks (<code>N</code> \xe2\x80\xa600ChThe bitwise AND assignment operator <code>&amp;=</code>.0CdThe bitwise XOR assignment operator <code>^=</code>.0BmEmits a <code>CastKind::PtrToPtr</code> cast.0EaAssociated type for <code>&lt;char as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.00fU+00400DgDerive macro generating an impl of the trait <code>ConstParamTy</code>.0DfA cursor over a <code>BTreeMap</code> with editing operations, and \xe2\x80\xa6DfA cursor over a <code>BTreeSet</code> with editing operations, and \xe2\x80\xa610DeSealed Unix-specific extension methods for <code>fs::DirEntry</code>.ChThe message could not be sent because the channel is \xe2\x80\xa6DnThe <strong>channel</strong>\xe2\x80\x99s sending half has become disconnected, and \xe2\x80\xa60DjThis <code>sync_channel</code>\xe2\x80\x99s receiving half has disconnected, so \xe2\x80\xa6BaGets the discriminant of a place.CnThe type of the discriminant, which must satisfy the trait \xe2\x80\xa6CeOpaque type representing the discriminant of an enum.210CnA trait representing a distribution of random values for a \xe2\x80\xa60CfThe range is bounded inclusively from above and is \xe2\x80\xa60CjWindows-specific extensions to <code>fs::FileTimes</code>.CeOS-specific extensions to <code>fs::FileTimes</code>.BfFile larger than allowed or supported.BiConversion from an <code>Iterator</code>.0CiUsed to specify which residuals can be converted into \xe2\x80\xa60ClFFI type for handles in return values or out parameters, \xe2\x80\xa6ClEnum to store the various types of errors that can cause \xe2\x80\xa60CmA lazy iterator producing elements in the intersection of \xe2\x80\xa600DeAn iterator that infinitely <code>accept</code>s connections on a \xe2\x80\xa6BiConversion into an <code>Iterator</code>.0BiContains an invalid digit in its context.0AjA parameter was incorrect.CdThe filesystem object is, unexpectedly, a directory.fU+003C0DiThe maximum number of bytes required to encode a <code>char</code> to \xe2\x80\xa6000C`Smallest positive normal <code>f16</code> value.C`Smallest positive normal <code>f32</code> value.C`Smallest positive normal <code>f64</code> value.CaSmallest positive normal <code>f128</code> value.EgSmallest positive normal <code>f32</code> value. Use <code>f32::MIN_POSITIVE</code> \xe2\x80\xa6EgSmallest positive normal <code>f64</code> value. Use <code>f64::MIN_POSITIVE</code> \xe2\x80\xa6543210ChA wrapper to inhibit the compiler from automatically \xe2\x80\xa60CcCreated with the method <code>match_indices</code>.00AkNegative infinity (\xe2\x88\x92\xe2\x88\x9e).000DgNegative infinity (\xe2\x88\x92\xe2\x88\x9e). Use <code>f32::NEG_INFINITY</code> instead.DgNegative infinity (\xe2\x88\x92\xe2\x88\x9e). Use <code>f64::NEG_INFINITY</code> instead.222210CfAn <code>isize</code> that is known not to equal zero.0CeA <code>usize</code> that is known not to equal zero.0CmThe network operation failed because it was not connected \xe2\x80\xa6BaFormat of the test results outputClA message that was given to the <code>panic!()</code> macro.BfTypes that may or may not have a size.0fU+003F0CiAn iterator over a slice in (non-overlapping) chunks (\xe2\x80\xa600AgA source of randomness.0DjA trait implemented for integer types and <code>char</code>. Useful in \xe2\x80\xa6AaResource is busy.C`Operations on SIMD vectors of constant pointers.00DjPatterns in slices - currently, only used by <code>strip_prefix</code> \xe2\x80\xa6AgAn IPv4 socket address.0AgAn IPv6 socket address.0CmSpawns a subprocess to run the test, and sends the result \xe2\x80\xa6CaOs-specific extensions for <code>TcpStream</code>BkThe measured execution time of a unit test.CdToo many (hard) links to the same filesystem object.CgAn enumeration of possible errors associated with a \xe2\x80\xa60CkAn enumeration of possible errors which can occur while \xe2\x80\xa6CmThis enumeration is the list of the possible reasons that \xe2\x80\xa6CfThis enumeration is the list of the possible error \xe2\x80\xa6AgA Unix datagram socket.CeA structure representing a Unix domain socket server.CkThis type provides a way to entirely opt-out of typical \xe2\x80\xa60BhA terminator that resumes the unwinding.0C`Verbatim disk prefix, e.g., <code>\\\\?\\C:</code>.fU+007C0AoTrue (unordered, non-signaling)0AkTrue (unordered, signaling)0AiUnordered (non-signaling)0AeUnordered (signaling)0AnSee <code>_mm_prefetch</code>.00000AkSee <code>_mm_setcsr</code>0DgClears all bits below the least significant zero bit of <code>x</code>.00Alx-th thread-block dimension.Aly-th thread-block dimension.Alz-th thread-block dimension.Ahx-th thread-block index.Ahy-th thread-block index.Ahz-th thread-block index.D`Sets all bits of <code>x</code> below the least significant one.00CfAdd 16-bit masks a and b, and store the result in dst.0CgAdd 32-bit masks in a and b, and store the result in k.0CgAdd 64-bit masks in a and b, and store the result in k.0CnCompute the bitwise AND of 16-bit masks a and b, and store \xe2\x80\xa60CnCompute the bitwise AND of 32-bit masks a and b, and store \xe2\x80\xa60CnCompute the bitwise AND of 64-bit masks a and b, and store \xe2\x80\xa60CiBitwise AND NOT of 8-bit masks a and b, and store the \xe2\x80\xa60CkCompute the bitwise NOT of 16-bit mask a, and store the \xe2\x80\xa60CkCompute the bitwise NOT of 32-bit mask a, and store the \xe2\x80\xa60CkCompute the bitwise NOT of 64-bit mask a, and store the \xe2\x80\xa60CmBitwise XNOR of 8-bit masks a and b, and store the result \xe2\x80\xa60CnCompute the bitwise XOR of 16-bit masks a and b, and store \xe2\x80\xa60CnCompute the bitwise XOR of 32-bit masks a and b, and store \xe2\x80\xa60CnCompute the bitwise XOR of 64-bit masks a and b, and store \xe2\x80\xa60AlLoad 16-bit mask from memory0BdLoad 32-bit mask from memory into k.0BdLoad 64-bit mask from memory into k.0ChConditionally multiplies the packed single-precision \xe2\x80\xa60ClComputes the bitwise OR packed double-precision (64-bit) \xe2\x80\xa60ClComputes the bitwise OR packed single-precision (32-bit) \xe2\x80\xa60CjCompute the bitwise NOT of 16-bit masks a and then AND \xe2\x80\xa60CiCompute the bitwise XNOR of 16-bit masks a and b, and \xe2\x80\xa60CnCompute the bitwise OR of packed double-precision (64-bit) \xe2\x80\xa60CnCompute the bitwise OR of packed single-precision (32-bit) \xe2\x80\xa60CfComputes the absolute value of packed 8-bit signed \xe2\x80\xa60D`Adds packed 8-bit integers in <code>a</code> and <code>b</code>.0DmAverages packed unsigned 8-bit integers in <code>a</code> and <code>b</code>.0CiBlend packed double-precision (64-bit) floating-point \xe2\x80\xa60CiBlend packed single-precision (32-bit) floating-point \xe2\x80\xa60EbCompares corresponding elements in <code>a</code> and <code>b</code> for equality.0DkCompares each of the four floats in <code>a</code> to the corresponding \xe2\x80\xa60DkReturns a new vector with the low element of <code>a</code> replaced by \xe2\x80\xa60DiCompares the lowest <code>f32</code> of both inputs for equality. The \xe2\x80\xa60GaCompares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> \xe2\x80\xa6000FnCompares packed strings <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> \xe2\x80\xa6011111111DlCompares corresponding elements in <code>a</code> and <code>b</code> for \xe2\x80\xa605544DkCompares the lowest <code>f32</code> of both inputs for greater than or \xe2\x80\xa60116655DiCompares the lowest <code>f32</code> of both inputs for greater than. \xe2\x80\xa60EfCompares packed strings with implicit lengths in <code>a</code> and <code>b</code> \xe2\x80\xa60000000000000338877DhCompares the lowest <code>f32</code> of both inputs for less than or \xe2\x80\xa60EcCompares corresponding elements in <code>a</code> and <code>b</code> for less-than.0::99DjCompares the lowest <code>f32</code> of both inputs for less than. The \xe2\x80\xa60CgMultiply packed complex numbers in a by the complex \xe2\x80\xa60CjMultiply the lower complex numbers in a by the complex \xe2\x80\xa60CkCompute the complex conjugates of complex numbers in a, \xe2\x80\xa60DcStarting with the initial value in <code>crc</code>, return the \xe2\x80\xa60CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa60ClConverts packed double-precision (64-bit) floating-point \xe2\x80\xa60CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa60CnConverts the 4 x 16-bit half-precision float values in the \xe2\x80\xa60ClConverts packed single-precision (32-bit) floating-point \xe2\x80\xa60CnConverts the 4 x 32-bit float values in the 128-bit vector \xe2\x80\xa60CnConvert the lower double-precision (64-bit) floating-point \xe2\x80\xa60C`Converts the lower double-precision (64-bit) \xe2\x80\xa60ClConvert the lower half-precision (16-bit) floating-point \xe2\x80\xa6000C`Converts the lower single-precision (32-bit) \xe2\x80\xa60CnConvert the lower single-precision (32-bit) floating-point \xe2\x80\xa60CmRound the packed double-precision (64-bit) floating-point \xe2\x80\xa60CmRound the packed single-precision (32-bit) floating-point \xe2\x80\xa60ClRound the lower double-precision (64-bit) floating-point \xe2\x80\xa60ClRound the lower single-precision (32-bit) floating-point \xe2\x80\xa60CnMultiplies packed double-precision (64-bit) floating-point \xe2\x80\xa60CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa60CnMultiplies packed single-precision (32-bit) floating-point \xe2\x80\xa60CbMultiplies the lower double-precision (64-bit) \xe2\x80\xa60CmMultiply the lower half-precision (16-bit) floating-point \xe2\x80\xa60CbMultiplies the lower single-precision (32-bit) \xe2\x80\xa60554433221100CmMultiply packed complex numbers in a and b, and store the \xe2\x80\xa60ClMultiply the lower complex numbers in a and b, and store \xe2\x80\xa60ClLoads a double-precision (64-bit) floating-point element \xe2\x80\xa60EeConstruct a <code>__m128</code> by duplicating the value read from <code>p</code> \xe2\x80\xa6011BcAlias for <code>_mm_load1_ps</code>0CnLoads a double-precision value into the high-order bits of \xe2\x80\xa60CmLoads a double-precision value into the low-order bits of \xe2\x80\xa60CmLoads 2 double-precision (64-bit) floating-point elements \xe2\x80\xa60EhLoads four <code>f32</code> values from aligned memory into a <code>__m128</code> in \xe2\x80\xa60CiLoads 128-bits (composed of 2 packed double-precision \xe2\x80\xa60CfLoad 128-bits (composed of 8 packed half-precision \xe2\x80\xa60EhLoads four <code>f32</code> values from memory into a <code>__m128</code>. There are \xe2\x80\xa60EcCompares packed 8-bit integers in <code>a</code> and <code>b</code> and returns \xe2\x80\xa60EeCompares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and \xe2\x80\xa601100CmCompute the bitwise OR of packed 32-bit integers in a and \xe2\x80\xa60CmCompute the bitwise OR of packed 64-bit integers in a and \xe2\x80\xa60CmComputes the bitwise OR of 128 bits (representing integer \xe2\x80\xa60DgFetch the cache line that contains address <code>p</code> using the \xe2\x80\xa60CiCalculate the max, min, absolute max, or absolute min \xe2\x80\xa6000C`Compute the approximate reciprocal of packed \xe2\x80\xa6000CcCompute the approximate reciprocal of the lower \xe2\x80\xa6000CmRound the packed double-precision (64-bit) floating-point \xe2\x80\xa60CmRound the packed single-precision (32-bit) floating-point \xe2\x80\xa60ClRound the lower double-precision (64-bit) floating-point \xe2\x80\xa60ClRound the lower single-precision (32-bit) floating-point \xe2\x80\xa60ClCompute the approximate reciprocal square root of packed \xe2\x80\xa60ClReturns the approximate reciprocal square root of packed \xe2\x80\xa60CiCompute the approximate reciprocal square root of the \xe2\x80\xa60CiReturns the approximate reciprocal square root of the \xe2\x80\xa60CiSum the absolute differences of packed unsigned 8-bit \xe2\x80\xa60CdSets packed 8-bit integers with the supplied values.0CjStores 128-bits (composed of 2 packed double-precision \xe2\x80\xa60CgStore 128-bits (composed of 8 packed half-precision \xe2\x80\xa60CgStores four 32-bit floats into <em>aligned</em> memory.0CcStores the lower 64 bits of a 128-bit vector of \xe2\x80\xa60CjStore the lower half-precision (16-bit) floating-point \xe2\x80\xa60CmStores the lowest 32 bit float of <code>a</code> into memory.0DgSubtracts packed 8-bit integers in <code>b</code> from packed 8-bit \xe2\x80\xa60CfComputes the bitwise AND of 128 bits (representing \xe2\x80\xa60000000CjCounts the number of trailing least significant zero bits.00AjStore 8-bit mask to memory0BfSynchronizes all threads in the block.C`Compute dot-product of bytes in tiles with a \xe2\x80\xa6000CkStore the tile specified by src to memory specifieid by \xe2\x80\xa6EhRetrieves the parameter passed to <code>_xabort</code> when <code>_xbegin</code>\xe2\x80\x99s \xe2\x80\xa60CcInvokes a closure, aborting if the closure unwinds.0BoThe required alignment of the referenced value.CmReturns the ABI-required minimum alignment of the type of \xe2\x80\xa610CgComputes the offset that needs to be applied to the \xe2\x80\xa600000CnTransmutes the mutable slice to a mutable slice of another \xe2\x80\xa60CeAllocates zero-initialized memory with the global \xe2\x80\xa6DkBehaves like <code>alloc</code>, but also ensures that the contents are \xe2\x80\xa60010CnMakes all future panics abort directly without running the \xe2\x80\xa6CkCalculates the offset from a pointer, potentially wrapping.0DiReturns an iterator over <code>N</code> elements of the iterator at a \xe2\x80\xa600DdReturns the contents of this <code>MaybeUninit</code> slice as a \xe2\x80\xa6ChConverts a mutable string slice to a mutable byte slice.DfReturns the contents of this <code>MaybeUninit</code> as a mutable \xe2\x80\xa6210ElConverts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to \xe2\x80\xa6EdGets <code>Pin&lt;&amp;mut T&gt;</code> to the underlying pinned value from this \xe2\x80\xa6FbConverts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;mut Result&lt;T, E&gt;</code>) to \xe2\x80\xa6210DoTakes a <code>&amp;[[T; N]]</code>, and flattens it to a <code>&amp;[T]</code>.0CdGets a raw, mutable pointer to the underlying array.CkGets a mutable reference to the slice\xe2\x80\x99s underlying array.CkReturns a mutable array reference containing the entire \xe2\x80\xa6210CjViews the underlying data as a mutable subslice of the \xe2\x80\xa6CmReturns the remaining items of this iterator as a mutable \xe2\x80\xa6BnExtracts a mutable slice of the entire vector.CkReturns a raw pointer to a mutable slice containing the \xe2\x80\xa6ChReturns a mutable slice containing the entire array. \xe2\x80\xa6CnReturns a mutable slice of all elements that have not been \xe2\x80\xa6CnReturns a mutable slice of the contained value, if any. If \xe2\x80\xa663210654CcExtracts the raw pthread_t without taking ownershipC`Returns the two raw pointers spanning the slice.0DkStores a value if the current value is the same as the <code>old</code> \xe2\x80\xa60A`An atomic fence.0DjStores the value at the specified memory location. <code>T</code> must \xe2\x80\xa60BgPerforms the <code>|=</code> operation.0AeCreates a new hasher.0CmReturns the canonical, absolute form of the path with all \xe2\x80\xa6CkReturns the canonical, absolute form of a path with all \xe2\x80\xa6EmCalculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.0000ElCalculates <code>self</code> + <code>rhs</code> + <code>carry</code> and returns a tuple \xe2\x80\xa6000010111110000010DhCalculates the \xe2\x80\x9cfull multiplication\xe2\x80\x9d <code>self * rhs + carry</code>00000000000000000000000CmRust\xe2\x80\x99s \xe2\x80\x9ctry catch\xe2\x80\x9d construct for unwinding. Invokes \xe2\x80\xa60CjInvokes a closure, capturing the cause of an unwinding \xe2\x80\xa6DjReturns an iterator over the <code>char</code>s of a string slice, and \xe2\x80\xa60CjReturns the logarithm of the number with respect to an \xe2\x80\xa600000000000000000000000C`Returns an iterator over the slice producing \xe2\x80\xa60DjReturns an iterator over <code>chunk_size</code> elements of the slice \xe2\x80\xa60BfClear the poisoned state from a mutex.BeClear the poisoned state from a lock.CaReports the exit code, if applicable, from an \xe2\x80\xa6CjCollects all the items from an iterator into a collection.00BhConcatenates literals into a byte slice.0BbConnects the socket to an address.CiConnects to the socket specified by <code>address</code>.DkReturns <code>true</code> if the map contains a value for the specified \xe2\x80\xa600EcCopies the sign from <code>y</code> to <code>x</code> for <code>f128</code> values.0EbSets whether a <code>PidFd</code> should be created for the <code>Child</code> \xe2\x80\xa6EhLike <code>ctlz</code>, but extra-unsafe as it returns <code>undef</code> when given \xe2\x80\xa60EhLike <code>cttz</code>, but extra-unsafe as it returns <code>undef</code> when given \xe2\x80\xa60BgProvides a cursor at the front element.0DjPass custom flags to the <code>flags</code> argument of <code>open</code>.DjSets extra flags for the <code>dwFileFlags</code> argument to the call \xe2\x80\xa6ClCreates a new pointer that is dangling, but non-null and \xe2\x80\xa60CmSpecifies whether the <code>Debug</code> trait should use \xe2\x80\xa600DbAsserts that a boolean expression is <code>true</code> at runtime.0DfCreates a <code>DebugStruct</code> builder designed to assist with \xe2\x80\xa600CmCreates an iterator over the native endian UTF-16 encoded \xe2\x80\xa6CnCreates an iterator over the UTF-16 encoded code points in \xe2\x80\xa610ClRemoves all but the first of consecutive elements in the \xe2\x80\xa60AgDeinterleave two masks.AiDeinterleave two vectors.10CcAttribute macro used to apply derive macros for \xe2\x80\xa60DhReturns a value uniquely identifying the enum variant in <code>v</code>.0ClForwards to the method defined on the type <code>Any</code>.D`Forwards to the method defined on the type <code>dyn Any</code>.CnReturns some mutable reference to the inner value if it is \xe2\x80\xa6DbForwards to the method defined on the type <code>dyn Error</code>.10213001CnReturns some reference to the inner value if it is of type \xe2\x80\xa634110304101CjClears the binary heap, returning an iterator over the \xe2\x80\xa60CkEncodes this character as native endian UTF-16 into the \xe2\x80\xa6DfReturns an iterator of <code>u16</code> over the string encoded as \xe2\x80\xa610CkReturns an iterator that produces an escaped version of \xe2\x80\xa6CmReturns an iterator that produces an escaped version of a \xe2\x80\xa60100CnReturns an iterator that yields the literal escape code of \xe2\x80\xa6DhReturns an iterator that escapes each char in <code>self</code> with \xe2\x80\xa610CnExit the current process with the given <code>ExitCode</code>.BnCreates a new suffixed floating-point literal.0ChFetches the value, and applies a function to it that \xe2\x80\xa6000000000000000000000000000DmForces all arguments to be wrapped in quote (<code>&quot;</code>) characters.AnCreates a mask from a bitmask.0EjBuild a <em>pinned mutable</em> reference to an <code>Exclusive&lt;T&gt;</code> from a \xe2\x80\xa60EaDecode a UTF-16BE\xe2\x80\x93encoded vector <code>v</code> into a <code>String</code>, \xe2\x80\xa60EaDecode a UTF-16LE\xe2\x80\x93encoded vector <code>v</code> into a <code>String</code>, \xe2\x80\xa60CmCreates a new suffixed integer literal with the specified \xe2\x80\xa600CeCount the number of bits set to one within each lane.00DdInserts a new element into the <code>LinkedList</code> after the \xe2\x80\xa6CmInserts a new key-value pair into the map in the gap that \xe2\x80\xa60CjInserts a new element into the set in the gap that the \xe2\x80\xa6011002DgSets the value of the entry, and returns an <code>OccupiedEntry</code>.DjSets the value of the entry with the <code>VacantEntry</code>\xe2\x80\x99s key, \xe2\x80\xa61010ClVisits the elements representing the intersection, i.e., \xe2\x80\xa6CnVisits the values representing the intersection, i.e., the \xe2\x80\xa61DfConsumes this error, returning original <code>CString</code> which \xe2\x80\xa60CmDetermines whether proc_macro has been made accessible to \xe2\x80\xa6CmReturns <code>true</code> if this is a broadcast address (\xe2\x80\xa60EaReturns <code>true</code> if some <code>call_once()</code> call has completed \xe2\x80\xa6F`Returns <code>true</code> if <code>self</code> is in bounds for <code>len</code> slice elements.ElReturns <code>true</code> if this <code>char</code> has the <code>Lowercase</code> property.CnChecks if the value is a lowercase character: 0x61 \xe2\x80\x98a\xe2\x80\x99 \xe2\x80\xa610CiReturns <code>true</code> if this is a multicast address.EdReturns <code>true</code> if this is a multicast address (<code>224.0.0.0/4</code>).EaReturns <code>true</code> if this is a multicast address (<code>ff00::/8</code>).210CjChecks whether the pattern matches at the front of the \xe2\x80\xa60000ClDetermines whether the character is one of the permitted \xe2\x80\xa6CmChecks if the elements of this slice are sorted using the \xe2\x80\xa6ClChecks if the elements of this iterator are sorted using \xe2\x80\xa6010CeReturns <code>true</code> if the number is subnormal.000ChReturns true for each element if its value is subnormal.111100CiChecks whether the pattern matches at the back of the \xe2\x80\xa60000ElReturns <code>true</code> if this <code>char</code> has the <code>Uppercase</code> property.CnChecks if the value is an uppercase character: 0x41 \xe2\x80\x98A\xe2\x80\x99\xe2\x80\xa610CdReturns the number of leading ones in the binary \xe2\x80\xa600000000000000000000000000000DePass custom <code>dirflags</code> argument to <code>path_open</code>.FcMaps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;B, T&gt;</code> by applying a \xe2\x80\xa60CkReturns the ABI-required minimum alignment of a type in \xe2\x80\xa60CjReturns the position of the nul byte in the slice that \xe2\x80\xa60CiPerforms the correct padding for an integer which has \xe2\x80\xa600CnCreates a layout by rounding the size of this layout up to \xe2\x80\xa600CjBlocks unless or until the current thread\xe2\x80\x99s token is \xe2\x80\xa6AgCreates a pattern type.0DaArm-specific type containing two <code>poly16x4_t</code> vectors.0DcArm-specific type containing three <code>poly16x4_t</code> vectors.0DbArm-specific type containing four <code>poly16x4_t</code> vectors.0DaArm-specific type containing two <code>poly16x8_t</code> vectors.0DcArm-specific type containing three <code>poly16x8_t</code> vectors.0DbArm-specific type containing four <code>poly16x8_t</code> vectors.0DaArm-specific type containing two <code>poly64x1_t</code> vectors.0DcArm-specific type containing three <code>poly64x1_t</code> vectors.0DbArm-specific type containing four <code>poly64x1_t</code> vectors.0DaArm-specific type containing two <code>poly64x2_t</code> vectors.0DcArm-specific type containing three <code>poly64x2_t</code> vectors.0DbArm-specific type containing four <code>poly64x2_t</code> vectors.0DaArm-specific type containing two <code>poly8x16_t</code> vectors.0DcArm-specific type containing three <code>poly8x16_t</code> vectors.0DbArm-specific type containing four <code>poly8x16_t</code> vectors.0CkRemoves and returns the first element from the deque if \xe2\x80\xa60EbLowers in MIR to <code>Rvalue::UnaryOp</code> with <code>UnOp::PtrMetadata</code>.0CiReturns the OS error that this error represents (if any).BhReturns the read timeout of this socket.000ClAttempts to wait for a value on this receiver, returning \xe2\x80\xa60CaTake ownership of the key and value from the map.ClRemoves a key from the map, returning the stored key and \xe2\x80\xa600CeTake the ownership of the key and value from the map.2DkReplaces the wrapped value with a new one computed from <code>f</code>, \xe2\x80\xa60ChReverses the order of bits in the integer. The least \xe2\x80\xa600000000000CjReverses the order of bits in each elemnent. The least \xe2\x80\xa60111111111111BhReverses the bit pattern of the integer.000000000000000000000002222222222221111222222222222000000000000000000000000DbRotates the double-ended queue <code>n</code> places to the right.CbRotates the slice in-place such that the first \xe2\x80\xa6DgShifts the bits to the right by a specified amount, <code>n</code>, \xe2\x80\xa600000000000AfPerforms rotate right.111111111111111111111111111111111111211111111111103111111111111111111111111111111111111D`Returns <code>true</code> if senders belong to the same channel.DbReturns <code>true</code> if receivers belong to the same channel.CmWaits for a message to be sent into the channel, but only \xe2\x80\xa6CeSends data on the socket to the specified SocketAddr.BcSet the last access time of a file.ClChanges the flow information associated with this socket \xe2\x80\xa60CeChanges the modification time of the underlying file.BeSet the last modified time of a file.CiEnable or disable socket option <code>SO_PASSCRED</code>.BaSets the position of this cursor.BlEnable or disable <code>TCP_QUICKACK</code>.CnModifies the readonly flag for this set of permissions. If \xe2\x80\xa6CiChanges the scope ID associated with this socket address.0BiTruncates an integer vector to a bitmask.0BbExtracts an element from a vector.0AoWrites to a vector of pointers.0BfShuffles two vectors by const indices.0CiConstructs a new SIMD vector by copying elements from \xe2\x80\xa600CaGets a pointer to the first element of the array.0DfAdds a new child diagnostics message to <code>self</code> with the \xe2\x80\xa6CmSpawns a new scoped thread using the settings set through \xe2\x80\xa6DiInserts the elements from the given <code>LinkedList</code> after the \xe2\x80\xa60CcDivides one mutable raw slice into two at an index.BoDivides one mutable slice into two at an index.CfDivides one mutable string slice into two at an index.210CmSplits the list into two before the current element. This \xe2\x80\xa60DfConditionally write contiguous elements to <code>slice</code>. The \xe2\x80\xa60BkReturns a subslice with the prefix removed.BoReturns a string slice with the prefix removed.10EbReturns a path that, when joined onto <code>base</code>, yields <code>self</code>.BkReturns a subslice with the suffix removed.BoReturns a string slice with the suffix removed.10DaGets the number of strong (<code>Arc</code>) pointers to this \xe2\x80\xa6DjGets the number of strong (<code>Arc</code>) pointers pointing to this \xe2\x80\xa6DhGets the number of strong (<code>Rc</code>) pointers to this allocation.DiGets the number of strong (<code>Rc</code>) pointers pointing to this \xe2\x80\xa63210DaReturns the fractional part of this <code>Duration</code>, in \xe2\x80\xa60BmReturns the range that a substring points to.0CjCreates a new mask from the elements of <code>mask</code>.00ChCreates a new symlink to a non-directory file on the \xe2\x80\xa6AhCreates a symbolic link.BkCreates a new synchronous, bounded channel.0CbDeclare a new thread local storage key of type \xe2\x80\xa6DcConverts this address to an <code>IpAddr::V4</code> if it is an \xe2\x80\xa6000ClReturns an iterator that yields the lowercase mapping of \xe2\x80\xa6CgMakes a copy of the value in its lower case equivalent.1CmReturns the lowercase equivalent of this string slice, as \xe2\x80\xa61CeCopies the slice into an owned <code>OsString</code>.CmDecompose a (possibly wide) pointer into its data pointer \xe2\x80\xa600000ClReturns an iterator that yields the uppercase mapping of \xe2\x80\xa6CgMakes a copy of the value in its upper case equivalent.1CmReturns the uppercase equivalent of this string slice, as \xe2\x80\xa61DhPublic implementation details for the <code>TokenStream</code> type, \xe2\x80\xa6CfEnables or disables tracing functionality used for \xe2\x80\xa60BcTracked access to additional files.CnReturns a string slice with all prefixes and suffixes that \xe2\x80\xa60CjAn iterator method that applies a fallible function to \xe2\x80\xa600BiUnstable placeholder for type ascription.0CmCreates a new suffixed integer literal with the specified \xe2\x80\xa600CeCount the number of bits set to one within each lane.00DaArm-specific type containing two <code>uint16x4_t</code> vectors.0DcArm-specific type containing three <code>uint16x4_t</code> vectors.0DbArm-specific type containing four <code>uint16x4_t</code> vectors.0DaArm-specific type containing two <code>uint16x8_t</code> vectors.0DcArm-specific type containing three <code>uint16x8_t</code> vectors.0DbArm-specific type containing four <code>uint16x8_t</code> vectors.0DaArm-specific type containing two <code>uint32x2_t</code> vectors.0DcArm-specific type containing three <code>uint32x2_t</code> vectors.0DbArm-specific type containing four <code>uint32x2_t</code> vectors.0DaArm-specific type containing two <code>uint32x4_t</code> vectors.0DcArm-specific type containing three <code>uint32x4_t</code> vectors.0DbArm-specific type containing four <code>uint32x4_t</code> vectors.0DaArm-specific type containing two <code>uint64x1_t</code> vectors.0DcArm-specific type containing three <code>uint64x1_t</code> vectors.0DbArm-specific type containing four <code>uint64x1_t</code> vectors.0DaArm-specific type containing two <code>uint64x2_t</code> vectors.0DcArm-specific type containing three <code>uint64x2_t</code> vectors.0DbArm-specific type containing four <code>uint64x2_t</code> vectors.0DaArm-specific type containing two <code>uint8x16_t</code> vectors.0DcArm-specific type containing three <code>uint8x16_t</code> vectors.0DbArm-specific type containing four <code>uint8x16_t</code> vectors.0DiComputes the absolute value of <code>self</code> without any wrapping \xe2\x80\xa600000ClComputes the absolute value of self without any wrapping \xe2\x80\xa600000111111000000CnJoin two smaller vectors into a single larger vector Arm\xe2\x80\x99\xe2\x80\xa6000nVector combine1111111111111111ClFloating-point convert to lower precision narrow Arm\xe2\x80\x99s \xe2\x80\xa60CkFixed-point convert to floating-point Arm\xe2\x80\x99s documentation000CkFloating-point convert to higher precision long Arm\xe2\x80\x99s \xe2\x80\xa60BlFloating-point convert Arm\xe2\x80\x99s documentation2222122CjFloating-point convert to signed fixed-point, rounding \xe2\x80\xa60000ClFloating-point convert to unsigned fixed-point, rounding \xe2\x80\xa60000CbSet all vector lanes to the same value Arm\xe2\x80\x99s \xe2\x80\xa600000BaVector Addition unsigned 128-bitsoVector ChecksumBiVector Compare Ranges with Condition CodeAgVector Load with LengthBdVector Pack Saturated Condition CodeAkVector Splat to Signed Byte0AhVector Splat Signed ByteAmVector Splat to Unsigned Byte0AjVector Splat Unsigned ByteBaVector Subtract unsigned 128-bitsAjVector Sum Across QuadwordBiVector Convert floating point to unsignedoVector permute.0DdPowerPC-specific 128-bit wide vector of four packed <code>f32</code>0Dbs390x-specific 128-bit wide vector of four packed <code>f32</code>ChDuplicate vector element to vector or scalar Arm\xe2\x80\x99s \xe2\x80\xa600000CkMove vector element to general-purpose register Arm\xe2\x80\x99s \xe2\x80\xa600000ChDuplicate vector element to vector Arm\xe2\x80\x99s documentation022BlDuplicate vector element to vector or scalar330333333333333CjLoad one single-element structure and replicate to all \xe2\x80\xa60CjLoad one single-element structure and Replicate to all \xe2\x80\xa60ChLoad multiple single-element structures to one, two, \xe2\x80\xa61111111111111111ChLoad one single-element structure to one lane of one \xe2\x80\xa600000222222111111111111111111111111111111111111111111111111111111111111111CnLoad single 2-element structure and replicate to all lanes \xe2\x80\xa600000000000000000000CmLoad multiple 2-element structures to two registers Arm\xe2\x80\x99\xe2\x80\xa600000111111CnLoad single 3-element structure and replicate to all lanes \xe2\x80\xa600000000000000000000ClLoad multiple 3-element structures to three registers Arm\xe2\x80\xa60CmLoad multiple 3-element structures to two registers Arm\xe2\x80\x99\xe2\x80\xa6011222222CnLoad single 4-element structure and replicate to all lanes \xe2\x80\xa600000000000000000000CnLoad multiple 4-element structures to four registers Arm\xe2\x80\x99\xe2\x80\xa600000111111CgFloating-point maximum number across vector Arm\xe2\x80\x99s \xe2\x80\xa600CgFloating-point minimum number across vector Arm\xe2\x80\x99s \xe2\x80\xa600BoVector multiply by scalar Arm\xe2\x80\x99s documentationCaFloating-point add pairwise Arm\xe2\x80\x99s documentationClFloating-point Maximum Number Pairwise (vector). Arm\xe2\x80\x99s \xe2\x80\xa60CbFloating-point maximum number pairwise Arm\xe2\x80\x99s \xe2\x80\xa62ClFloating-point Minimum Number Pairwise (vector). Arm\xe2\x80\x99s \xe2\x80\xa60CbFloating-point minimum number pairwise Arm\xe2\x80\x99s \xe2\x80\xa6ChSigned saturating doubling multiply-add long Arm\xe2\x80\x99s \xe2\x80\xa60CmSigned saturating doubling multiply-subtract long Arm\xe2\x80\x99s \xe2\x80\xa60CnSigned saturating doubling multiply returning high half Arm\xe2\x80\xa600000CdSigned saturating doubling multiply long Arm\xe2\x80\x99s \xe2\x80\xa60CeSigned saturating extract unsigned narrow Arm\xe2\x80\x99s \xe2\x80\xa600CkSigned saturating rounding doubling multiply accumulate \xe2\x80\xa60CiSigned saturating rounding doubling multiply subtract \xe2\x80\xa60CjSigned saturating rounding doubling multiply returning \xe2\x80\xa6000CbSigned saturating shift left Arm\xe2\x80\x99s documentationCdUnsigned saturating shift left Arm\xe2\x80\x99s documentation1011111100000010CkSigned saturating shift left unsigned Arm\xe2\x80\x99s documentation00000000CjSigned saturating shift right narrow Arm\xe2\x80\x99s documentation00000CbUnsigned saturating shift right narrow Arm\xe2\x80\x99s \xe2\x80\xa600000CiFloating-point round to 32-bit integer, using current \xe2\x80\xa60CnFloating-point round to 32-bit integer toward zero Arm\xe2\x80\x99s \xe2\x80\xa60CiFloating-point round to 64-bit integer, using current \xe2\x80\xa60CnFloating-point round to 64-bit integer toward zero Arm\xe2\x80\x99s \xe2\x80\xa60CaSigned rounding shift right Arm\xe2\x80\x99s documentationCcUnsigned rounding shift right Arm\xe2\x80\x99s documentationCaRounding shift right narrow Arm\xe2\x80\x99s documentation00000000000222222111111CfReciprocal square-root estimate. Arm\xe2\x80\x99s documentation000000CdUnsigned reciprocal square root estimate Arm\xe2\x80\x99s \xe2\x80\xa601CfFloating-point reciprocal square root step Arm\xe2\x80\x99s \xe2\x80\xa60000000CgSigned rounding shift right and accumulate. Arm\xe2\x80\x99s \xe2\x80\xa6CiUnsigned rounding shift right and accumulate. Arm\xe2\x80\x99s \xe2\x80\xa6CfSigned rounding shift right and accumulate Arm\xe2\x80\x99s \xe2\x80\xa600000ChUnsigned rounding shift right and accumulate Arm\xe2\x80\x99s \xe2\x80\xa600000CmInsert vector element from another vector element Arm\xe2\x80\x99s \xe2\x80\xa600000AlSM3SS1 Arm\xe2\x80\x99s documentationCkStore multiple single-element structures from one, two, \xe2\x80\xa600000CiStore multiple single-element structures to one, two, \xe2\x80\xa600000000000000000000000000111111111111111111000000000000000000CmStore multiple 2-element structures from two registers Arm\xe2\x80\xa600000ClStore multiple 3-element structures from three registers \xe2\x80\xa600000CnStore multiple 4-element structures from four registers Arm\xe2\x80\xa600000CjThe intrinsic will return the alignment stored in that \xe2\x80\xa60BlUnsigned and signed 8-bit integer matrix \xe2\x80\xa60ChWaits on this condition variable for a notification, \xe2\x80\xa60DgCalculates the complete product <code>self * rhs</code> without the \xe2\x80\xa60000DeCalculates the complete double-width product <code>self * rhs</code>.000010111110000010ChCreates a new formatter based on this one with given \xe2\x80\xa600DhWrapping (modular) absolute value. Computes <code>self.abs()</code>, \xe2\x80\xa600000CkWrapping absolute value, see <code>i8::wrapping_abs</code>.ClWrapping absolute value, see <code>i64::wrapping_abs</code>.CnWrapping absolute value, see <code>isize::wrapping_abs</code>.ClWrapping absolute value, see <code>i16::wrapping_abs</code>.CmWrapping absolute value, see <code>i128::wrapping_abs</code>.ClWrapping absolute value, see <code>i32::wrapping_abs</code>.666666350142CgAdds an unsigned offset to a pointer using wrapping \xe2\x80\xa60DkWrapping (modular) addition. Computes <code>self + rhs</code>, wrapping \xe2\x80\xa600000000000CjReturns (a + b) mod 2N, where N is the width of T in bits.CgCalculates the offset from a pointer using wrapping \xe2\x80\xa603322222222222210000DkWrapping (modular) division. Computes <code>self / rhs</code>, wrapping \xe2\x80\xa60000CnWrapping (modular) division. Computes <code>self / rhs</code>.000010111110000010DhWrapping (modular) multiplication. Computes <code>self * rhs</code>, \xe2\x80\xa600000000000CjReturns (a * b) mod 2N, where N is the width of T in bits.1111111111110DfWrapping (modular) negation. Computes <code>-self</code>, wrapping \xe2\x80\xa600000000000AbWrapping negation.11111111111111111100111111DkWrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>, \xe2\x80\xa600000000000000000000000DcWrapping (modular) remainder. Computes <code>self % rhs</code>, \xe2\x80\xa60000CoWrapping (modular) remainder. Computes <code>self % rhs</code>.000010111110000010DoPanic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, \xe2\x80\xa600000000000000000000000E`Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, \xe2\x80\xa600000000000000000000000CnSubtracts an unsigned offset from a pointer using wrapping \xe2\x80\xa60DeWrapping (modular) subtraction. Computes <code>self - rhs</code>, \xe2\x80\xa600000000000CjReturns (a - b) mod 2N, where N is the width of T in bits.>>221111111111110>>>>ClAttempts to write an entire buffer starting from a given \xe2\x80\xa60DjFills a slice with elements by cloning <code>value</code>, returning a \xe2\x80\xa60BgAn entity already exists, often a file.CiThis enum represent one control message of variable type.C`A trait for dealing with asynchronous iterators.0DbFuture returned by <code>AsyncFnMut::async_call_mut</code> and \xe2\x80\xa60BnEmits a <code>CastKind::Transmute</code> cast.0DeA generalization of <code>Clone</code> to dynamically-sized types \xe2\x80\xa60CmDerive macro that makes a smart pointer usable with trait \xe2\x80\xa60ClTrait that indicates that this is a pointer or a wrapper \xe2\x80\xa60DgA marker for types which can be used as types of <code>const</code> \xe2\x80\xa60CiSpecifies the file extension, if any, used for shared \xe2\x80\xa6DaThe default <code>Hasher</code> used by <code>RandomState</code>.0ChUnix-specific extensions to <code>fs::DirBuilder</code>.CmSpecifies the file extension, if any, used for executable \xe2\x80\xa6CdThe return type of <code>str::escape_default</code>.DgAn iterator that yields the literal escape code of a <code>char</code>.1BoAn iterator over the escaped version of a byte.120CdThe return type of <code>str::escape_unicode</code>.CkReturns an iterator that yields the hexadecimal Unicode \xe2\x80\xa6101DdUnix-specific extensions to <code>process::ExitStatus</code> and \xe2\x80\xa6D`Windows-specific extensions to <code>process::ExitStatus</code>.i1/sqrt(2)0000000i1/sqrt(3)0000000ChAn iterator over the values yielded by an underlying \xe2\x80\xa60BhConstructs I/O objects from raw handles.BeCreates I/O objects from raw sockets.DgA possible error value when converting a <code>String</code> from a \xe2\x80\xa60DeAn iterator that always continues to yield <code>None</code> when \xe2\x80\xa60BbThe type of the resulting iterator0CkA trait to express the ability to consume an object and \xe2\x80\xa60BiInvalid escape character (e.g. \xe2\x80\x98\\z\xe2\x80\x99).BiBy-value <code>RangeFrom</code> iterator.0CdUnix-specific extensions to <code>JoinHandle</code>.CmThe maximum number of two-byte units required to encode a \xe2\x80\xa6000CfA filesystem object is, unexpectedly, not a directory.DkA view into an occupied entry in a <code>BTreeMap</code>. It is part of \xe2\x80\xa6DkA view into an occupied entry in a <code>BTreeSet</code>. It is part of \xe2\x80\xa6DjA view into an occupied entry in a <code>HashMap</code>. It is part of \xe2\x80\xa621DjA view into an occupied entry in a <code>HashSet</code>. It is part of \xe2\x80\xa6DfThe error returned by <code>try_insert</code> when the key already \xe2\x80\xa600Dk<code>OneSidedRange</code> is implemented for built-in range types that \xe2\x80\xa6000BmA struct providing information about a panic.CgAn error which can be returned when parsing an integer.0CjA marker type which does not implement <code>Unpin</code>.0CjFilesystem quota or some other kind of quota was exceeded.fU+00220CdCreated with the method <code>rmatch_indices</code>.00BbA re-entrant mutual exclusion lockCnA marker trait representing types where a shared reference \xe2\x80\xa60B`Parallel <code>PartialEq</code>.00ChPlatform-specific extensions to <code>SocketAddr</code>.BfType returned by String and str types.00CmA trait for objects which can be converted or resolved to \xe2\x80\xa6DcMarks that <code>Src</code> is transmutable into <code>Self</code>.0ChA type alias for the result of a nonblocking locking \xe2\x80\xa600CnAn error returned when an operation could not be completed \xe2\x80\xa6DaLinux-specific functionality for <code>AF_UNIX</code> sockets \xe2\x80\xa6CnAn unwind action that continues execution in a given basic \xe2\x80\xa60AnFalse (ordered, non-signaling)0AjFalse (ordered, signaling)0eEqual0AbLess-than-or-equal0iLess-than0iNot-equal0BgSee <code>_MM_GET_EXCEPTION_MASK</code>0DiThe <code>MM_PERM_ENUM</code> type used to specify shuffle operations \xe2\x80\xa60BfTransaction abort due to a debug trap.0AnTransaction retry is possible.0DgSyscall to be used whenever the <em>assert expression produces </em>\xe2\x80\xa6DhReturns the result of the <code>cpuid</code> instruction for a given \xe2\x80\xa60EgAdds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit \xe2\x80\xa60EgAdds unsigned 64-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit \xe2\x80\xa6ClConvert 8-bit mask a to a 32-bit integer value and store \xe2\x80\xa60CmConvert 32-bit integer value a to an 8-bit mask and store \xe2\x80\xa60CjCompute the bitwise NOT of 16-bit masks a and then AND \xe2\x80\xa60CjCompute the bitwise NOT of 32-bit masks a and then AND \xe2\x80\xa60CjCompute the bitwise NOT of 64-bit masks a and then AND \xe2\x80\xa60CiCompute the bitwise XNOR of 16-bit masks a and b, and \xe2\x80\xa60CiCompute the bitwise XNOR of 32-bit masks a and b, and \xe2\x80\xa60CiCompute the bitwise XNOR of 64-bit masks a and b, and \xe2\x80\xa60CjFinds the absolute value of each packed half-precision \xe2\x80\xa60ChAdds packed double-precision (64-bit) floating-point \xe2\x80\xa60CnAdd packed half-precision (16-bit) floating-point elements \xe2\x80\xa60ChAdds packed single-precision (32-bit) floating-point \xe2\x80\xa60CiComputes the bitwise AND of a packed double-precision \xe2\x80\xa60CgComputes the bitwise AND of packed single-precision \xe2\x80\xa60ClCompares packed double-precision (64-bit) floating-point \xe2\x80\xa60ClCompares packed single-precision (32-bit) floating-point \xe2\x80\xa60ChComputes the division of each of the 4 packed 64-bit \xe2\x80\xa60ChDivide packed half-precision (16-bit) floating-point \xe2\x80\xa60ChComputes the division of each of the 8 packed 32-bit \xe2\x80\xa6044CiCompare packed half-precision (16-bit) floating-point \xe2\x80\xa6044550044CnMultiplies packed double-precision (64-bit) floating-point \xe2\x80\xa60CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa60CnMultiplies packed single-precision (32-bit) floating-point \xe2\x80\xa60CgCompute the approximate reciprocal of packed 16-bit \xe2\x80\xa60CaComputes the approximate reciprocal of packed \xe2\x80\xa60ChSets packed double-precision (64-bit) floating-point \xe2\x80\xa60CnSet packed half-precision (16-bit) floating-point elements \xe2\x80\xa60ChSets packed single-precision (32-bit) floating-point \xe2\x80\xa60CmSubtracts packed double-precision (64-bit) floating-point \xe2\x80\xa60CjSubtract packed half-precision (16-bit) floating-point \xe2\x80\xa60CmSubtracts packed single-precision (32-bit) floating-point \xe2\x80\xa60CgComputes the bitwise XOR of packed double-precision \xe2\x80\xa60CgComputes the bitwise XOR of packed single-precision \xe2\x80\xa60ClFinds the absolute value of each packed double-precision \xe2\x80\xa60CjFinds the absolute value of each packed half-precision \xe2\x80\xa60ClFinds the absolute value of each packed single-precision \xe2\x80\xa60CgAdd packed double-precision (64-bit) floating-point \xe2\x80\xa60CnAdd packed half-precision (16-bit) floating-point elements \xe2\x80\xa60CgAdd packed single-precision (32-bit) floating-point \xe2\x80\xa60CfCompute the bitwise AND of packed double-precision \xe2\x80\xa60CfCompute the bitwise AND of packed single-precision \xe2\x80\xa60CjDivide packed double-precision (64-bit) floating-point \xe2\x80\xa60ChDivide packed half-precision (16-bit) floating-point \xe2\x80\xa60CjDivide packed single-precision (32-bit) floating-point \xe2\x80\xa60CkCompare packed double-precision (64-bit) floating-point \xe2\x80\xa60CiCompare packed half-precision (16-bit) floating-point \xe2\x80\xa60CkCompare packed single-precision (32-bit) floating-point \xe2\x80\xa60221100ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa60CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa60ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa60CgCompute the approximate reciprocal of packed 16-bit \xe2\x80\xa60CgSet packed double-precision (64-bit) floating-point \xe2\x80\xa60CnSet packed half-precision (16-bit) floating-point elements \xe2\x80\xa60DeSets packed 32-bit integers in <code>dst</code> with the supplied \xe2\x80\xa60ClSubtract packed double-precision (64-bit) floating-point \xe2\x80\xa60CjSubtract packed half-precision (16-bit) floating-point \xe2\x80\xa60ClSubtract packed single-precision (32-bit) floating-point \xe2\x80\xa60CfCompute the bitwise XOR of packed double-precision \xe2\x80\xa60CfCompute the bitwise XOR of packed single-precision \xe2\x80\xa60ClComputes the absolute value of each of the packed 16-bit \xe2\x80\xa60ClComputes the absolute value of each of the packed 32-bit \xe2\x80\xa60CfCompute the absolute value of packed signed 64-bit \xe2\x80\xa60DaAdds packed 16-bit integers in <code>a</code> and <code>b</code>.0DaAdds packed 32-bit integers in <code>a</code> and <code>b</code>.0DaAdds packed 64-bit integers in <code>a</code> and <code>b</code>.0EaAdds packed 8-bit integers in <code>a</code> and <code>b</code> using saturation.0EbAdds packed unsigned 8-bit integers in <code>a</code> and <code>b</code> using \xe2\x80\xa60CjAlternatively add and subtract packed double-precision \xe2\x80\xa60CjAlternatively add and subtract packed single-precision \xe2\x80\xa60CnComputes the bitwise AND of 128 bits (representing integer \xe2\x80\xa60DlComputes the bitwise NOT of <code>a</code> and then AND with <code>b</code>.0CgBitwise AND-NOT of packed single-precision (32-bit) \xe2\x80\xa60DnAverages packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.0CiBlend packed double-precision (64-bit) floating-point \xe2\x80\xa60CiBlend packed single-precision (32-bit) floating-point \xe2\x80\xa60DoCast vector of type <code>__m128d</code> to type <code>__m128h</code>. This \xe2\x80\xa60DkCasts a 128-bit floating-point vector of <code>[2 x double]</code> into \xe2\x80\xa60DoCast vector of type <code>__m128h</code> to type <code>__m128d</code>. This \xe2\x80\xa60EhCast vector of type <code>__m128h</code> to type <code>__m128</code>. This intrinsic \xe2\x80\xa60DjCasts a 128-bit floating-point vector of <code>[4 x float]</code> into \xe2\x80\xa60EhCast vector of type <code>__m128</code> to type <code>__m128h</code>. This intrinsic \xe2\x80\xa60EcCompares corresponding elements in <code>a</code> and <code>b</code> for not-equal.0DkCompares each of the four floats in <code>a</code> to the corresponding \xe2\x80\xa60DkReturns a new vector with the low element of <code>a</code> replaced by \xe2\x80\xa60DkCompares the lowest <code>f32</code> of both inputs for inequality. The \xe2\x80\xa60DlCompares corresponding elements in <code>a</code> and <code>b</code> for \xe2\x80\xa603322CkCompares the lowest <code>f32</code> of both inputs for \xe2\x80\xa601144330011443300114433DjCompares the lowest <code>f32</code> of both inputs for not-less-than. \xe2\x80\xa60EbCompares corresponding elements in <code>a</code> and <code>b</code> to see if \xe2\x80\xa606655DiChecks if the lowest <code>f32</code> of both inputs are ordered. The \xe2\x80\xa60DmCompares the lower element of <code>a</code> and <code>b</code> for equality.0ClCompare the lower half-precision (16-bit) floating-point \xe2\x80\xa60DhCompares two 32-bit floats from the low-order bits of <code>a</code> \xe2\x80\xa60DgCompares the lower element of <code>a</code> and <code>b</code> for \xe2\x80\xa602211EaCompares the lower element of <code>a</code> and <code>b</code> for greater-than.03322113322DnCompares the lower element of <code>a</code> and <code>b</code> for less-than.04433DcStarting with the initial value in <code>crc</code>, return the \xe2\x80\xa60000BfAlias for <code>_mm_cvtsi32_ss</code>.0BfAlias for <code>_mm_cvtss_si32</code>.0CmConvert the signed 32-bit integer b to a double-precision \xe2\x80\xa60CkConvert the signed 32-bit integer b to a half-precision \xe2\x80\xa60CmConvert the signed 32-bit integer b to a single-precision \xe2\x80\xa60CmConvert the signed 64-bit integer b to a double-precision \xe2\x80\xa6CkConvert the signed 64-bit integer b to a half-precision \xe2\x80\xa6CmConvert the signed 64-bit integer b to a single-precision \xe2\x80\xa6CnConverts packed BF16 (16-bit) floating-point elements in a \xe2\x80\xa60CmConverts a single BF16 (16-bit) floating-point element in \xe2\x80\xa60CnReturns the lower double-precision (64-bit) floating-point \xe2\x80\xa60CnConvert the lower double-precision (64-bit) floating-point \xe2\x80\xa600000ClConvert the lower half-precision (16-bit) floating-point \xe2\x80\xa600000CgExtracts the lowest 32 bit float from the input vector.0CnConvert the lower single-precision (32-bit) floating-point \xe2\x80\xa600000BnConvert the unsigned 32-bit integer b to a \xe2\x80\xa60CmConvert the unsigned 32-bit integer b to a half-precision \xe2\x80\xa6011BnConvert the unsigned 64-bit integer b to a \xe2\x80\xa6CmConvert the unsigned 64-bit integer b to a half-precision \xe2\x80\xa61CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa60CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa60CmCompute dot-product of BF16 (16-bit) floating-point pairs \xe2\x80\xa60CgMultiply packed complex numbers in a by the complex \xe2\x80\xa60CjMultiply the lower complex numbers in a by the complex \xe2\x80\xa60CmMultiply packed complex numbers in a and b, accumulate to \xe2\x80\xa60CmMultiply the lower complex numbers in a and b, accumulate \xe2\x80\xa60CnMultiplies packed double-precision (64-bit) floating-point \xe2\x80\xa60CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa60CnMultiplies packed single-precision (32-bit) floating-point \xe2\x80\xa60CbMultiplies the lower double-precision (64-bit) \xe2\x80\xa60CmMultiply the lower half-precision (16-bit) floating-point \xe2\x80\xa60CbMultiplies the lower single-precision (32-bit) \xe2\x80\xa60554433221100ChConvert the exponent of each packed double-precision \xe2\x80\xa60CfConvert the exponent of each packed half-precision \xe2\x80\xa60ChConvert the exponent of each packed single-precision \xe2\x80\xa60CfConvert the exponent of the lower double-precision \xe2\x80\xa60CmConvert the exponent of the lower half-precision (16-bit) \xe2\x80\xa60CfConvert the exponent of the lower single-precision \xe2\x80\xa60EhSelect a single value in <code>b</code> to store at some position in <code>a</code>, \xe2\x80\xa60CkLoad internal wrapping key (IWKey). The 32-bit unsigned \xe2\x80\xa60EeCompares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns \xe2\x80\xa60EeCompares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns \xe2\x80\xa60CiCompare packed signed 64-bit integers in a and b, and \xe2\x80\xa60EfCompares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and \xe2\x80\xa60EfCompares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and \xe2\x80\xa60CkCompare packed unsigned 64-bit integers in a and b, and \xe2\x80\xa60554433221100EoCombine higher half of <code>a</code> and <code>b</code>. The higher half of <code>b</code> \xe2\x80\xa60EmCombine lower half of <code>a</code> and <code>b</code>. The lower half of <code>b</code> \xe2\x80\xa60CkSet each packed 8-bit integer in dst to all ones or all \xe2\x80\xa60CnMultiplies the low 32-bit integers from each packed 64-bit \xe2\x80\xa60CiMultiplies the low unsigned 32-bit integers from each \xe2\x80\xa60CkExtract the reduced argument of packed double-precision \xe2\x80\xa60CiExtract the reduced argument of packed half-precision \xe2\x80\xa60CkExtract the reduced argument of packed single-precision \xe2\x80\xa60CnExtract the reduced argument of the lower double-precision \xe2\x80\xa60ClExtract the reduced argument of the lower half-precision \xe2\x80\xa60CnExtract the reduced argument of the lower single-precision \xe2\x80\xa60CmRotate the bits in each packed 32-bit integer in a to the \xe2\x80\xa60CmRotate the bits in each packed 64-bit integer in a to the \xe2\x80\xa601100CmScale the packed double-precision (64-bit) floating-point \xe2\x80\xa60CkScale the packed half-precision (16-bit) floating-point \xe2\x80\xa60CmScale the packed single-precision (32-bit) floating-point \xe2\x80\xa60220000ChBroadcasts 8-bit integer <code>a</code> to all elements.0CeSets packed 16-bit integers with the supplied values.0CeSets packed 32-bit integers with the supplied values.0CjSets packed 8-bit integers with the supplied values in \xe2\x80\xa60DjNegates packed 8-bit integers in <code>a</code> when the corresponding \xe2\x80\xa60EdShifts packed 16-bit integers in <code>a</code> left by <code>count</code> while \xe2\x80\xa60EdShifts packed 32-bit integers in <code>a</code> left by <code>count</code> while \xe2\x80\xa60EdShifts packed 64-bit integers in <code>a</code> left by <code>count</code> while \xe2\x80\xa60EeShifts packed 16-bit integers in <code>a</code> right by <code>count</code> while \xe2\x80\xa60EeShifts packed 32-bit integers in <code>a</code> right by <code>count</code> while \xe2\x80\xa60CjShift packed 64-bit integers in a right by count while \xe2\x80\xa602211EeShifts packed 64-bit integers in <code>a</code> right by <code>count</code> while \xe2\x80\xa60CmStores the lower double-precision (64-bit) floating-point \xe2\x80\xa60DhStores the lowest 32 bit float of <code>a</code> repeated four times \xe2\x80\xa6011BdAlias for <code>_mm_store1_ps</code>0CcStores the upper 64 bits of a 128-bit vector of \xe2\x80\xa60CcStores the lower 64 bits of a 128-bit vector of \xe2\x80\xa60CnStores 2 double-precision (64-bit) floating-point elements \xe2\x80\xa60DeStores four 32-bit floats into <em>aligned</em> memory in reverse \xe2\x80\xa60CjStores 128-bits (composed of 2 packed double-precision \xe2\x80\xa60CgStore 128-bits (composed of 8 packed half-precision \xe2\x80\xa60CgStores four 32-bit floats into memory. There are no \xe2\x80\xa60DjStores a 128-bit floating point vector of <code>[2 x double]</code> to \xe2\x80\xa60EgStores <code>a</code> into the memory at <code>mem_addr</code> using a non-temporal \xe2\x80\xa60CkNon-temporal store of <code>a.0</code> into <code>p</code>.000DiSubtracts packed 16-bit integers in <code>b</code> from packed 16-bit \xe2\x80\xa60DhSubtract packed 32-bit integers in <code>b</code> from packed 32-bit \xe2\x80\xa60DhSubtract packed 64-bit integers in <code>b</code> from packed 64-bit \xe2\x80\xa60DfSubtract packed 8-bit integers in <code>b</code> from packed 8-bit \xe2\x80\xa60DiSubtract packed unsigned 8-bit integers in <code>b</code> from packed \xe2\x80\xa60CnCompute the bitwise XOR of packed 32-bit integers in a and \xe2\x80\xa60CnCompute the bitwise XOR of packed 64-bit integers in a and \xe2\x80\xa60CnComputes the bitwise XOR of 128 bits (representing integer \xe2\x80\xa60AkStore 16-bit mask to memory0BeStore 32-bit mask from a into memory.0BeStore 64-bit mask from a into memory.0Abx-th thread index.Aby-th thread index.Abz-th thread index.ChRelease the tile configuration to return to the init \xe2\x80\xa6CoAppend <code>self.extension</code> with <code>extension</code>.CeFloat addition that allows optimizations based on \xe2\x80\xa60000000CeFloat division that allows optimizations based on \xe2\x80\xa60000000CkFloat multiplication that allows optimizations based on \xe2\x80\xa60000000CfFloat remainder that allows optimizations based on \xe2\x80\xa60000000ChFloat subtraction that allows optimizations based on \xe2\x80\xa60000000DkReturns an iterator over overlapping windows of <code>N</code> elements \xe2\x80\xa60DcSplits the slice into a slice of <code>N</code>-element arrays, \xe2\x80\xa60ChReturns the number of milliseconds contained by this \xe2\x80\xa6000DfYields a mutable reference to the underlying <code>OsStr</code> slice.CkViews the underlying data as a pair of subslices of the \xe2\x80\xa6CiReturns a pair of slices which contain, in order, the \xe2\x80\xa601AhExtracts the raw handle.AhExtracts the raw socket.DgReturns <code>None</code> if the pointer is null, or else returns a \xe2\x80\xa6ClReturns a unique references to the value. In contrast to \xe2\x80\xa61011ClReturns a shared references to the value. In contrast to \xe2\x80\xa6220DjBinary searches this <code>VecDeque</code> for a given element. If the \xe2\x80\xa6CjBinary searches this slice for a given element. If the \xe2\x80\xa601BkPerforms the <code>&amp;=</code> operation.0BgPerforms the <code>^=</code> operation.0FbCalculates <code>self</code> \xe2\x88\x92 <code>rhs</code> \xe2\x88\x92 <code>borrow</code> and checks for overflow.0000FaCalculates <code>self</code> \xe2\x88\x92 <code>rhs</code> \xe2\x88\x92 <code>borrow</code> and returns a tuple \xe2\x80\xa6000010111110000010DdReturns the bit pattern of <code>self</code> reinterpreted as an \xe2\x80\xa600000000000000000000000CiReturns the base 2 logarithm of the number, rounded down.00000000000000000000000CdReturns the square root of the number, rounded down.00000000000DcLexicographically compare <code>[left, left + bytes)</code> and \xe2\x80\xa60CkCauses compilation to fail with the given error message \xe2\x80\xa60DeWrites a SIMD vector to the first <code>N</code> elements of a slice.0DfReturns the value of the <code>ftCreationTime</code> field of this \xe2\x80\xa6BlProvide a list of type aliases and other \xe2\x80\xa60CiExecutes the destructor (if any) of the pointed-to value.00000DhCreates a layout describing the record for <code>self</code> followed by00CbFind the maximum of two values, NaNs pass through.CbFind the minimum of two values, NaNs pass through.ClLane-wise rounding to the nearest integral value; if two \xe2\x80\xa600000DkOffsets the pointer\xe2\x80\x99s address by adding <code>val</code> (in units of \xe2\x80\xa60DgOffsets the pointer\xe2\x80\x99s address by subtracting <code>val</code> (in \xe2\x80\xa60CkReturns the name of the source file as a nul-terminated \xe2\x80\xa60DiReturns a reference to the underlying <code>OsStr</code> of this entry\xe2\x80\xa6DbArm-specific type containing two <code>float16x4_t</code> vectors.0DdArm-specific type containing three <code>float16x4_t</code> vectors.0DcArm-specific type containing four <code>float16x4_t</code> vectors.0DbArm-specific type containing two <code>float16x8_t</code> vectors.0DdArm-specific type containing three <code>float16x8_t</code> vectors.0DcArm-specific type containing four <code>float16x8_t</code> vectors.0DbArm-specific type containing two <code>float32x2_t</code> vectors.0DdArm-specific type containing three <code>float32x2_t</code> vectors.0DcArm-specific type containing four <code>float32x2_t</code> vectors.0DbArm-specific type containing two <code>float32x4_t</code> vectors.0DdArm-specific type containing three <code>float32x4_t</code> vectors.0DcArm-specific type containing four <code>float32x4_t</code> vectors.0DbARM-specific type containing two <code>float64x1_t</code> vectors.DdARM-specific type containing three <code>float64x1_t</code> vectors.DcARM-specific type containing four <code>float64x1_t</code> vectors.DbARM-specific type containing two <code>float64x2_t</code> vectors.DdARM-specific type containing three <code>float64x2_t</code> vectors.DcARM-specific type containing four <code>float64x2_t</code> vectors.CmProduces layout describing a record that could be used to \xe2\x80\xa600CeForcibly captures a full backtrace, regardless of \xe2\x80\xa6CmCreates a floating point value from its representation as \xe2\x80\xa6000CnCreates an integer value from its representation as a byte \xe2\x80\xa60000CbCreates a native endian integer value from its \xe2\x80\xa600001012222111110000010122221111100000101222211111000001012222CnCreates an integer value from its memory representation as \xe2\x80\xa60000CiCreates a native endian integer value from its memory \xe2\x80\xa6000010044441111100000100CeConstructs a box from a <code>NonNull</code> pointer.0EjCreates a <code>Vec&lt;T, A&gt;</code> directly from a <code>NonNull</code> pointer, a \xe2\x80\xa60EcConstructs a <code>SockAddr</code> with the family <code>AF_UNIX</code> and the \xe2\x80\xa6DaConstructs the type from a compatible <code>Residual</code> type.0DdCreates a new <code>Duration</code> from the specified number of \xe2\x80\xa6000DdCreates an <code>Ipv6Addr</code> from an eight element 16-bit array.0CiConverts a mutable slice of bytes to a mutable string \xe2\x80\xa60000DhReads from indices in <code>slice</code> to construct a SIMD vector. \xe2\x80\xa60BhReturns the current <code>#</code> flag.00ClReturns the key-value pair corresponding to the supplied \xe2\x80\xa600DeGets non-atomic access to a <code>&amp;mut [AtomicBool]</code> slice.DdGets non-atomic access to a <code>&amp;mut [AtomicPtr]</code> slice.DaGet non-atomic access to a <code>&amp;mut [AtomicI8]</code> sliceDaGet non-atomic access to a <code>&amp;mut [AtomicU8]</code> sliceDbGet non-atomic access to a <code>&amp;mut [AtomicI16]</code> sliceDbGet non-atomic access to a <code>&amp;mut [AtomicU16]</code> sliceDbGet non-atomic access to a <code>&amp;mut [AtomicI32]</code> sliceDbGet non-atomic access to a <code>&amp;mut [AtomicU32]</code> sliceDbGet non-atomic access to a <code>&amp;mut [AtomicI64]</code> sliceDbGet non-atomic access to a <code>&amp;mut [AtomicU64]</code> sliceDcGet non-atomic access to a <code>&amp;mut [AtomicI128]</code> sliceDcGet non-atomic access to a <code>&amp;mut [AtomicU128]</code> sliceDdGet non-atomic access to a <code>&amp;mut [AtomicIsize]</code> sliceDdGet non-atomic access to a <code>&amp;mut [AtomicUsize]</code> slice=<;:9876543210DkInserts the given <code>value</code> into the set if it is not present, \xe2\x80\xa6EgInserts <code>value</code> into the option if it is <code>None</code>, then returns \xe2\x80\xa6011AnReturns the current precision.00CmReturns a pointer to the output at this location, without \xe2\x80\xa6ClReturns a raw pointer to an element or subslice, without \xe2\x80\xa6CjReturns a reference to an element or subslice, without \xe2\x80\xa6CbReturns an unchecked subslice of <code>str</code>.32103ChReturns whether two pointers are guaranteed to be equal.000CjReturns whether two pointers are guaranteed to be inequal.000CiChecks if there is any data left to be <code>read</code>.CmCreates a new suffixed integer literal with the specified \xe2\x80\xa6CmAdds two 128-bit vectors as if they were two packed eight \xe2\x80\xa600DgExtracts the high bit for each lane in <code>a</code> and produce a \xe2\x80\xa600DhSame as <code>i8x16_shuffle</code>, except operates as if the inputs \xe2\x80\xa600ClSubtracts two 128-bit vectors as if they were two packed \xe2\x80\xa600222111222111CeCreates a new unsuffixed integer literal with the \xe2\x80\xa6CgAdds two 128-bit vectors as if they were two packed \xe2\x80\xa600444CnReturns a new vector with lanes selected from the lanes of \xe2\x80\xa600333000BoIncludes a file as a reference to a byte array.0DeInserts a new element into the <code>LinkedList</code> before the \xe2\x80\xa6CmInserts a new key-value pair into the map in the gap that \xe2\x80\xa60CjInserts a new element into the set in the gap that the \xe2\x80\xa6011002EgInsert a named <code>value</code> (+/- <code>noise</code>) metric into the map. The \xe2\x80\xa6DmConverts a Box&lt;CStr&gt; into a <code>CString</code> without copying or \xe2\x80\xa6CiTurn this into an iterator over the connections being \xe2\x80\xa6E`Consumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer.0EjConverts a <code>Box&lt;Path&gt;</code> into a <code>PathBuf</code> without copying or \xe2\x80\xa6DeConstructs the associated searcher from <code>self</code> and the \xe2\x80\xa600CmReturns whether the pointer is aligned to <code>align</code>.00000EmReturns <code>true</code> if this <code>char</code> has the <code>Alphabetic</code> property.BoChecks if the value is an alphabetic character:10EeReturns <code>true</code> if the address is link-local (<code>169.254.0.0/16</code>).0EnReturns <code>true</code> if this <code>char</code> has the <code>White_Space</code> property.CnChecks if the value is a whitespace character: 0x20 SPACE, \xe2\x80\xa610CiReturns an error representing the last OS error which \xe2\x80\xa6CeReturns the number of leading zeros in the binary \xe2\x80\xa600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CcConstructs a new pin by mapping the interior value.0CnReturns an iterator over the disjoint matches of a pattern \xe2\x80\xa60CjReturns minimum and maximum values with respect to the \xe2\x80\xa60DnConstructs a new <code>Arc&lt;T, A&gt;</code> in the given allocator while \xe2\x80\xa6DmConstructs a new <code>Rc&lt;T, A&gt;</code> in the given allocator while \xe2\x80\xa610BnCreates an iterator over the elements in a \xe2\x80\xa6E`Constructs a new <code>Pin&lt;Ptr&gt;</code> around a reference to some data \xe2\x80\xa6BcCreates a new <code>NonNull</code>.DiCreates an <code>Alignment</code> from a power-of-two <code>usize</code>.ClCreates a non-zero without checking whether the value is \xe2\x80\xa643210DhConstructs a new <code>Arc</code> with uninitialized contents in the \xe2\x80\xa6CkConstructs a new box with uninitialized contents in the \xe2\x80\xa6DgConstructs a new <code>Rc</code> with uninitialized contents in the \xe2\x80\xa6210DeCreates a <code>SipHasher</code> that is keyed off the provided keys.0DkConstructs a new <code>Arc</code> with uninitialized contents, with the \xe2\x80\xa6DkConstructs a new <code>Box</code> with uninitialized contents, with the \xe2\x80\xa6DjConstructs a new <code>Rc</code> with uninitialized contents, with the \xe2\x80\xa6210CiAttempts to open a file in read-only mode with buffering.CjSets the process group ID (PGID) of the child process. \xe2\x80\xa6CjProvides a value or other type with only static lifetimes.0ChAdds an element to the back of the list, returning a \xe2\x80\xa6ClAppends an element to the back of the deque, returning a \xe2\x80\xa610BkSets a raw attribute on the attribute list.DjReturns an iterator over <code>chunk_size</code> elements of the slice \xe2\x80\xa60DjReads the exact number of bytes required to fill <code>buf</code> from \xe2\x80\xa6DiReads the exact number of byte required to fill <code>buf</code> from \xe2\x80\xa6DeLike <code>read</code>, except that it reads into a slice of buffers.0DiThis is an implementation detail of <code>crate::ptr::read</code> and \xe2\x80\xa60DhPerforms a volatile read of the value from <code>self</code> without \xe2\x80\xa60DgPerforms a volatile read of the value from <code>src</code> without \xe2\x80\xa611101ClAttempts to wait for a value on this receiver, returning \xe2\x80\xa60DjCreates a layout describing the record for <code>n</code> instances of \xe2\x80\xa600CnRemoves the specified range in the string, and replaces it \xe2\x80\xa60DoRequests a value of type <code>T</code> from the given <code>impl Error</code>.0DkReserves the minimum capacity for at least <code>additional</code> more \xe2\x80\xa6DfReserves the minimum capacity for at least <code>additional</code> \xe2\x80\xa6101DdInvokes <code>reserve_exact</code> on the underlying instance of \xe2\x80\xa62112CaTriggers a panic without invoking the panic hook.CfSeeks relative to the current position. If the new \xe2\x80\xa6BgSeeks relative to the current position.0CmWaits for a message to be sent into the channel, but only \xe2\x80\xa6DgSets the value of the <code>SO_BROADCAST</code> option for this socket.FbUpdates <code>self.extension</code> to <code>Some(extension)</code> or to <code>None</code> if \xe2\x80\xa6CnUpdates <code>self.file_name</code> to <code>file_name</code>.BhSets the value of the specified element.0CgShrinks the capacity of the vector as much as possible.CaDiscards as much additional capacity as possible.CfShrinks the capacity of the deque as much as possible.DeShrinks the capacity of this <code>String</code> to match its length.DfShrinks the capacity of the <code>OsString</code> to match its length.DdInvokes <code>shrink_to_fit</code> on the underlying instance of \xe2\x80\xa652CkShrinks the capacity of the map as much as possible. It \xe2\x80\xa65CkShrinks the capacity of the set as much as possible. It \xe2\x80\xa65AkCasts a vector of pointers.0DnSorts the slice in ascending order <strong>without</strong> preserving the \xe2\x80\xa60DjInserts the elements from the given <code>LinkedList</code> before the \xe2\x80\xa60CmRemoves the subslice corresponding to the given range and \xe2\x80\xa60ClReturns the last access time of the file, in nanoseconds \xe2\x80\xa6CgReturns the last status change time of the file, in \xe2\x80\xa6CfReturns the last modification time of the file, in \xe2\x80\xa6D`Returns the bounds on the number of <em>successor</em> steps \xe2\x80\xa6000DgReturns the fractional part of this <code>Duration</code>, in whole \xe2\x80\xa6000CeReturns the number of trailing ones in the binary \xe2\x80\xa600000000000000000000000000000CmCreates a new suffixed integer literal with the specified \xe2\x80\xa6CmAdds two 128-bit vectors as if they were two packed eight \xe2\x80\xa600DgExtracts the high bit for each lane in <code>a</code> and produce a \xe2\x80\xa600DhSame as <code>i8x16_shuffle</code>, except operates as if the inputs \xe2\x80\xa600ClSubtracts two 128-bit vectors as if they were two packed \xe2\x80\xa600222111222111CeCreates a new unsuffixed integer literal with the \xe2\x80\xa6CgAdds two 128-bit vectors as if they were two packed \xe2\x80\xa600444CnReturns a new vector with lanes selected from the lanes of \xe2\x80\xa600333000DjUnbounded shift left. Computes <code>self &lt;&lt; rhs</code>, without \xe2\x80\xa600000000000000000000000DkUnbounded shift right. Computes <code>self &gt;&gt; rhs</code>, without \xe2\x80\xa600000000000000000000000DjUnchecked integer addition. Computes <code>self + rhs</code>, assuming \xe2\x80\xa600000000000CmReturns the result of an unchecked addition, resulting in \xe2\x80\xa6CjAdds an unsigned integer to a non-zero value, assuming \xe2\x80\xa6000002222222222221000000CjPerforms an unchecked division, resulting in undefined \xe2\x80\xa60DgUnchecked integer multiplication. Computes <code>self * rhs</code>, \xe2\x80\xa600000000000CfReturns the result of an unchecked multiplication, \xe2\x80\xa6CgMultiplies two non-zero integers together, assuming \xe2\x80\xa6000000000002222222222221000000000000DfUnchecked negation. Computes <code>-self</code>, assuming overflow \xe2\x80\xa600000000000CmReturns the remainder of an unchecked division, resulting \xe2\x80\xa60E`Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that \xe2\x80\xa600000000000ClPerforms an unchecked left shift, resulting in undefined \xe2\x80\xa61111111111110EaUnchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that \xe2\x80\xa600000000000CmPerforms an unchecked right shift, resulting in undefined \xe2\x80\xa61111111111110DdUnchecked integer subtraction. Computes <code>self - rhs</code>, \xe2\x80\xa600000000000CmReturns the result of an unchecked subtraction, resulting \xe2\x80\xa61111111111110ClIndicates unimplemented code by panicking with a message \xe2\x80\xa60ClBypasses Rust\xe2\x80\x99s normal memory-initialization checks by \xe2\x80\xa60CjOperators used to turn types into unsafe binders and back.0CaUnwrap an unsafe binder into its underlying type.0EoReturns <code>true</code> if any bit in <code>a</code> is set, or <code>false</code> otherwise.00CjSigned Absolute difference and Accumulate Long Arm\xe2\x80\x99s \xe2\x80\xa6ClUnsigned Absolute difference and Accumulate Long Arm\xe2\x80\x99s \xe2\x80\xa6CeSigned Absolute difference Long Arm\xe2\x80\x99s documentationCgUnsigned Absolute difference Long Arm\xe2\x80\x99s documentationCjSigned Add Long (vector, high half). Arm\xe2\x80\x99s documentation000BkAdd Wide (high half). Arm\xe2\x80\x99s documentation000DgReturns the number of variants of the type <code>T</code> cast to a \xe2\x80\xa6CoReturns the number of variants in the enum type <code>T</code>.10CmInsert vector element from another vector element Arm\xe2\x80\x99s \xe2\x80\xa600CiFloating-point convert to signed integer, rounding to \xe2\x80\xa600CkFloating-point convert to unsigned integer, rounding to \xe2\x80\xa600CkFixed-point convert to floating-point Arm\xe2\x80\x99s documentation000000CjUnsigned fixed-point convert to floating-point Arm\xe2\x80\x99s \xe2\x80\xa600ChFloating-point convert to signed fixed-point Arm\xe2\x80\x99s \xe2\x80\xa600CjFloating-point convert to unsigned fixed-point Arm\xe2\x80\x99s \xe2\x80\xa600CmFloating-point convert to signed integer, rounding toward \xe2\x80\xa600ChFloating-point convert to unsigned integer, rounding \xe2\x80\xa600777666CnFloating-point convert to signed integer, rounding to plus \xe2\x80\xa6227116666666666CjFloating-point convert to signed fixed-point, rounding \xe2\x80\xa60000ClFloating-point convert to unsigned fixed-point, rounding \xe2\x80\xa600008888CnFloating-point convert to lower precision narrow, rounding \xe2\x80\xa6CfDot product arithmetic (indexed) Arm\xe2\x80\x99s documentation000CbSet all vector lanes to the same value Arm\xe2\x80\x99s \xe2\x80\xa60000000000000000000000000000000000BmVector Add Compute Carryout unsigned 128-bitsBgVector Add With Carry unsigned 128-bitsAjVector Compare Equal IndexAnVector Compare Not Equal IndexC`Vector Compare Not in Ranges with Condition CodeAkVector Compare Ranges IndexA`Vector Load PairAkVector Multiply Sum LogicalBmVector Pack Saturated Unsigned Condition CodeAoVector Splat to Signed Halfword0AlVector Splat Signed HalfwordAkVector Splat to Signed Word0AhVector Splat Signed WordAnVector Splat Signed DoublewordBaVector Splat to Unsigned Halfword0AnVector Splat Unsigned HalfwordAmVector Splat to Unsigned Word0AjVector Splat Unsigned WordB`Vector Splat Unsigned DoublewordAhVector Store with LengthBjVector Subtract Carryout unsigned 128-bitsAmVector Subtract with CarryoutAfVector Test under MaskDcPowerPC-specific 128-bit wide vector of two packed <code>f64</code>0Das390x-specific 128-bit wide vector of two packed <code>f64</code>ClFloating-point fused multiply-add to accumulator Arm\xe2\x80\x99s \xe2\x80\xa600CnFloating-point fused multiply-subtract from accumulator Arm\xe2\x80\xa6ClFloating-point fused multiply-subtract to accumulator Arm\xe2\x80\xa60ChDuplicate vector element to vector Arm\xe2\x80\x99s documentation0ChDuplicate vector element to vector or scalar Arm\xe2\x80\x99s \xe2\x80\xa60BlDuplicate vector element to vector or scalar110111111111111ChDuplicate vector element to scalar Arm\xe2\x80\x99s documentation0CkMove vector element to general-purpose register Arm\xe2\x80\x99s \xe2\x80\xa6020000000000000000000000ChLoad one single-element structure to one lane of one \xe2\x80\xa600000000000000000000CjLoad one single-element structure and replicate to all \xe2\x80\xa60CjLoad one single-element structure and Replicate to all \xe2\x80\xa60ChLoad multiple single-element structures to one, two, \xe2\x80\xa61111111111111111333333CmLoad multiple 2-element structures to two registers Arm\xe2\x80\x99\xe2\x80\xa600000000000000000CnLoad single 2-element structure and replicate to all lanes \xe2\x80\xa600000000000000000111CmLoad multiple 3-element structures to two registers Arm\xe2\x80\x99\xe2\x80\xa60ClLoad multiple 3-element structures to three registers Arm\xe2\x80\xa6000001111100000CnLoad single 3-element structure and replicate to all lanes \xe2\x80\xa600000000000000000121CmLoad multiple 4-element structures to two registers Arm\xe2\x80\x99\xe2\x80\xa60CnLoad multiple 4-element structures to four registers Arm\xe2\x80\x99\xe2\x80\xa6000000000000000CnLoad single 4-element structure and replicate to all lanes \xe2\x80\xa600000000000000000111CbVector multiply accumulate with scalar Arm\xe2\x80\x99s \xe2\x80\xa6000000000BnSigned multiply-add long Arm\xe2\x80\x99s documentationC`Unsigned multiply-add long Arm\xe2\x80\x99s documentationCjVector multiply subtract with scalar Arm\xe2\x80\x99s documentation000000000CcSigned multiply-subtract long Arm\xe2\x80\x99s documentationCeUnsigned multiply-subtract long Arm\xe2\x80\x99s documentationBaVector move Arm\xe2\x80\x99s documentation0AnMultiply Arm\xe2\x80\x99s documentation0BmFloating-point multiply Arm\xe2\x80\x99s documentation0011111111BnPolynomial multiply long Arm\xe2\x80\x99s documentationBjSigned multiply long Arm\xe2\x80\x99s documentationBlUnsigned multiply long Arm\xe2\x80\x99s documentationCkPerforms a volatile load from the <code>src</code> pointer.0CbFloating-point maximum number pairwise Arm\xe2\x80\x99s \xe2\x80\xa6CbFloating-point minimum number pairwise Arm\xe2\x80\x99s \xe2\x80\xa6CkVector widening saturating doubling multiply accumulate \xe2\x80\xa6000CnVector widening saturating doubling multiply subtract with \xe2\x80\xa6000CnVector saturating doubling multiply high with scalar Arm\xe2\x80\x99\xe2\x80\xa6000CnVector saturating doubling long multiply with scalar Arm\xe2\x80\x99\xe2\x80\xa6000CkSigned saturating rounding doubling multiply accumulate \xe2\x80\xa6000CiSigned saturating rounding doubling multiply subtract \xe2\x80\xa6000CjSigned saturating rounding doubling multiply returning \xe2\x80\xa600000ChSigned saturating rounded shift right narrow Arm\xe2\x80\x99s \xe2\x80\xa600000ClUnsigned signed saturating rounded shift right narrow Arm\xe2\x80\xa600000CkSigned saturating shift left unsigned Arm\xe2\x80\x99s documentation00000000CjSigned saturating shift right narrow Arm\xe2\x80\x99s documentationCbUnsigned saturating shift right narrow Arm\xe2\x80\x99s \xe2\x80\xa61010CiSigned saturating shift right unsigned narrow Arm\xe2\x80\x99s \xe2\x80\xa600000CmInsert vector element from another vector element Arm\xe2\x80\x99s \xe2\x80\xa600000000000000000000000000CiSHA1 schedule update accelerator, first part. Arm\xe2\x80\x99s \xe2\x80\xa60CjSHA1 schedule update accelerator, second part. Arm\xe2\x80\x99s \xe2\x80\xa6011BoSHA512 hash update part 1 Arm\xe2\x80\x99s documentationAmSM3TT1A Arm\xe2\x80\x99s documentationAmSM3TT1B Arm\xe2\x80\x99s documentationAmSM3TT2A Arm\xe2\x80\x99s documentationAmSM3TT2B Arm\xe2\x80\x99s documentationAmSM4 key Arm\xe2\x80\x99s documentationCkStore multiple single-element structures from one, two, \xe2\x80\xa600000000000000000000000000CmStore multiple 2-element structures from two registers Arm\xe2\x80\xa600000000000000000000ClStore multiple 3-element structures from three registers \xe2\x80\xa600000000000000000000CnStore multiple 4-element structures from four registers Arm\xe2\x80\xa600000000000000000000BjSigned Subtract Long Arm\xe2\x80\x99s documentationBlUnsigned Subtract Long Arm\xe2\x80\x99s documentationBjSigned Subtract Wide Arm\xe2\x80\x99s documentationBlUnsigned Subtract Wide Arm\xe2\x80\x99s documentationEaConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified \xe2\x80\xa6DhCreates an empty <code>BinaryHeap</code> with at least the specified \xe2\x80\xa6DhCreates an empty deque with space for at least <code>capacity</code> \xe2\x80\xa6DgCreates a new empty <code>String</code> with at least the specified \xe2\x80\xa6DeCreates a new <code>OsString</code> with at least the given capacity.DkCreates a new <code>PathBuf</code> with a given capacity used to create \xe2\x80\xa652DeCreates an empty <code>HashMap</code> with at least the specified \xe2\x80\xa65DeCreates an empty <code>HashSet</code> with at least the specified \xe2\x80\xa65DkCreates a new <code>BufReader&lt;R&gt;</code> with the specified buffer \xe2\x80\xa6DmCreates a new <code>BufWriter&lt;W&gt;</code> with at least the specified \xe2\x80\xa6DeCreates a new <code>LineWriter</code> with at least the specified \xe2\x80\xa6BiReturns the write timeout of this socket.000CmAn error which can be returned when parsing an IP address \xe2\x80\xa60ClThe error type which is returned from parsing the type a \xe2\x80\xa6CnA type for atomic ordering parameters for intrinsics. This \xe2\x80\xa60AnA single frame of a backtrace.CkThe configuration for whether and how the default panic \xe2\x80\xa6CjAn error returned by <code>RefCell::try_borrow_mut</code>.0DgA writeable view of the unfilled portion of a <code>BorrowedBuf</code>.0AbA borrowed handle.AbA borrowed socket.CmFuture returned by <code>AsyncFnOnce::async_call_once</code>.0fU+000D0CiAn iterator over a slice in (non-overlapping) mutable \xe2\x80\xa600DdA Builder used to construct a <code>Context</code> instance with \xe2\x80\xa60BeThe result of a coroutine resumption.0CgCross-device or cross-filesystem (hard) link or rename.fU+00100CmUnescaped character that was expected to be escaped (e.g. \xe2\x80\xa6j1/sqrt(\xcf\x80)0000000j2/sqrt(\xcf\x80)0000000CkLoop in the filesystem or IO subsystem; often, too many \xe2\x80\xa6DgA possible error value when converting a <code>String</code> from a \xe2\x80\xa60AfInterface-Local scope.0DjAn error returned by <code>BufWriter::into_inner</code> which combines \xe2\x80\xa6DdThe error type for operations on the <code>PATH</code> variable. \xe2\x80\xa6fU+000B0ClThe primary separator of path components for the current \xe2\x80\xa6EfAn error returned from <code>Path::normalize_lexically</code> if a <code>..</code> \xe2\x80\xa6CjTrait used to describe the maximum number of digits in \xe2\x80\xa6CiUnix-specific extensions to <code>fs::OpenOptions</code>.ClWindows-specific extensions to <code>fs::OpenOptions</code>.CiWASI-specific extensions to <code>fs::OpenOptions</code>.EdAn error returned when parsing a <code>bool</code> using <code>from_str</code> fails00CcAn error which can be returned when parsing a char.0CiUnix-specific extensions to <code>fs::Permissions</code>.DgA range bounded inclusively below and above (<code>start..=end</code>).00000ClA virtual function pointer table (vtable) that specifies \xe2\x80\xa60fU+005C0BaParallel <code>PartialOrd</code>.00CiAn iterator over subslices separated by elements that \xe2\x80\xa6CnAn iterator over the substrings of a string, terminated by \xe2\x80\xa61010CfThe range is bounded inclusively from below and is \xe2\x80\xa60fU+00010Bo<code>UnsafeCell</code>, but <code>Sync</code>.0BjAn unwind action that continues unwinding.0BmError returned for the buffered data from \xe2\x80\xa6AfNot less-than-or-equal0mNot less-than0AkSee <code>_mm_setcsr</code>0BfSee <code>_MM_GET_ROUNDING_MODE</code>0AjSee <code>prefetch</code>.Bo<strong>Mask only</strong>: return the bit mask0BhTransaction aborted due to a debug trap.CkTransaction aborted because a non-permissible operation \xe2\x80\xa6BhFallback error type for any other reasonBaTransaction failed from interruptBoTransaction aborted because a conflict occurredC`Transaction abort in a inner nested transaction.0EgAdds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit \xe2\x80\xa60EgAdds unsigned 64-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit \xe2\x80\xa6EgReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>\xe2\x80\xa60CnConvert 16-bit mask a into an integer value, and store the \xe2\x80\xa60CnConvert 32-bit mask a into an integer value, and store the \xe2\x80\xa60CnConvert 64-bit mask a into an integer value, and store the \xe2\x80\xa6CnConvert 32-bit integer value a to an 16-bit mask and store \xe2\x80\xa60CnConvert integer value a into an 32-bit mask, and store the \xe2\x80\xa60CnConvert integer value a into an 64-bit mask, and store the \xe2\x80\xa6CjRounds packed double-precision (64-bit) floating point \xe2\x80\xa60CjRounds packed single-precision (32-bit) floating point \xe2\x80\xa60CiCopy the lower half-precision (16-bit) floating-point \xe2\x80\xa60CkHorizontal addition of adjacent pairs in the two packed \xe2\x80\xa6000CnHorizontal subtraction of adjacent pairs in the two packed \xe2\x80\xa6000CiLoads 256-bits (composed of 4 packed double-precision \xe2\x80\xa60CgLoad 256-bits (composed of 16 packed half-precision \xe2\x80\xa60CiLoads 256-bits (composed of 8 packed single-precision \xe2\x80\xa60CmMultiply packed complex numbers in a and b, and store the \xe2\x80\xa60DkBroadcasts double-precision (64-bit) floating-point value <code>a</code>\xe2\x80\xa60CnBroadcast the half-precision (16-bit) floating-point value \xe2\x80\xa60DkBroadcasts single-precision (32-bit) floating-point value <code>a</code>\xe2\x80\xa60ChSets packed double-precision (64-bit) floating-point \xe2\x80\xa60CnSet packed half-precision (16-bit) floating-point elements \xe2\x80\xa60ChSets packed single-precision (32-bit) floating-point \xe2\x80\xa60CfReturns the square root of packed double-precision \xe2\x80\xa60CmCompute the square root of packed half-precision (16-bit) \xe2\x80\xa60CfReturns the square root of packed single-precision \xe2\x80\xa60C`Zeroes the contents of all XMM or YMM registers.0CiCopy the lower half-precision (16-bit) floating-point \xe2\x80\xa60ChLoad 512-bits (composed of 8 packed double-precision \xe2\x80\xa60CgLoad 512-bits (composed of 32 packed half-precision \xe2\x80\xa60CiLoad 512-bits (composed of 16 packed single-precision \xe2\x80\xa60>>DjBroadcast 64-bit float <code>a</code> to all elements of <code>dst</code>.0==DjBroadcast 32-bit float <code>a</code> to all elements of <code>dst</code>.0CgSet packed double-precision (64-bit) floating-point \xe2\x80\xa60CgSet packed single-precision (32-bit) floating-point \xe2\x80\xa6011==DeSets packed 32-bit integers in <code>dst</code> with the supplied \xe2\x80\xa60DhReturn vector of type <code>__m512</code> with all elements set to zero.0CfCompute the square root of packed double-precision \xe2\x80\xa60==CfCompute the square root of packed single-precision \xe2\x80\xa60EbAdds packed 16-bit integers in <code>a</code> and <code>b</code> using saturation.0EcAdds packed unsigned 16-bit integers in <code>a</code> and <code>b</code> using \xe2\x80\xa60EaCompares packed 8-bit integers in <code>a</code> and <code>b</code> for equality.0EeCompares packed 8-bit integers in <code>a</code> and <code>b</code> for greater-than.0EbCompares packed 8-bit integers in <code>a</code> and <code>b</code> for less-than.0DnCompares the lower element of <code>a</code> and <code>b</code> for not-equal.0ClCompare the lower half-precision (16-bit) floating-point \xe2\x80\xa60DhCompares two 32-bit floats from the low-order bits of <code>a</code> \xe2\x80\xa60C`Converts the lower double-precision (64-bit) \xe2\x80\xa600EbReturns <code>a</code> with its lower element replaced by <code>b</code> after \xe2\x80\xa60CkConverts a 32 bit integer to a 32 bit float. The result \xe2\x80\xa601CkConverts a 64 bit integer to a 32 bit float. The result \xe2\x80\xa6CmConverts the lowest 32 bit float in the input vector to a \xe2\x80\xa600BgAlias for <code>_mm_cvttss_si32</code>.0CnConvert the lower double-precision (64-bit) floating-point \xe2\x80\xa600000ClConvert the lower half-precision (16-bit) floating-point \xe2\x80\xa600000CnConvert the lower single-precision (32-bit) floating-point \xe2\x80\xa600000CeCompute the sum of absolute differences (SADs) of \xe2\x80\xa60CgExtracts a single-precision (32-bit) floating-point \xe2\x80\xa60CgMultiply packed complex numbers in a by the complex \xe2\x80\xa60CiMultiply the lower complex number in a by the complex \xe2\x80\xa60CfNormalize the mantissas of packed double-precision \xe2\x80\xa60CmNormalize the mantissas of packed half-precision (16-bit) \xe2\x80\xa60CfNormalize the mantissas of packed single-precision \xe2\x80\xa60CiNormalize the mantissas of the lower double-precision \xe2\x80\xa60CgNormalize the mantissas of the lower half-precision \xe2\x80\xa60CiNormalize the mantissas of the lower single-precision \xe2\x80\xa60ClHorizontally adds the adjacent pairs of values contained \xe2\x80\xa6000CfHorizontally subtract the adjacent pairs of values \xe2\x80\xa6000CmLoad 128-bits (composed of 4 packed 32-bit integers) from \xe2\x80\xa60CmLoad 128-bits (composed of 2 packed 64-bit integers) from \xe2\x80\xa60CiLoads 128-bits of integer data from memory into a new \xe2\x80\xa60ClLoads a double-precision (64-bit) floating-point element \xe2\x80\xa60CmLoad 128-bits (composed of 16 packed 8-bit integers) from \xe2\x80\xa60ClLoads unaligned 16-bits of integer data from memory into \xe2\x80\xa60ClLoads unaligned 32-bits of integer data from memory into \xe2\x80\xa60ClLoads unaligned 64-bits of integer data from memory into \xe2\x80\xa60CfMultiplies and then horizontally add signed 16 bit \xe2\x80\xa60CnCompute the bitwise OR of packed double-precision (64-bit) \xe2\x80\xa60CnCompute the bitwise OR of packed single-precision (32-bit) \xe2\x80\xa60DkReturns a vector where the low element is extracted from <code>a</code> \xe2\x80\xa60CnDuplicate the low double-precision (64-bit) floating-point \xe2\x80\xa60ClSet each packed 16-bit integer in dst to all ones or all \xe2\x80\xa60ClSet each packed 32-bit integer in dst to all ones or all \xe2\x80\xa60ClSet each packed 64-bit integer in dst to all ones or all \xe2\x80\xa60CnShuffles double-precision (64-bit) floating-point elements \xe2\x80\xa60CnShuffles single-precision (32-bit) floating-point elements \xe2\x80\xa60CmRotate the bits in each packed 32-bit integer in a to the \xe2\x80\xa60CmRotate the bits in each packed 64-bit integer in a to the \xe2\x80\xa601100ClCompute the approximate reciprocal square root of packed \xe2\x80\xa6000CiCompute the approximate reciprocal square root of the \xe2\x80\xa6000CiBroadcasts 16-bit integer <code>a</code> to all elements.0CiBroadcasts 32-bit integer <code>a</code> to all elements.0CnSets packed 64-bit integers with the supplied values, from \xe2\x80\xa60CkSets packed 16-bit integers with the supplied values in \xe2\x80\xa60CkSets packed 32-bit integers with the supplied values in \xe2\x80\xa60CkReturns packed double-precision (64-bit) floating-point \xe2\x80\xa60CjReturn vector of type __m128h with all elements set to \xe2\x80\xa60DfConstruct a <code>__m128</code> with all elements initialized to zero.0DkConstructs a 128-bit floating-point vector of <code>[2 x double]</code> \xe2\x80\xa60ClShuffles packed single-precision (32-bit) floating-point \xe2\x80\xa60DkNegates packed 16-bit integers in <code>a</code> when the corresponding \xe2\x80\xa60DkNegates packed 32-bit integers in <code>a</code> when the corresponding \xe2\x80\xa60EcShifts packed 16-bit integers in <code>a</code> left by <code>IMM8</code> while \xe2\x80\xa60EcShifts packed 32-bit integers in <code>a</code> left by <code>IMM8</code> while \xe2\x80\xa60EcShifts packed 64-bit integers in <code>a</code> left by <code>IMM8</code> while \xe2\x80\xa60DnShifts <code>a</code> left by <code>IMM8</code> bytes while shifting in zeros.0ChShift packed 16-bit integers in a left by the amount \xe2\x80\xa60DfShifts packed 32-bit integers in <code>a</code> left by the amount \xe2\x80\xa60DfShifts packed 64-bit integers in <code>a</code> left by the amount \xe2\x80\xa60EdShifts packed 16-bit integers in <code>a</code> right by <code>IMM8</code> while \xe2\x80\xa60EdShifts packed 32-bit integers in <code>a</code> right by <code>IMM8</code> while \xe2\x80\xa60CiShift packed 64-bit integers in a right by imm8 while \xe2\x80\xa60CiShift packed 16-bit integers in a right by the amount \xe2\x80\xa60DgShifts packed 32-bit integers in <code>a</code> right by the amount \xe2\x80\xa60CiShift packed 64-bit integers in a right by the amount \xe2\x80\xa605544EdShifts packed 64-bit integers in <code>a</code> right by <code>IMM8</code> while \xe2\x80\xa60DoShifts <code>a</code> right by <code>IMM8</code> bytes while shifting in zeros.04433DgShifts packed 64-bit integers in <code>a</code> right by the amount \xe2\x80\xa60DhSubtract packed 16-bit integers in <code>b</code> from packed 16-bit \xe2\x80\xa60DjSubtract packed unsigned 16-bit integers in <code>b</code> from packed \xe2\x80\xa60CfComputes the bitwise AND of 128 bits (representing \xe2\x80\xa6000DmCompares the lower element of <code>a</code> and <code>b</code> for equality.0ClCompare the lower half-precision (16-bit) floating-point \xe2\x80\xa60DhCompares two 32-bit floats from the low-order bits of <code>a</code> \xe2\x80\xa60DgCompares the lower element of <code>a</code> and <code>b</code> for \xe2\x80\xa602211EaCompares the lower element of <code>a</code> and <code>b</code> for greater-than.03322113322DnCompares the lower element of <code>a</code> and <code>b</code> for less-than.04433CkRead a hardware generated 16-bit random value and store \xe2\x80\xa60CkRead a hardware generated 32-bit random value and store \xe2\x80\xa60CkRead a hardware generated 64-bit random value and store \xe2\x80\xa6ChRead a 16-bit NIST SP800-90B and SP800-90C compliant \xe2\x80\xa60ChRead a 32-bit NIST SP800-90B and SP800-90C compliant \xe2\x80\xa60ChRead a 64-bit NIST SP800-90B and SP800-90C compliant \xe2\x80\xa6EgAdds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit \xe2\x80\xa60EgAdds unsigned 64-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit \xe2\x80\xa6CmCompute dot-product of BF16 (16-bit) floating-point pairs \xe2\x80\xa6CmCompute dot-product of FP16 (16-bit) floating-point pairs \xe2\x80\xa6CkRegisters a function to run for every newly thread spawned.AjAdvance a slice of slices.0DcSplits the slice into a slice of <code>N</code>-element arrays, \xe2\x80\xa60DgUnstable module containing the unstable <code>assert_matches</code> \xe2\x80\xa6ChAsserts that an expression matches the provided pattern.10DiCall the <code>AsyncFnMut</code>, returning a future which may borrow \xe2\x80\xa60AgByte character literal.CmReturns the unescaped string value if the current literal \xe2\x80\xa6CjKeeps the item it\xe2\x80\x99s applied to if the passed path is \xe2\x80\xa60CjReturns the base 10 logarithm of the number, rounded down.00000000000000000000000BcA \xe2\x80\x9ccompiler-only\xe2\x80\x9d atomic fence.0EeCreates a new vector from the elements of <code>first</code> and <code>second</code>.00ClAllocates a block of memory at compile time. At runtime, \xe2\x80\xa60FcConverts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if \xe2\x80\xa60ChRecursively create a directory and all of its parent \xe2\x80\xa6CcSets the process creation flags to be passed to \xe2\x80\xa6C`Combine two values which have no bits in common.DbSee <code>super::disjoint_bitor</code>; we just need the trait \xe2\x80\xa610CnReturns the amount of time elapsed from another instant to \xe2\x80\xa6ClReturns the amount of time elapsed from an earlier point \xe2\x80\xa6CfReturns the index that an element reference points to.0CdChecks that two values are a case-insensitive match.0CnReturns an iterator that yields the literal escape code of \xe2\x80\xa6DhReturns an iterator that escapes each char in <code>self</code> with \xe2\x80\xa6CmReturns an iterator that produces an escaped version of a \xe2\x80\xa6210CkReturns an iterator that yields the hexadecimal Unicode \xe2\x80\xa6202CmReserves capacity in a collection for the given number of \xe2\x80\xa600C`Creates a new unsuffixed floating-point literal.0CeFloat addition that allows optimizations based on \xe2\x80\xa60CeFloat division that allows optimizations based on \xe2\x80\xa60DnOffsets the pointer\xe2\x80\x99s address by adding <code>val</code> <em>bytes</em>, \xe2\x80\xa60EcOffsets the pointer\xe2\x80\x99s address by subtracting <code>val</code> <em>bytes</em>, \xe2\x80\xa60CkFloat multiplication that allows optimizations based on \xe2\x80\xa60CjLike <code>forget</code>, but also accepts unsized values.0D`Same as <code>format_args</code>, but adds a newline in the end.0CfFloat remainder that allows optimizations based on \xe2\x80\xa60CiCreates a new iterator where each iteration calls the \xe2\x80\xa60CkGets atomic access to a <code>&amp;mut [bool]</code> slice.BjGets atomic access to a slice of pointers.ChGet atomic access to a <code>&amp;mut [i8]</code> slice.ChGet atomic access to a <code>&amp;mut [u8]</code> slice.CiGet atomic access to a <code>&amp;mut [i16]</code> slice.CiGet atomic access to a <code>&amp;mut [u16]</code> slice.CiGet atomic access to a <code>&amp;mut [i32]</code> slice.CiGet atomic access to a <code>&amp;mut [u32]</code> slice.CiGet atomic access to a <code>&amp;mut [i64]</code> slice.CiGet atomic access to a <code>&amp;mut [u64]</code> slice.CjGet atomic access to a <code>&amp;mut [i128]</code> slice.CjGet atomic access to a <code>&amp;mut [u128]</code> slice.CkGet atomic access to a <code>&amp;mut [isize]</code> slice.CkGet atomic access to a <code>&amp;mut [usize]</code> slice.=<;:9876543210BcForms a slice from a pointer range.00BjForms a slice from a pointer and a length.ClCreates a <code>&amp;str</code> from a pointer and a length.E`Creates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a \xe2\x80\xa6DdCreates a new <code>String</code> from a pointer, a length and a \xe2\x80\xa6CkForms a (possibly-wide) raw pointer from a data pointer \xe2\x80\xa6DkPerforms the same functionality as <code>std::ptr::from_raw_parts</code>\xe2\x80\xa654105432CjParses an integer from a string slice with digits in a \xe2\x80\xa600000000000000000000000ChIndicates the value that should be passed in for the \xe2\x80\xa6ChFloat subtraction that allows optimizations based on \xe2\x80\xa60CeGet read-write access to the contents of a pinned \xe2\x80\xa60CeCreates a new unsuffixed integer literal with the \xe2\x80\xa6ChReturns true if all lanes are non-zero, false otherwise.0010001000000ChConverts this <code>String</code> into a Box&lt;str&gt;.0EhTakes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.0E`Converts a Box&lt;OsStr&gt; into an <code>OsString</code> without copying or \xe2\x80\xa6EbConsumes the <code>PathBuf</code>, yielding its internal <code>OsString</code> \xe2\x80\xa6C`Consumes the thread, returning the raw pthread_tDcDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: \xe2\x80\xa6CmDecomposes a <code>String</code> into its raw components: \xe2\x80\xa610CkReturns the remainder of the original slice that is not \xe2\x80\xa60CjReturns an iterator over the remaining elements of the \xe2\x80\xa611011CmChecks if the value is an ASCII decimal digit: U+0030 \xe2\x80\x980\xe2\x80\xa6000CmReturns <code>true</code> if this file type is a char device.DbReturns <code>true</code> if this file type is a character device.DgReturns <code>true</code> if the address is an IPv4-mapped address (\xe2\x80\xa60FbReturns <code>true</code> if <code>self</code> is an integer multiple of <code>rhs</code>, and \xe2\x80\xa600000000000E`Returns <code>true</code> if <code>self</code> overlaps with <code>other</code>.CkChecks if the elements of this iterator are partitioned \xe2\x80\xa600BoChecks if the value is a punctuation character:0DjReturns <code>true</code> if this file type is a symbolic link that is \xe2\x80\xa6DdReturns <code>true</code> for the special \xe2\x80\x98unspecified\xe2\x80\x99 address.DhReturns <code>true</code> for the special \xe2\x80\x98unspecified\xe2\x80\x99 address (\xe2\x80\xa6EgReturns <code>true</code> for the special \xe2\x80\x98unspecified\xe2\x80\x99 address (<code>::</code>\xe2\x80\xa6210CmCreates a new suffixed integer literal with the specified \xe2\x80\xa6AiCreates a junction point.DiReturns a mutable array reference to the last <code>N</code> items in \xe2\x80\xa60CjReturns the last key-value pair in the map. The key in \xe2\x80\xa60CjConverts this value to its lower case equivalent in-place.0CjConverts this value to its upper case equivalent in-place.0FgMaps an <code>Option&lt;T&gt;</code> to a <code>U</code> by applying function <code>f</code> to the \xe2\x80\xa6FiMaps a <code>Result&lt;T, E&gt;</code> to a <code>U</code> by applying function <code>f</code> to the \xe2\x80\xa610CkScaled median of the absolute deviations of each sample \xe2\x80\xa6CnEnsures a value is in the entry by inserting the result of \xe2\x80\xa600DfLike <code>panic</code>, but without unwinding and track_caller to \xe2\x80\xa6DhThis exists solely for the 2015 edition <code>panic!</code> macro to \xe2\x80\xa6DiLexicographically compares the elements of this <code>Iterator</code> \xe2\x80\xa600CmReturns the payload associated with the panic, if it is a \xe2\x80\xa6CiAdds an element to the front of the list, returning a \xe2\x80\xa6CnPrepends an element to the deque, returning a reference to \xe2\x80\xa610DeReads the exact number of bytes required to fill <code>cursor</code>.CbReads the entire contents of a file into a string.CmReads all bytes from a reader into a new <code>String</code>.DkThis function is not supported by <code>io::Repeat</code>, because there\xe2\x80\xa6ClReads all bytes until EOF in this source, appending them \xe2\x80\xa6DiReads the value from <code>self</code> without moving it. This leaves \xe2\x80\xa60DhReads the value from <code>src</code> without moving it. This leaves the11101CnReducing multiply.  Returns the product of the elements of \xe2\x80\xa6CkReturns the product of the elements of the vector, with \xe2\x80\xa60100100CmRemoves the current element from the <code>LinkedList</code>.0ClRemoves a directory at this path, after removing all its \xe2\x80\xa6DjRemove all matches of pattern <code>pat</code> in the <code>String</code>.0CnReturns an iterator over the disjoint matches of a pattern \xe2\x80\xa60DjSaturating absolute value. Computes <code>self.abs()</code>, returning \xe2\x80\xa600000ClLanewise saturating absolute value, implemented in Rust. \xe2\x80\xa6D`Saturating absolute value, see <code>i64::saturating_abs</code>.D`Saturating absolute value, see <code>i32::saturating_abs</code>.DaSaturating absolute value, see <code>i128::saturating_abs</code>.CoSaturating absolute value, see <code>i8::saturating_abs</code>.DbSaturating absolute value, see <code>isize::saturating_abs</code>.D`Saturating absolute value, see <code>i16::saturating_abs</code>.77777766503241DbSaturating integer addition. Computes <code>self + rhs</code>, \xe2\x80\xa600000000000CjComputes <code>a + b</code>, saturating at numeric bounds.AhLanewise saturating add.0ChAdds an unsigned integer to a non-zero value. Return \xe2\x80\xa600000EbSaturating <code>Duration</code> addition. Computes <code>self + other</code>, \xe2\x80\xa6444444444444322221111110DbSaturating integer division. Computes <code>self / rhs</code>, \xe2\x80\xa600000000000000000000000DhSaturating integer multiplication. Computes <code>self * rhs</code>, \xe2\x80\xa600000000000CeMultiplies two non-zero integers together. Return \xe2\x80\xa600000000000EhSaturating <code>Duration</code> multiplication. Computes <code>self * other</code>, \xe2\x80\xa62222222222221111111111110EhSaturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> \xe2\x80\xa600000CiLanewise saturating negation, implemented in Rust. As \xe2\x80\xa6CoSaturating negation. Computes <code>-self</code>, returning \xe2\x80\xa60000022222211000000DkSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, \xe2\x80\xa600000000000CdRaise non-zero value to an integer power. Return \xe2\x80\xa600000000000111111111111000000000000DeSaturating integer subtraction. Computes <code>self - rhs</code>, \xe2\x80\xa600000000000CjComputes <code>a - b</code>, saturating at numeric bounds.AmLanewise saturating subtract.0EeSaturating <code>Duration</code> subtraction. Computes <code>self - other</code>, \xe2\x80\xa6333333333333211110ClWrites values from a SIMD vector to multiple potentially \xe2\x80\xa60CmSupervisor memory management fence for all address spaces \xe2\x80\xa60CeGenerates the <code>SFENCE.W.INVAL</code> instruction0CkDisplay backtrace if available when using pretty output \xe2\x80\xa6BhLogical \xe2\x80\x9cors\xe2\x80\x9d all elements together.0CkInvalidate supervisor translation cache for all address \xe2\x80\xa60CgSignals the processor that it is inside a busy-wait \xe2\x80\xa60ClReturns the last and all the rest of the elements of the \xe2\x80\xa60CgRemoves the last element of the slice and returns a \xe2\x80\xa60ChIf the process was stopped by a signal, returns that \xe2\x80\xa6CgReturns the range of indices that a subslice points to.0CiSwaps two elements in the slice, without doing bounds \xe2\x80\xa60BiTests the value of the specified element.0DfConverts this address to an <code>IPv4</code> address if it\xe2\x80\x99s an \xe2\x80\xa60DbConverts this address to an IPv4-mapped <code>IPv6</code> address.0CfReturns the number of trailing zeros in the binary \xe2\x80\xa600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FeInterprets <code>src</code> as having type <code>&amp;Dst</code>, and then reads <code>src</code> \xe2\x80\xa60CmReturns a byte slice with trailing ASCII whitespace bytes \xe2\x80\xa6CiReturns a string slice with trailing ASCII whitespace \xe2\x80\xa610DfShortens the deque, keeping the last <code>len</code> elements and \xe2\x80\xa60ClMutably borrows the wrapped value, returning an error if \xe2\x80\xa60DbConstructs a new <code>Arc</code> with uninitialized contents, \xe2\x80\xa6CkConstructs a new box with uninitialized contents on the \xe2\x80\xa6DkConstructs a new <code>Rc</code> with uninitialized contents, returning \xe2\x80\xa6210DkConstructs a new <code>Arc</code> with uninitialized contents, with the \xe2\x80\xa6DkConstructs a new <code>Box</code> with uninitialized contents, with the \xe2\x80\xa6DjConstructs a new <code>Rc</code> with uninitialized contents, with the \xe2\x80\xa6210CeCreates a new unsuffixed integer literal with the \xe2\x80\xa6ChReturns true if all lanes are non-zero, false otherwise.0010001000000DgReturns the contained <code>Some</code> value or computes it from a \xe2\x80\xa6DeReturns the contained <code>Ok</code> value or computes it from a \xe2\x80\xa610CmCreates a new suffixed integer literal with the specified \xe2\x80\xa6FdUse the bitmask in <code>c</code> to select bits from <code>v1</code> when 1 and <code>v2</code> \xe2\x80\xa600CjSigned Absolute difference and Accumulate Long Arm\xe2\x80\x99s \xe2\x80\xa60ClUnsigned Absolute difference and Accumulate Long Arm\xe2\x80\x99s \xe2\x80\xa60CeSigned Absolute difference Long Arm\xe2\x80\x99s documentation0CgUnsigned Absolute difference Long Arm\xe2\x80\x99s documentation0CjSigned Add Long (vector, high half). Arm\xe2\x80\x99s documentation0000000BkAdd Wide (high half). Arm\xe2\x80\x99s documentation0000000CfFloating-point complex multiply accumulate Arm\xe2\x80\x99s \xe2\x80\xa60CmInsert vector element from another vector element Arm\xe2\x80\x99s \xe2\x80\xa6BlDuplicate vector element to vector or scalar10110110111111CkFixed-point convert to floating-point Arm\xe2\x80\x99s documentation000000000ChFloating-point convert to signed fixed-point Arm\xe2\x80\x99s \xe2\x80\xa60CkFloating-point convert to fixed-point, rounding toward zero00CiFixed-point convert to unsigned fixed-point, rounding \xe2\x80\xa60111CjFloating-point convert to integer, rounding to nearest \xe2\x80\xa60000000CiFloating-point convert to signed integer, rounding to \xe2\x80\xa600CkFloating-point convert to unsigned integer, rounding to \xe2\x80\xa60022CmFloating-point convert to signed integer, rounding toward \xe2\x80\xa6ChFloating-point convert to unsigned integer, rounding \xe2\x80\xa6CmFloating-point convert to integer, rounding towards minus \xe2\x80\xa60001122211121435553334443334321CgFloating-point convert to integer, rounding to plus \xe2\x80\xa600444CnFloating-point convert to signed integer, rounding to plus \xe2\x80\xa64453343CnFloating-point convert to lower precision narrow, rounding \xe2\x80\xa6CfDot product arithmetic (indexed) Arm\xe2\x80\x99s documentation00000CbSet all vector lanes to the same value Arm\xe2\x80\x99s \xe2\x80\xa60000000000000000000CfExtract an element from a vector Arm\xe2\x80\x99s documentation00111111111111111111111111111111111111CeVector Add With Carry Compute Carry unsigned 128-bitsAbVector Bit PermuteBbVector Compare Not in Ranges IndexB`Vector Sign Extend to DoublewordAkVector Generate Mask (Byte)BiVector Galois Field Multiply Sum 128-bitsAmVector Load to Block BoundaryBaVector Load Rightmost with LengthBgVector Subtract with Carryout, CarryoutClFloating-point fused multiply-add to accumulator Arm\xe2\x80\x99s \xe2\x80\xa600000000CiFloating-point fused Multiply-Add Long to accumulator \xe2\x80\xa6CdFloating-point fused Multiply-Subtract Long from \xe2\x80\xa6CnFloating-point fused multiply-subtract from accumulator Arm\xe2\x80\xa6ClFloating-point fused multiply-subtract to accumulator Arm\xe2\x80\xa60011000ChDuplicate vector element to scalar Arm\xe2\x80\x99s documentation0CkMove vector element to general-purpose register Arm\xe2\x80\x99s \xe2\x80\xa60BlDuplicate vector element to vector or scalar1111111111111111ChLoad one single-element structure to one lane of one \xe2\x80\xa600000000000000000000CmLoad multiple 2-element structures to two registers Arm\xe2\x80\x99\xe2\x80\xa600000000000000000CmLoad multiple 3-element structures to two registers Arm\xe2\x80\x99\xe2\x80\xa60ClLoad multiple 3-element structures to three registers Arm\xe2\x80\xa6000001111100000CmLoad multiple 4-element structures to two registers Arm\xe2\x80\x99\xe2\x80\xa60CnLoad multiple 4-element structures to four registers Arm\xe2\x80\x99\xe2\x80\xa6000000000000000CjLookup table read with 2-bit indices Arm\xe2\x80\x99s documentation00CbVector multiply accumulate with scalar Arm\xe2\x80\x99s \xe2\x80\xa6000000000BnSigned multiply-add long Arm\xe2\x80\x99s documentation0C`Unsigned multiply-add long Arm\xe2\x80\x99s documentation0CkVector widening multiply accumulate with scalar Arm\xe2\x80\x99s \xe2\x80\xa600000003333333333CjVector multiply subtract with scalar Arm\xe2\x80\x99s documentation000000000CcSigned multiply-subtract long Arm\xe2\x80\x99s documentation0CeUnsigned multiply-subtract long Arm\xe2\x80\x99s documentation0CiVector widening multiply subtract with scalar Arm\xe2\x80\x99s \xe2\x80\xa600000003333333333BaVector move Arm\xe2\x80\x99s documentation000BdExtract narrow Arm\xe2\x80\x99s documentation00000BmFloating-point multiply Arm\xe2\x80\x99s documentation000AnMultiply Arm\xe2\x80\x99s documentation000000011BnPolynomial multiply long Arm\xe2\x80\x99s documentationBjSigned multiply long Arm\xe2\x80\x99s documentation0BlUnsigned multiply long Arm\xe2\x80\x99s documentation0CdVector long multiply by scalar Arm\xe2\x80\x99s documentation000000044555444444445CfFloating-point multiply extended Arm\xe2\x80\x99s documentation00CjPerforms a volatile store to the <code>dst</code> pointer.0CnVector saturating doubling multiply high with scalar Arm\xe2\x80\x99\xe2\x80\xa6000CjVector saturating rounding doubling multiply high with \xe2\x80\xa6000ChSigned saturating rounded shift right narrow Arm\xe2\x80\x99s \xe2\x80\xa6CjUnsigned saturating rounded shift right narrow Arm\xe2\x80\x99s \xe2\x80\xa61010ClSigned saturating rounded shift right unsigned narrow Arm\xe2\x80\xa600000CiSigned saturating shift right unsigned narrow Arm\xe2\x80\x99s \xe2\x80\xa600CmInsert vector element from another vector element Arm\xe2\x80\x99s \xe2\x80\xa600000000000000000000CiSHA1 schedule update accelerator, upper part. Arm\xe2\x80\x99s \xe2\x80\xa60BoSHA512 hash update part 2 Arm\xe2\x80\x99s documentationCkStore multiple single-element structures from one, two, \xe2\x80\xa600000000000000000000CmStore multiple 2-element structures from two registers Arm\xe2\x80\xa600000000000000000ClStore multiple 3-element structures from three registers \xe2\x80\xa600000000000000000CnStore multiple 4-element structures from four registers Arm\xe2\x80\xa600000000000000000BjSigned Subtract Long Arm\xe2\x80\x99s documentation0BlUnsigned Subtract Long Arm\xe2\x80\x99s documentation0BjSigned Subtract Wide Arm\xe2\x80\x99s documentation0BlUnsigned Subtract Wide Arm\xe2\x80\x99s documentation0EcCreates an owned <code>PathBuf</code> like <code>self</code> but with the given \xe2\x80\xa6EhCreates an owned <code>PathBuf</code> like <code>self</code> but with the given file \xe2\x80\xa6DgLike <code>write</code>, except that it writes into a slice of buffers.DgLike <code>write</code>, except that it writes from a slice of buffers.DjThis is an implementation detail of <code>crate::ptr::write</code> and \xe2\x80\xa60CkPerforms a volatile write of a memory location with the \xe2\x80\xa600000ClA marker trait for primitive types which can be modified \xe2\x80\xa60ClThe current status of a backtrace, indicating whether it \xe2\x80\xa6BnThe connection was reset by the remote server.Da<code>DispatchFromDyn</code> is used in the implementation of \xe2\x80\xa60CgProcess exit code to be used to indicate test failures.fU+00210CeDescribes the result of a process after it has failedk1/sqrt(2\xcf\x80)0000000fU+003E0ClFFI type for handles in return values or out parameters, \xe2\x80\xa6BaThe remote host is not reachable.DhIntegration-style tests are expected to be in the <code>tests</code> \xe2\x80\xa60CkAn iterator adapter that places a separator between all \xe2\x80\xa60DkAn error indicating invalid UTF-8 when converting a <code>CString</code>\xe2\x80\xa6000AgA filename was invalid.fU+00280BgNumber of significant digits in base 2.000BoNumber of significant digits in base 2. Use \xe2\x80\xa60111100BlExpected 1 char, but more than 1 were found.DaThis is the error type used by <code>HandleOrNull</code> when \xe2\x80\xa6CdAn error which can be returned when parsing a float.0CmA structure wrapping a Windows path prefix as well as its \xe2\x80\xa6CiAn iterator over a slice in (non-overlapping) mutable \xe2\x80\xa600BhA reverse searcher for a string pattern.00CnRAII structure used to release the shared read access of a \xe2\x80\xa600BdA Unix socket Ancillary data struct.CfCreated with the method <code>split_terminator</code>.00CkAn iterator over the non-whitespace substrings of a string,00fU+00160EcAn error returned from the <code>duration_since</code> and <code>elapsed</code> \xe2\x80\xa6ClStructure with parameters for calculating test execution \xe2\x80\xa6ChThe error type returned when a checked integral type \xe2\x80\xa60CdThe error type for <code>try_reserve</code> methods.0DjThe version of Unicode that the Unicode parts of <code>char</code> and \xe2\x80\xa6000BoAn unwind action that terminates the execution.0DdThe <code>_MM_CMPINT_ENUM</code> type used to specify comparison \xe2\x80\xa60dTrue0BhSee <code>_MM_GET_EXCEPTION_STATE</code>0Bground up and do not suppress exceptions0Boround to nearest and do not suppress exceptions0Cduse MXCSR.RC and do not suppress exceptions; see \xe2\x80\xa60AkSee <code>_mm_setcsr</code>0AjSee <code>prefetch</code>.BgString contains signed 8-bit characters0BjString contains unsigned 16-bit characters0ClString contains unsigned 8-bit characters <em>(Default)</em>0C`<strong>Mask only</strong>: return the byte mask022BjTransaction executed a TCANCEL instructionCnTransaction aborted due to transactional nesting level was \xe2\x80\xa6AnTransaction retry is possible.CjTransaction aborted due to read or write set limit was \xe2\x80\xa6BaTransaction successfully started.0FdReturns the highest-supported <code>leaf</code> (<code>EAX</code>) and sub-leaf (<code>ECX</code>\xe2\x80\xa60CkShift 8-bit mask a left by count bits while shifting in \xe2\x80\xa60ClShift 8-bit mask a right by count bits while shifting in \xe2\x80\xa60CnCompute the bitwise AND of 8-bit masks a and b, and if the \xe2\x80\xa60DhComputes the absolute values of packed 8-bit integers in <code>a</code>.0D`Adds packed 8-bit integers in <code>a</code> and <code>b</code>.0DmAverages packed unsigned 8-bit integers in <code>a</code> and <code>b</code>.0CjBlends packed double-precision (64-bit) floating-point \xe2\x80\xa60CjBlends packed single-precision (32-bit) floating-point \xe2\x80\xa60CgMultiply packed complex numbers in a by the complex \xe2\x80\xa60CkCompute the complex conjugates of complex numbers in a, \xe2\x80\xa60CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa60ClConverts packed double-precision (64-bit) floating-point \xe2\x80\xa60CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa60CnConverts the 8 x 16-bit half-precision float values in the \xe2\x80\xa60ClConverts packed single-precision (32-bit) floating-point \xe2\x80\xa60CnConverts the 8 x 32-bit float values in the 256-bit vector \xe2\x80\xa60CjRounds packed double-precision (64-bit) floating point \xe2\x80\xa60CjRounds packed single-precision (32-bit) floating point \xe2\x80\xa60CnMultiplies packed double-precision (64-bit) floating-point \xe2\x80\xa60CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa60CnMultiplies packed single-precision (32-bit) floating-point \xe2\x80\xa60221100CmMultiply packed complex numbers in a and b, and store the \xe2\x80\xa60CiLoads 256-bits (composed of 4 packed double-precision \xe2\x80\xa60CgLoad 256-bits (composed of 16 packed half-precision \xe2\x80\xa60CiLoads 256-bits (composed of 8 packed single-precision \xe2\x80\xa60EhCompares packed 8-bit integers in <code>a</code> and <code>b</code>, and returns the \xe2\x80\xa60EeCompares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and \xe2\x80\xa601100CmCompute the bitwise OR of packed 32-bit integers in a and \xe2\x80\xa60CmCompute the bitwise OR of packed 64-bit integers in a and \xe2\x80\xa60CmComputes the bitwise OR of 256 bits (representing integer \xe2\x80\xa60CiCalculate the max, min, absolute max, or absolute min \xe2\x80\xa6000C`Compute the approximate reciprocal of packed \xe2\x80\xa6000??>>ClCompute the approximate reciprocal square root of packed \xe2\x80\xa60CmComputes the approximate reciprocal square root of packed \xe2\x80\xa60CnComputes the absolute differences of packed unsigned 8-bit \xe2\x80\xa60CjSets packed 8-bit integers in returned vector with the \xe2\x80\xa60ChSets packed __m256 returned vector with the supplied \xe2\x80\xa60CjStores 256-bits (composed of 4 packed double-precision \xe2\x80\xa60ChStore 256-bits (composed of 16 packed half-precision \xe2\x80\xa60CjStores 256-bits (composed of 8 packed single-precision \xe2\x80\xa60DfSubtract packed 8-bit integers in <code>b</code> from packed 8-bit \xe2\x80\xa60CfComputes the bitwise AND of 256 bits (representing \xe2\x80\xa60000000CnCompute the absolute value of packed signed 8-bit integers \xe2\x80\xa60CgAdd packed 8-bit integers in a and b, and store the \xe2\x80\xa60CjAverage packed unsigned 8-bit integers in a and b, and \xe2\x80\xa60CgMultiply packed complex numbers in a by the complex \xe2\x80\xa60CkCompute the complex conjugates of complex numbers in a, \xe2\x80\xa60CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa6000CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa6000CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa6000ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa60CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa60ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa60221100CmMultiply packed complex numbers in a and b, and store the \xe2\x80\xa60CmConverts integer mask into bitmask, storing the result in \xe2\x80\xa60CmPerforms bitwise OR between k1 and k2, storing the result \xe2\x80\xa6000CnUnpack and interleave 8 bits from masks a and b, and store \xe2\x80\xa60CiUnpack and interleave 32 bits from masks a and b, and \xe2\x80\xa60CiUnpack and interleave 16 bits from masks a and b, and \xe2\x80\xa60CiLoads 512-bits (composed of 8 packed double-precision \xe2\x80\xa60CgLoad 512-bits (composed of 32 packed half-precision \xe2\x80\xa60CjLoads 512-bits (composed of 16 packed single-precision \xe2\x80\xa60CkConverts bit mask k1 into an integer value, storing the \xe2\x80\xa60CnCompare packed signed 8-bit integers in a and b, and store \xe2\x80\xa60CjCompare packed unsigned 8-bit integers in a and b, and \xe2\x80\xa601100CmCompute the bitwise OR of packed 32-bit integers in a and \xe2\x80\xa60CmCompute the bitwise OR of packed 64-bit integers in a and \xe2\x80\xa60ClCompute the bitwise OR of 512 bits (representing integer \xe2\x80\xa60CiCalculate the max, min, absolute max, or absolute min \xe2\x80\xa6000C`Compute the approximate reciprocal of packed \xe2\x80\xa6000ClCompute the approximate reciprocal square root of packed \xe2\x80\xa60CmCompute the absolute differences of packed unsigned 8-bit \xe2\x80\xa60CjSet packed 8-bit integers in dst with the supplied values.0CgSet packed double-precision (64-bit) floating-point \xe2\x80\xa60CgSet packed single-precision (32-bit) floating-point \xe2\x80\xa60CiStore 512-bits (composed of 8 packed double-precision \xe2\x80\xa60ChStore 512-bits (composed of 32 packed half-precision \xe2\x80\xa60CfStore 512-bits of integer data from a into memory. \xe2\x80\xa60CiSubtract packed 8-bit integers in b from packed 8-bit \xe2\x80\xa60EbConcatenate 16-byte blocks in <code>a</code> and <code>b</code> into a 32-byte \xe2\x80\xa60CiConvert scalar half-precision (16-bit) floating-point \xe2\x80\xa60EfBlend packed 16-bit integers from <code>a</code> and <code>b</code> using the mask \xe2\x80\xa60EfBlends packed 32-bit integers from <code>a</code> and <code>b</code> using control \xe2\x80\xa60EjBlend packed 8-bit integers from <code>a</code> and <code>b</code> using <code>mask</code>0DnShifts <code>a</code> left by <code>IMM8</code> bytes while shifting in zeros.0DoShifts <code>a</code> right by <code>IMM8</code> bytes while shifting in zeros.0CkCompare packed double-precision (64-bit) floating-point \xe2\x80\xa60CiCompare packed half-precision (16-bit) floating-point \xe2\x80\xa60CkCompare packed single-precision (32-bit) floating-point \xe2\x80\xa60CnCompare the lower double-precision (64-bit) floating-point \xe2\x80\xa60ClCompare the lower half-precision (16-bit) floating-point \xe2\x80\xa60CnCompare the lower single-precision (32-bit) floating-point \xe2\x80\xa60EbCompares packed 16-bit integers in <code>a</code> and <code>b</code> for equality.0EbCompares packed 32-bit integers in <code>a</code> and <code>b</code> for equality.0EaCompares packed 64-bit integers in <code>a</code> and <code>b</code> for equality0DlCompares packed 16-bit integers in <code>a</code> and <code>b</code> for \xe2\x80\xa60DlCompares packed 32-bit integers in <code>a</code> and <code>b</code> for \xe2\x80\xa60DlCompares packed 64-bit integers in <code>a</code> and <code>b</code> for \xe2\x80\xa60EcCompares packed 16-bit integers in <code>a</code> and <code>b</code> for less-than.0EcCompares packed 32-bit integers in <code>a</code> and <code>b</code> for less-than.0EbCompares corresponding elements in <code>a</code> and <code>b</code> to see if \xe2\x80\xa60DkCompares each of the four floats in <code>a</code> to the corresponding \xe2\x80\xa60DkReturns a new vector with the low element of <code>a</code> replaced by \xe2\x80\xa60DkChecks if the lowest <code>f32</code> of both inputs are unordered. The \xe2\x80\xa60ChConvert packed signed 16-bit integers in a to packed \xe2\x80\xa60DfConverts the lower two packed 32-bit integers in <code>a</code> to \xe2\x80\xa60ChConvert packed signed 32-bit integers in a to packed \xe2\x80\xa60CoConverts packed 32-bit integers in <code>a</code> to packed \xe2\x80\xa60ChConvert packed signed 64-bit integers in a to packed \xe2\x80\xa600000CjConvert packed unsigned 16-bit integers in a to packed \xe2\x80\xa60CjConvert packed unsigned 32-bit integers in a to packed \xe2\x80\xa6000CjConvert packed unsigned 64-bit integers in a to packed \xe2\x80\xa600000CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa6000ClConverts packed single-precision (32-bit) floating-point \xe2\x80\xa60CgConverts a single-precision (32-bit) floating-point \xe2\x80\xa60ClConverts packed double-precision (64-bit) floating-point \xe2\x80\xa60CkConvert packed double-precision (64-bit) floating-point \xe2\x80\xa60000044444444444433CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa600000BeAlias for <code>_mm_cvtsd_si64</code>EbReturns <code>a</code> with its lower element replaced by <code>b</code> after \xe2\x80\xa6C`Converts the lower double-precision (64-bit) \xe2\x80\xa600CmConverts the lowest 32 bit float in the input vector to a \xe2\x80\xa600CjFix up packed double-precision (64-bit) floating-point \xe2\x80\xa60CjFix up packed single-precision (32-bit) floating-point \xe2\x80\xa60CmFix up the lower double-precision (64-bit) floating-point \xe2\x80\xa60CmFix up the lower single-precision (32-bit) floating-point \xe2\x80\xa60CnMultiplies packed double-precision (64-bit) floating-point \xe2\x80\xa60CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa60CnMultiplies packed single-precision (32-bit) floating-point \xe2\x80\xa60221100ClHorizontally adds the adjacent pairs of values contained \xe2\x80\xa60CfHorizontally subtract the adjacent pairs of values \xe2\x80\xa60EhReturns a copy of <code>a</code> with the 8-bit integer from <code>i</code> inserted \xe2\x80\xa60FeInserts the <code>[length:0]</code> bits of <code>y</code> into <code>x</code> at <code>index</code>.0CnLoads 128-bits of integer data from unaligned memory. This \xe2\x80\xa60CjLoads 64-bit integer from memory into first element of \xe2\x80\xa60CmLoad 128-bits (composed of 8 packed 16-bit integers) from \xe2\x80\xa60CmLoad 128-bits (composed of 4 packed 32-bit integers) from \xe2\x80\xa60CmLoad 128-bits (composed of 2 packed 64-bit integers) from \xe2\x80\xa60CiLoads 128-bits of integer data from memory into a new \xe2\x80\xa60CiCounts the number of leading zero bits in each packed \xe2\x80\xa6000CgAdd packed double-precision (64-bit) floating-point \xe2\x80\xa60CnAdd packed half-precision (16-bit) floating-point elements \xe2\x80\xa60CgAdd packed single-precision (32-bit) floating-point \xe2\x80\xa60CjAdd the lower double-precision (64-bit) floating-point \xe2\x80\xa60ChAdd the lower half-precision (16-bit) floating-point \xe2\x80\xa60CjAdd the lower single-precision (32-bit) floating-point \xe2\x80\xa60CfCompute the bitwise AND of packed double-precision \xe2\x80\xa60CfCompute the bitwise AND of packed single-precision \xe2\x80\xa60CjDivide packed double-precision (64-bit) floating-point \xe2\x80\xa60ChDivide packed half-precision (16-bit) floating-point \xe2\x80\xa60CjDivide packed single-precision (32-bit) floating-point \xe2\x80\xa60CmDivide the lower double-precision (64-bit) floating-point \xe2\x80\xa60CkDivide the lower half-precision (16-bit) floating-point \xe2\x80\xa60CmDivide the lower single-precision (32-bit) floating-point \xe2\x80\xa60CkCompare packed double-precision (64-bit) floating-point \xe2\x80\xa60CiCompare packed half-precision (16-bit) floating-point \xe2\x80\xa60CkCompare packed single-precision (32-bit) floating-point \xe2\x80\xa60CnCompare the lower double-precision (64-bit) floating-point \xe2\x80\xa60ClCompare the lower half-precision (16-bit) floating-point \xe2\x80\xa60CnCompare the lower single-precision (32-bit) floating-point \xe2\x80\xa60554433221100ChMove packed double-precision (64-bit) floating-point \xe2\x80\xa60ChMove packed single-precision (32-bit) floating-point \xe2\x80\xa60ClMultiply packed double-precision (64-bit) floating-point \xe2\x80\xa60CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa60ClMultiply packed single-precision (32-bit) floating-point \xe2\x80\xa60C`Multiply the lower double-precision (64-bit) \xe2\x80\xa60CmMultiply the lower half-precision (16-bit) floating-point \xe2\x80\xa60C`Multiply the lower single-precision (32-bit) \xe2\x80\xa60CgCompute the approximate reciprocal of packed 16-bit \xe2\x80\xa60CcCompute the approximate reciprocal of the lower \xe2\x80\xa60ClSubtract packed double-precision (64-bit) floating-point \xe2\x80\xa60CjSubtract packed half-precision (16-bit) floating-point \xe2\x80\xa60ClSubtract packed single-precision (32-bit) floating-point \xe2\x80\xa60C`Subtract the lower double-precision (64-bit) \xe2\x80\xa60CmSubtract the lower half-precision (16-bit) floating-point \xe2\x80\xa60C`Subtract the lower single-precision (32-bit) \xe2\x80\xa60CfCompute the bitwise XOR of packed double-precision \xe2\x80\xa60CfCompute the bitwise XOR of packed single-precision \xe2\x80\xa60CiLoads packed double-precision (64-bit) floating-point \xe2\x80\xa60CiLoads packed single-precision (32-bit) floating-point \xe2\x80\xa60CnCompute the bitwise OR of packed double-precision (64-bit) \xe2\x80\xa60CnCompute the bitwise OR of packed single-precision (32-bit) \xe2\x80\xa60CcDuplicate odd-indexed single-precision (32-bit) \xe2\x80\xa60CdDuplicate even-indexed single-precision (32-bit) \xe2\x80\xa60CnReturns a mask of the most significant bit of each element \xe2\x80\xa6000DkMultiplies the packed 16-bit integers in <code>a</code> and <code>b</code>.0EdMultiplies the packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.011DoMultiplies the packed 32-bit integers in <code>a</code> and <code>b</code>, \xe2\x80\xa60EcMultiply packed 64-bit integers in <code>a</code> and <code>b</code>, producing \xe2\x80\xa60EdConverts packed 16-bit integers from <code>a</code> and <code>b</code> to packed \xe2\x80\xa60EdConverts packed 32-bit integers from <code>a</code> and <code>b</code> to packed \xe2\x80\xa60CnFor each packed 8-bit integer maps the value to the number \xe2\x80\xa60CiBroadcasts 64-bit integer <code>a</code> to all elements.0CnConcatenate packed 16-bit integers in a and b producing an \xe2\x80\xa60CnConcatenate packed 32-bit integers in a and b producing an \xe2\x80\xa60CnConcatenate packed 64-bit integers in a and b producing an \xe2\x80\xa60221100CnConcatenate packed 16-bit integers in b and a producing an \xe2\x80\xa60CnConcatenate packed 32-bit integers in b and a producing an \xe2\x80\xa60CnConcatenate packed 64-bit integers in b and a producing an \xe2\x80\xa60221100CnStore 128-bits (composed of 4 packed 32-bit integers) from \xe2\x80\xa60CnStore 128-bits (composed of 2 packed 64-bit integers) from \xe2\x80\xa60D`Stores 128-bits of integer data from <code>a</code> into memory.0CnStore 128-bits (composed of 16 packed 8-bit integers) from \xe2\x80\xa60CiStore 16-bit integer from the first element of a into \xe2\x80\xa60CiStore 32-bit integer from the first element of a into \xe2\x80\xa60CiStore 64-bit integer from the first element of a into \xe2\x80\xa60CiStores a 32-bit integer value in the specified memory \xe2\x80\xa60CiStores a 64-bit integer value in the specified memory \xe2\x80\xa6CiTests whether the specified bits in a 128-bit integer \xe2\x80\xa6000DnCompares the lower element of <code>a</code> and <code>b</code> for not-equal.0ClCompare the lower half-precision (16-bit) floating-point \xe2\x80\xa60DhCompares two 32-bit floats from the low-order bits of <code>a</code> \xe2\x80\xa60DkThe resulting <code>__m128d</code> element is composed by the low-order \xe2\x80\xa60CdUnpacks and interleave single-precision (32-bit) \xe2\x80\xa60DaThe resulting <code>__m128d</code> element is composed by the \xe2\x80\xa6011CoAdvances the iterator from the back by <code>n</code> elements.00DjBehaves like <code>allocate</code>, but also ensures that the returned \xe2\x80\xa600CcReturns a non-null pointer to the slice\xe2\x80\x99s buffer.0DgReturns <code>None</code> if the pointer is null, or else returns a \xe2\x80\xa60CeReturns a shared reference to a slice of possibly \xe2\x80\xa6110BoReturns the pattern as utf-8 bytes if possible.00CiGets a mutable (unique) reference to the contained value.000BoGets a shared reference to the contained value.000DhCall the <code>AsyncFnOnce</code>, returning a future which may move \xe2\x80\xa60DiPerforms the same function as <code>call_once()</code> except ignores \xe2\x80\xa6DjGets a reference to a static <code>Location</code> indicating where it \xe2\x80\xa60DePerforms copy-assignment from <code>self</code> to <code>dest</code>.0CgOpens a TCP connection to a remote host with a timeout.CiThis function is used instead of panic_fmt in const eval.CjReturns whether we should perform contract-checking at \xe2\x80\xa60EaCopies all elements from <code>src</code> into <code>self</code>, using a memcpy.0BoOpens a file in write-only mode with buffering.CiProvides a cursor with editing operations at the back \xe2\x80\xa60CeAsserts that two expressions are equal to each other.0CiAsserts that two expressions are not equal to each other.0GgWhen passed the <em>number</em> <code>0</code>, <code>1</code>, \xe2\x80\xa6, <code>9</code>, returns the <em>character</em> \xe2\x80\xa60ClDenotes if the test critical execution time limit excess \xe2\x80\xa6DhReturns the value of the <code>dwFileAttributes</code> field of this \xe2\x80\xa6DjReturns a mutable array reference to the first <code>N</code> items in \xe2\x80\xa60CkReturns the first key-value pair in the map. The key in \xe2\x80\xa60CjReturns the value that would be obtained by taking the \xe2\x80\xa6000DdCreates a new <code>Duration</code> from the specified number of \xe2\x80\xa60CjConstructs a new I/O object from the specified raw handle.EhConstructs a new instance of <code>Self</code> from the given <code>RawHandle</code> \xe2\x80\xa60CjConstructs a new I/O object from the specified raw socket.EnConstructs a <code>Layout</code> from a given <code>size</code> and <code>align</code>, or \xe2\x80\xa600ClConverts a slice of bytes to a string, including invalid \xe2\x80\xa60CdReturns the working directory for the child process.CkGets the mutable reference of the contents of the cell, \xe2\x80\xa600DiGets the contents of the cell, initializing it to <code>f()</code> if \xe2\x80\xa600CfHypervisor memory management fence for all virtual \xe2\x80\xa60ClHypervisor memory management fence for all guest address \xe2\x80\xa60CkInvalidate hypervisor translation cache for all virtual \xe2\x80\xa60CiInvalidate hypervisor translation cache for all guest \xe2\x80\xa60CeCreates a new unsuffixed integer literal with the \xe2\x80\xa6CnLane-wise multiply signed 16-bit integers in the two input \xe2\x80\xa600CaConverts <code>self</code> into an async iterator0DbConverts this <code>PathBuf</code> into a boxed <code>Path</code>.ClReturns a mutable reference to the filled portion of the \xe2\x80\xa60CjConsumes this object, returning the raw underlying handle.CjConsumes this object, returning the raw underlying socket.DgConsumes the <code>BinaryHeap</code> and returns a vector in sorted \xe2\x80\xa60DgConverts the bytes into a <code>String</code> lossily, substituting \xe2\x80\xa60FeReturns <code>true</code> if this <code>char</code> satisfies either <code>is_alphabetic()</code> \xe2\x80\xa6CaChecks if the value is an alphanumeric character:10DjReturns <code>true</code> if this address is in a range designated for \xe2\x80\xa6EdReturns <code>true</code> if this address part of the <code>198.18.0.0/15</code> \xe2\x80\xa6D`Returns <code>true</code> if this is an address reserved for \xe2\x80\xa6210CnReturns <code>true</code> if this file type is a block device.0CkChecks whether the pattern matches anywhere in the haystack0000EgReturns <code>true</code> if and only if <code>self == 2^k</code> for some unsigned \xe2\x80\xa600000FeReturns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.00000EjReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.00000000000222222111111000000000000DaReturns <code>true</code> if this file type is a socket datagram.DjReturns <code>true</code> if this file type is a symbolic link that is \xe2\x80\xa6EdReturns <code>true</code> if this is a unique local address (<code>fc00::/7</code>).0DgReturns the value of the <code>ftLastWriteTime</code> field of this \xe2\x80\xa6DkReads contiguous elements from <code>slice</code>. Elements are read so \xe2\x80\xa60DkReads contiguous elements starting at <code>ptr</code>. Each element is \xe2\x80\xa60DcReturns a <code>CursorMut</code> pointing at the gap before the \xe2\x80\xa6000CnRearranges the internal storage of this deque so it is one \xe2\x80\xa60CmReturns the address\xe2\x80\x99s multicast scope if the address is \xe2\x80\xa60CnReads the next code point out of a byte iterator (assuming \xe2\x80\xa6DgFinds the next <code>Match</code> result. See <code>next_back()</code>.00DfReturns the value of the <code>nNumberOfLinks</code> field of this \xe2\x80\xa6CaComputes the absolute value of <code>self</code>.00000CfComputes the absolute value of self, with overflow \xe2\x80\xa600000111111000000C`Calculates <code>self</code> + <code>rhs</code>.00000000000000000000000DmCalculates the divisor when <code>self</code> is divided by <code>rhs</code>.00000000000000000000000DhCalculates the multiplication of <code>self</code> and <code>rhs</code>.00000000000000000000000CmNegates self, overflowing if this is equal to the minimum \xe2\x80\xa60000BgNegates self in an overflowing fashion.000010111111111110000010111111DiRaises self to the power of <code>exp</code>, using exponentiation by \xe2\x80\xa600000000000000000000000DoCalculates the remainder when <code>self</code> is divided by <code>rhs</code>.00000000000000000000000BjShifts self left by <code>rhs</code> bits.00000000000000000000000BkShifts self right by <code>rhs</code> bits.00000000000000000000000C`Calculates <code>self</code> - <code>rhs</code>.00000000000000000000000AoUses <code>park_timeout</code>.CmMoves all consecutive repeated elements to the end of the \xe2\x80\xa60CmReturns the index of the partition point according to the \xe2\x80\xa6000DlSee documentation of <code>&lt;*const T&gt;::offset_from</code> for details.0ClReturns the nearest integer to a number. Rounds half-way \xe2\x80\xa60EbExperimental version of <code>round_ties_even</code> in <code>core</code>. See \xe2\x80\xa601111CjChanges the current working directory to the specified \xe2\x80\xa6CfMoves this TCP stream into or out of nonblocking mode.0CfMoves this UDP socket into or out of nonblocking mode.CaMoves the socket into or out of nonblocking mode.00CgChanges the permissions found on a file or a directory.BoChanges the permissions on the underlying file.CfGenerates the <code>SFENCE.INVAL.IR</code> instruction0CjSupervisor memory management fence for given address space0AnReverses bits of each element.0CkFunnel Shifts vector left elementwise, with UB on overflow.0CfFunnel Shifts vector right elementwise, with UB on \xe2\x80\xa60CkInserts an element into a vector, returning the updated \xe2\x80\xa60BcChecks if all mask values are true.0BiLogical \xe2\x80\x9cand\xe2\x80\x9cs all elements together.0BaChecks if any mask value is true.0BhReturns the maximum element of a vector.0BhReturns the minimum element of a vector.0CbLogical \xe2\x80\x9cexclusive ors\xe2\x80\x9d all elements together.0CmInvalidate supervisor translation cache for given address \xe2\x80\xa60CbReturns the size of the pointed-to value in bytes.0CeCreates a string slice from another string slice, \xe2\x80\xa60ClSpawns a new thread without any lifetime restrictions by \xe2\x80\xa6CiDivides one mutable array reference into two at an index.0CaDivides one array reference into two at an index.0CmReturns the first and all the rest of the elements of the \xe2\x80\xa60ClReturns an iterator over subslices separated by elements \xe2\x80\xa6CmReturns an iterator over substrings of this string slice, \xe2\x80\xa610ChRemoves the first element of the slice and returns a \xe2\x80\xa60CkReturns the current seek position from the start of the \xe2\x80\xa60CiRemoves the pattern from the front of haystack, if it \xe2\x80\xa60000ChRemoves the pattern from the back of haystack, if it \xe2\x80\xa60000DiSwaps all elements in <code>self</code> with those in <code>other</code>.0DjConverts this object to an iterator of resolved <code>SocketAddr</code>\xe2\x80\xa6CcConverts a <code>CStr</code> into a Cow&lt;str&gt;.CcConverts an <code>OsStr</code> to a Cow&lt;str&gt;.CnConverts a <code>Path</code> to a <code>Cow&lt;str&gt;</code>.DjConvert <code>self</code> directly into a <code>TokenStream</code> object.0CiTry to acquire a shared (non-exclusive) lock on the file.CeCreates a new unsuffixed integer literal with the \xe2\x80\xa6DcIf we have the only reference to <code>T</code> then unwrap it. \xe2\x80\xa6000DkReturns a <code>CursorMut</code> pointing at the gap after the greatest \xe2\x80\xa6000CmGiven a first byte, determines how many bytes are in this \xe2\x80\xa6FcLoads an 8-bit value from <code>m</code> and sets lane <code>L</code> of <code>v</code> to that \xe2\x80\xa600CbAdd returning High Narrow (high half). Arm\xe2\x80\x99s \xe2\x80\xa600000000000C`Floating-point complex add Arm\xe2\x80\x99s documentation0CfFloating-point complex multiply accumulate Arm\xe2\x80\x99s \xe2\x80\xa600000CmInsert vector element from another vector element Arm\xe2\x80\x99s \xe2\x80\xa6BlDuplicate vector element to vector or scalar101101101111111111111CkFixed-point convert to floating-point Arm\xe2\x80\x99s documentation0CkFloating-point convert to fixed-point, rounding toward zero01111110000001111111111ChFloating-point convert to signed fixed-point Arm\xe2\x80\x99s \xe2\x80\xa60111CiFixed-point convert to unsigned fixed-point, rounding \xe2\x80\xa602223322CfDot product arithmetic (indexed) Arm\xe2\x80\x99s documentation0CbSet all vector lanes to the same value Arm\xe2\x80\x99s \xe2\x80\xa600CfExtract an element from a vector Arm\xe2\x80\x99s documentation11111111111111111111111111AdAll Elements Numeric00AdAny Elements Numeric00CaVector Find Any Element Equal with Condition CodeCeVector Find Any Element Not Equal with Condition CodeAoVector Generate Mask (Halfword)AkVector Generate Mask (Word)BaVector Generate Mask (Doubleword)BbVector Store Rightmost with LengthClPowerPC-specific 128-bit wide vector mask of four packed \xe2\x80\xa60Cjs390x-specific 128-bit wide vector mask of four packed \xe2\x80\xa6ClFloating-point fused multiply-add to accumulator Arm\xe2\x80\x99s \xe2\x80\xa600000CiFloating-point fused Multiply-Add Long to accumulator \xe2\x80\xa60CdFloating-point fused Multiply-Subtract Long from \xe2\x80\xa60ClFloating-point fused multiply-subtract to accumulator Arm\xe2\x80\xa6CnFloating-point fused multiply-subtract from accumulator Arm\xe2\x80\xa60111CjLookup table read with 2-bit indices Arm\xe2\x80\x99s documentation00000CjLookup table read with 4-bit indices Arm\xe2\x80\x99s documentation00CkVector widening multiply accumulate with scalar Arm\xe2\x80\x99s \xe2\x80\xa60000000CbVector multiply accumulate with scalar Arm\xe2\x80\x99s \xe2\x80\xa6000000000CiVector widening multiply subtract with scalar Arm\xe2\x80\x99s \xe2\x80\xa60000000CjVector multiply subtract with scalar Arm\xe2\x80\x99s documentation000000000BmFloating-point multiply Arm\xe2\x80\x99s documentation0CdVector long multiply by scalar Arm\xe2\x80\x99s documentation00000001111AnMultiply Arm\xe2\x80\x99s documentation00000002CfFloating-point multiply extended Arm\xe2\x80\x99s documentation00000000CfSigned saturating extract narrow Arm\xe2\x80\x99s documentation00000CjVector saturating rounding doubling multiply high with \xe2\x80\xa6000ClSigned saturating rounded shift right unsigned narrow Arm\xe2\x80\xa600CkSHA256 schedule update accelerator, first part. Arm\xe2\x80\x99s \xe2\x80\xa60ClSHA256 schedule update accelerator, second part. Arm\xe2\x80\x99s \xe2\x80\xa60BnSHA512 schedule update 0 Arm\xe2\x80\x99s documentationBnSHA512 schedule update 1 Arm\xe2\x80\x99s documentationBlSigned shift left long Arm\xe2\x80\x99s documentation0AoSM3PARTW1 Arm\xe2\x80\x99s documentationAoSM3PARTW2 Arm\xe2\x80\x99s documentationCdSubtract returning high narrow Arm\xe2\x80\x99s documentation00000000000ClDot product index form with signed and unsigned integers \xe2\x80\xa60ClDot product index form with unsigned and signed integers \xe2\x80\xa60ChWaits on this condition variable for a notification, \xe2\x80\xa6CdAcquires a mutable reference to the contained value.CdAdds a signed offset to a pointer using wrapping \xe2\x80\xa60CgCalculates the offset from a pointer using wrapping \xe2\x80\xa60110000CmOverwrites a memory location with the given value without \xe2\x80\xa600000CmAn <code>AtomicBool</code> initialized to <code>false</code>.0CjA nonexistent interface was requested or the requested \xe2\x80\xa6CnA simple wrapper around a type to assert that it is unwind \xe2\x80\xa60CnError due to the computed capacity exceeding the collection\xe2\x80\xa60EhThe error type returned when a conversion from <code>u32</code> to <code>char</code> \xe2\x80\xa60fU+005E0CkAn error that can be returned when decoding UTF-16 code \xe2\x80\xa60fU+00110fU+00120CmCompiler-internal trait used to indicate the type of enum \xe2\x80\xa60CdThe literal failed to be escaped, take a look at \xe2\x80\xa6CbAn index provided was out-of-bounds for the slice.00fU+007B0DkAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can \xe2\x80\xa600BdData provided is not nul terminated.000CjThe operation lacked the necessary privileges to complete.CkZero-sized type used to mark a type parameter as covariant.0CkZero-sized type used to mark a type parameter as invariant.0ClTrait that indicates that this is a pointer or a wrapper \xe2\x80\xa60CgCreated with the method <code>rsplit_terminator</code>.00CmA range only bounded inclusively above (<code>..=end</code>).000CmThis enumeration is the list of possible errors that made \xe2\x80\xa6fU+00290CmRAII structure used to release the exclusive write access \xe2\x80\xa600ClAn owned permission to join on a scoped thread (block on \xe2\x80\xa6ClAn error returned from the <code>send_timeout</code> method.DhAn error returned from <code>Path::strip_prefix</code> if the prefix \xe2\x80\xa6CjThe error type returned when a checked char conversion \xe2\x80\xa60eFalse0Biround down and do not suppress exceptions0Bgtruncate and do not suppress exceptions0AkSee <code>_mm_setcsr</code>000CfFor each character in <code>a</code>, determine if \xe2\x80\xa60BaTransaction successfully started.CkTransaction abort due to the transaction using too much \xe2\x80\xa60CkTransaction abort due to a memory conflict with another \xe2\x80\xa60CmTransaction explicitly aborted with xabort. The parameter \xe2\x80\xa60EgReturns the bit in position <code>b</code> of the memory addressed by <code>p</code>\xe2\x80\xa600ClShift 16-bit mask a left by count bits while shifting in \xe2\x80\xa60CgShift the bits of 32-bit mask a left by count while \xe2\x80\xa60CgShift the bits of 64-bit mask a left by count while \xe2\x80\xa60CmShift 16-bit mask a right by count bits while shifting in \xe2\x80\xa60ChShift the bits of 32-bit mask a right by count while \xe2\x80\xa60ChShift the bits of 64-bit mask a right by count while \xe2\x80\xa60CkCompute the bitwise AND of 16-bit masks a and b, and if \xe2\x80\xa60CkCompute the bitwise AND of 32-bit masks a and b, and if \xe2\x80\xa60CkCompute the bitwise AND of 64-bit masks a and b, and if \xe2\x80\xa60CmCompute the bitwise NOT of 8-bit mask a and then AND with \xe2\x80\xa60CkCompute the bitwise AND of 8-bit masks a and  b, if the \xe2\x80\xa60DkComputes the absolute values of packed 16-bit integers in <code>a</code>\xe2\x80\xa60DkComputes the absolute values of packed 32-bit integers in <code>a</code>\xe2\x80\xa60CfCompute the absolute value of packed signed 64-bit \xe2\x80\xa60DaAdds packed 16-bit integers in <code>a</code> and <code>b</code>.0DaAdds packed 32-bit integers in <code>a</code> and <code>b</code>.0DaAdds packed 64-bit integers in <code>a</code> and <code>b</code>.0EaAdds packed 8-bit integers in <code>a</code> and <code>b</code> using saturation.0EbAdds packed unsigned 8-bit integers in <code>a</code> and <code>b</code> using \xe2\x80\xa60ClAlternatively adds and subtracts packed double-precision \xe2\x80\xa60ClAlternatively adds and subtracts packed single-precision \xe2\x80\xa60CnComputes the bitwise AND of 256 bits (representing integer \xe2\x80\xa60CgComputes the bitwise NOT of packed double-precision \xe2\x80\xa60CgComputes the bitwise NOT of packed single-precision \xe2\x80\xa60DnAverages packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.0CjBlends packed double-precision (64-bit) floating-point \xe2\x80\xa60CjBlends packed single-precision (32-bit) floating-point \xe2\x80\xa60DoCast vector of type <code>__m256d</code> to type <code>__m256h</code>. This \xe2\x80\xa60BkCast vector of type __m256d to type __m256.0DoCast vector of type <code>__m256h</code> to type <code>__m256d</code>. This \xe2\x80\xa60EhCast vector of type <code>__m256h</code> to type <code>__m256</code>. This intrinsic \xe2\x80\xa60BkCast vector of type __m256 to type __m256d.0EhCast vector of type <code>__m256</code> to type <code>__m256h</code>. This intrinsic \xe2\x80\xa60CnConverts packed BF16 (16-bit) floating-point elements in a \xe2\x80\xa60CdReturns the first element of the input vector of \xe2\x80\xa6000CiConvert packed half-precision (16-bit) floating-point \xe2\x80\xa60CkConvert packed single-precision (32-bit) floating-point \xe2\x80\xa60CmCompute dot-product of BF16 (16-bit) floating-point pairs \xe2\x80\xa60CgMultiply packed complex numbers in a by the complex \xe2\x80\xa60CmMultiply packed complex numbers in a and b, accumulate to \xe2\x80\xa60CnMultiplies packed double-precision (64-bit) floating-point \xe2\x80\xa60CjMultiply packed half-precision (16-bit) floating-point \xe2\x80\xa60CnMultiplies packed single-precision (32-bit) floating-point \xe2\x80\xa60221100ChConvert the exponent of each packed double-precision \xe2\x80\xa60CfConvert the exponent of each packed half-precision \xe2\x80\xa60ChConvert the exponent of each packed single-precision \xe2\x80\xa60EeCompares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns \xe2\x80\xa60EeCompares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns \xe2\x80\xa60CiCompare packed signed 64-bit integers in a and b, and \xe2\x80\xa60EfCompares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and \xe2\x80\xa60EfCompares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and \xe2\x80\xa60CkCompare packed unsigned 64-bit integers in a and b, and \xe2\x80\xa60554433221100CkSet each packed 8-bit integer in dst to all ones or all \xe2\x80\xa60CnMultiplies the low 32-bit integers from each packed 64-bit \xe2\x80\xa60CiMultiplies the low unsigned 32-bit integers from each \xe2\x80\xa60CkExtract the reduced argument of packed double-precision \xe2\x80\xa60CiExtract the reduced argument of packed half-precision \xe2\x80\xa60CkExtract the reduced argument of packed single-precision \xe2\x80\xa60CmRotate the bits in each packed 32-bit integer in a to the \xe2\x80\xa60CmRotate the bits in each packed 64-bit integer in a to the \xe2\x80\xa601100CmScale the packed double-precision (64-bit) floating-point \xe2\x80\xa60CkScale the packed half-precision (16-bit) floating-point \xe2\x80\xa60CmScale the packed single-precision (32-bit) floating-point \xe2\x80\xa60DgBroadcasts 8-bit integer <code>a</code> to all elements of returned \xe2\x80\xa60CkSets packed 16-bit integers in returned vector with the \xe2\x80\xa60CkSets packed 32-bit integers in returned vector with the \xe2\x80\xa60CiSets packed __m256d returned vector with the supplied \xe2\x80\xa60CiSets packed __m256i returned vector with the supplied \xe2\x80\xa60CjSets packed 8-bit integers in returned vector with the \xe2\x80\xa60ChSets packed __m256 returned vector with the supplied \xe2\x80\xa60DjNegates packed 8-bit integers in <code>a</code> when the corresponding \xe2\x80\xa60EdShifts packed 16-bit integers in <code>a</code> left by <code>count</code> while \xe2\x80\xa60EdShifts packed 32-bit integers in <code>a</code> left by <code>count</code> while \xe2\x80\xa60EdShifts packed 64-bit integers in <code>a</code> left by <code>count</code> while \xe2\x80\xa60EeShifts packed 16-bit integers in <code>a</code> right by <code>count</code> while \xe2\x80\xa60EeShifts packed 32-bit integers in <code>a</code> right by <code>count</code> while \xe2\x80\xa60CjShift packed 64-bit integers in a right by count while \xe2\x80\xa602211EeShifts packed 64-bit integers in <code>a</code> right by <code>count</code> while \xe2\x80\xa60CjStores 256-bits (composed of 4 packed double-precision \xe2\x80\xa60ChStore 256-bits (composed of 16 packed half-precision \xe2\x80\xa60CjStores 256-bits (composed of 8 packed single-precision \xe2\x80\xa60CjMoves double-precision values from a 256-bit vector of \xe2\x80\xa60CgMoves single-precision floating point values from a \xe2\x80\xa60DhSubtract packed 16-bit integers in <code>b</code> from packed 16-bit \xe2\x80\xa60DhSubtract packed 32-bit integers in <code>b</code> from packed 32-bit \xe2\x80\xa60DhSubtract packed 64-bit integers in <code>b</code> from packed 64-bit \xe2\x80\xa60DfSubtract packed 8-bit integers in <code>b</code> from packed 8-bit \xe2\x80\xa60DiSubtract packed unsigned 8-bit integers in <code>b</code> from packed \xe2\x80\xa60CnCompute the bitwise XOR of packed 32-bit integers in a and \xe2\x80\xa60CnCompute the bitwise XOR of packed 64-bit integers in a and \xe2\x80\xa60CnComputes the bitwise XOR of 256 bits (representing integer \xe2\x80\xa60CmZeroes the upper 128 bits of all YMM registers; the lower \xe2\x80\xa60CfCompute the absolute value of packed signed 16-bit \xe2\x80\xa60DkComputes the absolute values of packed 32-bit integers in <code>a</code>\xe2\x80\xa60CfCompute the absolute value of packed signed 64-bit \xe2\x80\xa60ChAdd packed 16-bit integers in a and b, and store the \xe2\x80\xa60ChAdd packed 32-bit integers in a and b, and store the \xe2\x80\xa60ChAdd packed 64-bit integers in a and b, and store the \xe2\x80\xa60CeAdd packed signed 8-bit integers in a and b using \xe2\x80\xa60CgAdd packed unsigned 8-bit integers in a and b using \xe2\x80\xa60CnCompute the bitwise AND of packed 32-bit integers in a and \xe2\x80\xa60CkCompute the bitwise AND of 512 bits (composed of packed \xe2\x80\xa60CmCompute the bitwise AND of 512 bits (representing integer \xe2\x80\xa60CfCompute the bitwise NOT of packed double-precision \xe2\x80\xa60CfCompute the bitwise NOT of packed single-precision \xe2\x80\xa60CkAverage packed unsigned 16-bit integers in a and b, and \xe2\x80\xa60DoCast vector of type <code>__m512d</code> to type <code>__m512h</code>. This \xe2\x80\xa60CnCast vector of type __m512d to type __m512. This intrinsic \xe2\x80\xa60DoCast vector of type <code>__m512h</code> to type <code>__m512d</code>. This \xe2\x80\xa60EhCast vector of type <code>__m512h</code> to type <code>__m512</code>. This intrinsic \xe2\x80\xa6")