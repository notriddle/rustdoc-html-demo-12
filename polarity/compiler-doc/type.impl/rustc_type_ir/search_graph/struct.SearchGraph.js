(function() {
    var type_impls = Object.fromEntries([["rustc_next_trait_solver",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SearchGraph%3CD%3E\" class=\"impl\"><a href=\"#impl-SearchGraph%3CD%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;D, X&gt; SearchGraph&lt;D, X&gt;<div class=\"where\">where\n    D: Delegate&lt;Cx = X&gt;,\n    X: Cx,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(root_depth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; SearchGraph&lt;D, X&gt;</h4></section><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.debug_current_depth\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">debug_current_depth</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>The number of goals currently in the search graph. This should only be\nused for debugging purposes.</p>\n</div></details><section id=\"method.enter_single_candidate\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">enter_single_candidate</a>(&amp;mut self)</h4></section><section id=\"method.finish_single_candidate\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">finish_single_candidate</a>(&amp;mut self) -&gt; CandidateHeadUsages</h4></section><section id=\"method.ignore_candidate_head_usages\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">ignore_candidate_head_usages</a>(&amp;mut self, usages: CandidateHeadUsages)</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.evaluate_goal\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">evaluate_goal</a>(\n    &amp;mut self,\n    cx: X,\n    input: &lt;X as Cx&gt;::Input,\n    step_kind_from_parent: PathKind,\n    inspect: &amp;mut &lt;D as Delegate&gt;::ProofTreeBuilder,\n) -&gt; &lt;X as Cx&gt;::Result</h4></section></summary><div class=\"docblock\"><p>Probably the most involved method of the whole solver.</p>\n<p>While goals get computed via <code>D::compute_goal</code>, this function handles\ncaching, overflow, and cycles.</p>\n</div></details></div></details>",0,"rustc_next_trait_solver::solve::search_graph::SearchGraph"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[2658]}