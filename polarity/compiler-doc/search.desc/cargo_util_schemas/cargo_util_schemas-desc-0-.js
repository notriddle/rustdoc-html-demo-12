searchState.loadedDescShard("cargo_util_schemas", 0, "Low-level Cargo format schemas\n<code>Cargo.toml</code> / Manifest schema definition\nSchemas for JSON messages emitted by Cargo.\nHelpers for validating and checking names like package and …\nFrom a branch.\nThe default branch of the repository, the reference named …\nA directory-based registry.\nA git repository.\nInformation to find a specific commit in a Git repository.\nA local filesystem-based registry.\nSome or all of the data required to identify a package:\nError parsing a <code>PartialVersion</code>.\nA local path.\nA remote registry.\nFrom a specific revision. Can be a commit hash (either …\nThe possible kinds of code source.\nA sparse registry.\nFrom a tag.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nNon-public error kind for <code>PackageIdSpecError</code>.\nContains the success value\nSome or all of the data required to identify a package:\nReturns the argument unchanged.\nTries to convert a valid <code>Url</code> to a <code>PackageIdSpec</code>.\nCalls <code>U::from(self)</code>.\nParses a spec string and returns a <code>PackageIdSpec</code> if the …\nFull <code>semver::Version</code>, if present\nNon-public error kind for <code>PartialVersionError</code>.\nError parsing a <code>PartialVersion</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if this matches a version, including build metadata\nFrom a branch.\nThe default branch of the repository, the reference named …\nA directory-based registry.\nA git repository.\nInformation to find a specific commit in a Git repository.\nA local filesystem-based registry.\nA local path.\nA git reference that can be <code>Display</code>ed\nA remote registry.\nFrom a specific revision. Can be a commit hash (either …\nThe possible kinds of code source.\nA sparse registry.\nFrom a tag.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a <code>Display</code>able view of this git reference, or None …\nA single line in the index representing a single version …\nA dependency as encoded in the <code>IndexPackage</code> index JSON.\nThe artifacts to build from this dependency.\nThe target for bindep.\nChecksum for verifying the integrity of the corresponding …\nWhether or not default features are enabled.\nAll kinds of direct dependencies of the package, including …\nSet of features defined for the package, i.e., <code>[features]</code> …\nSet of features enabled for this dependency.\nThis field contains features with new, extended syntax. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe dependency kind. “dev”, “build”, and “normal…\nWhether or not this is a library dependency.\nNative library name this package links to.\nName of the package.\nName of the dependency. If the dependency is renamed, the …\nWhether or not this is an optional dependency.\nThe original name if the dependency is renamed.\nWhether or not this is a public dependency. Unstable. See …\nThe URL of the index of the registry where this dependency …\nThe SemVer requirement for this dependency.\nRequired version of rust\nThe target platform for this dependency.\nThe schema version for this entry.\nThe version of this dependency.\nIf <code>true</code>, Cargo will skip this version when resolving.\nIf build scripts are disabled or enabled. If true, <code>build.rs</code>…\nThe simple format is equivalent to a detailed dependency …\nVerified string newtype\nThe type when inheriting from a workspace.\nThe type when inheriting from a workspace.\nThe type when inheriting from a workspace.\nThe type when inheriting from a workspace.\nThe type when inheriting from a workspace.\nThe type when inheriting from a workspace.\nThe type when inheriting from a workspace.\nThe type when inheriting from a workspace.\nThe type when inheriting from a workspace.\nAn enum that allows for inheriting keys from a workspace …\nA group of fields that are inheritable by members of the …\nVector of paths if multiple build script are to be used.\nError validating names in Cargo.\nVerified string newtype\nVerified string newtype\nVerified string newtype\nVerified string newtype\nError parsing a <code>RustVersion</code>.\nIn the simple format, only a version is specified, eg. …\nPath of Build Script if there’s just one script.\nThis can be parsed from either a TOML string or array, but …\nThis type is used to deserialize <code>Cargo.toml</code> files.\nRepresents the <code>package</code>/<code>project</code> sections of a <code>Cargo.toml</code>.\nCorresponds to a <code>target</code> entry, but <code>TomlTarget</code> is already …\nError validating names in Cargo.\nThe type that is used when not inheriting from a workspace.\nThe type that is used when not inheriting from a workspace.\nThe type that is used when not inheriting from a workspace.\nThe type that is used when not inheriting from a workspace.\nThe type that is used when not inheriting from a workspace.\nThe type that is used when not inheriting from a workspace.\nThe type that is used when not inheriting from a workspace.\nThe type that is used when not inheriting from a workspace.\nThe type that is used when not inheriting from a workspace.\nProvide a helpful error message for a common user error.\nReport unused keys (see also nested <code>_unused_keys</code>) Note: …\nThis is here to provide a way to see the “unused …\nThis is here to provide a way to see the “unused …\nOne or more of <code>bin</code>, <code>cdylib</code>, <code>staticlib</code>, <code>bin:&lt;name&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnstable feature <code>hint-mostly-unused</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf set, the artifact should also be a dependency\nOverwrite self’s values with the given profile.\nValidated package name\nValidated registry name\nValidated profile name\nValidated feature name\nValidated path base name\nThe URL of the <code>registry</code> field. This is an internal …\nCoerce a value to be a validate package name\nA platform name, like <code>x86_64-apple-darwin</code>\nUnstable feature <code>-Ztrim-paths</code>.\nError parsing a <code>RustVersion</code>.\nNon-public error kind for <code>RustVersionError</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFile being copied from another location.\nFile being generated during packaging\nWhere the file is from.\nFile information of a package archive generated by …\nA map of relative paths in the archive to their detailed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe Package ID Spec of the package.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn absolute path to the actual file content\nAn absolute path to the original file the generated one is …\nContains the error value\nNon-public error kind for <code>NameValidationError</code>.\nError validating names in Cargo.\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEnsure a package name is valid\nValidate dir-names and profile names according to RFC 2678.")