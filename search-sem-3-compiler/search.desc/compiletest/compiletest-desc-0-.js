searchState.loadedDescShard("compiletest", 0, "Returns Path to CDB\nReturns (Path to GDB, GDB Version)\nReturns a stamp constructed from input files common to all …\nReturns LLDB version\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the given target is an Android target for …\nReturns <code>true</code> if the given target is a MSVC target for the …\nReturns true if <code>file_name</code> looks like a proper test file …\nThese structs are a subset of the ones found in …\nConfiguration for compiletest\nstatus whether android device available or not\nExtra parameter to run adb on arm-linux-androideabi\nExtra parameter to run test suite on arm-linux-androideabi\nPath to the android tools\n<code>true</code> to overwrite stderr/stdout files instead of …\nThe directory where programs should be built\nThe cargo executable.\nPath to / name of the Microsoft Console Debugger (CDB) …\nVersion of CDB\nThe current Rust channel\nWhether to use colors in test.\nmode describing what file the actual ui output will be …\nThe library paths required for running the compiler.\nThe coverage-dump executable.\nThe debugger to use in debuginfo mode. Unset otherwise.\nThe default Rust edition\nUsed by <code>ui</code> tests to generate things like <code>foo.stderr</code> from …\nExactly match the filter, rather than a substring\nOnly run tests that match these filters\nForce the pass mode of a check/build/run-pass test to this …\nWhether to rerun tests even if the inputs are unchanged.\nWhether to fail if we can’t run run-pass-valgrind tests …\nPrint one character per test instead of one line\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPath to / name of the GDB executable\nVersion of GDB, encoded as ((major * 1000) + minor) * 1000 …\nWhether adding git commit information such as the commit …\nwhether to run <code>tidy</code> when a rustdoc test fails\nHost triple for the compiler being invoked\nFlags to pass to the compiler when building for the host\nAbsolute path to the directory to use for incremental …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe jsondocck executable.\nThe jsondoclint executable.\nthe path containing LLDB’s Python module\nVersion of LLDB\nPath to LLVM’s bin directory.\nThe LLVM <code>FileCheck</code> binary path.\nVersion of LLVM\nWrite out a parseable log of tests that were run\nThe test mode, e.g. ui or debuginfo.\nPath to a NodeJS executable. Used for JS doctests, …\nPath to a npm executable. Used for rustdoc GUI tests\nOnly rerun the tests that result has been modified …\nWhether tests should be optimized by default. Individual …\nAbsolute path to the directory where all output for the …\nAbsolute path to the base filename used as output for the …\nAbsolute path to the directory where all output for all …\nGenerates a unique name for the test, such as …\nTrue if the profiler runtime is enabled for this target. …\nThe Python executable to use for LLDB and htmldocck.\nwhere to find the remote test client process, if we’re …\nExplicitly enable or disable running.\nThe path to the Clang executable to run Clang-based tests …\nRun ignored tests\nThe library paths required for running compiled programs.\nA command line to prefix program execution with, for …\nWhether the compiler and stdlib has been built with …\nThe rustc executable.\nThe rustdoc executable.\nIf true, this will generate a coverage file with UI test …\nSkip tests matching these substrings. Corresponds to …\nThe directory containing the tests to run\nThe name of the stage being built (stage1, etc)\nThe test suite (essentially which directory is running, …\nThe directory containing the compiler sysroot\nIs LLVM a system LLVM\nTarget system to be tested\nFlags to pass to the compiler when building for the target\nThe valgrind path.\nExplain what’s going on\nWhether to run tests with <code>ignore-debug</code> header\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFilters based on filetype and extension whether to diff a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat kind of message we expect (e.g., warning, error, …\nLooks for either “//| KIND MESSAGE” or “//^^… KIND …\nProperties which must be known very early, before actually …\nThe broken-down contents of a line containing a test …\nThis was originally generated by collecting directives …\nSimilar to <code>aux_builds</code>, but also passes the resulting dylib …\nThe main part of the header directive, after removing the …\nExtra flags to pass to rustdoc but not the compiler.\nTakes a directive of the form <code>&quot;&lt;version1&gt; [- &lt;version2&gt;]&quot;</code>, …\nExtra flags to pass to LLVM’s <code>filecheck</code> tool, in tests …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSome header directives start with a revision name in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract an <code>(Option&lt;line_revision&gt;, directive)</code> directive …\nExtra flags to pass to <code>llvm-cov</code> when producing coverage …\nFor tests using the <code>needs-llvm-zstd</code> directive:\nLoads properties from <code>testfile</code> into <code>props</code>. If a property is\nDon’t automatically insert any <code>--check-cfg</code> args\nRaw line from the test file, including comment prefix and …\nParses the regex and replacement values of a …\nBuild the documentation for each crate in a unique output …\nThe directive is handled by other parts of our tooling.\nThe directive was invalid.\nMatch.\nNo match.\nThe line is not actually a directive.\nThe result of parse_cfg_name_directive.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses a name-value directive which contains …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether LLVM built with zstd, for the <code>needs-llvm-zstd</code> …\nThe code itself.\nReturns the deepest source span in the macro call stack …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nname of macro that was applied (e.g., “foo!” or “#[…\nspan where macro was applied to generate this code\ndarwin_fd_limit exists to work around an issue where …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat value should be passed to <code>--emit</code>?\nWill this test be executed? Should we use <code>make_exe_name</code>?\nReplace line numbers in coverage reports with the …\nGets the directory where auxiliary binaries are written. …\nGets the directory where auxiliary files are written. …\nBuilds an aux dependency.\n<code>root_testpaths</code> refers to the path of the original test. …\nFor each <code>aux-build: foo/bar</code> annotation, we check to find …\nCode specific to the coverage test suites.\n<code>root_out_dir</code> and <code>root_testpaths</code> refer to the parameters of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe platform-specific library name\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if we should report an error about …\nCreates a filename for output with the given extension. …\nNormalize output differences across platforms. Generally …\nGets the absolute path to the directory where all output …\nGets the absolute path to the base filename used as output …\nGenerates a unique name for the test, such as …\nRuns a <code>Command</code> and waits for it to finish, then converts …\nRun any doctests embedded in this test file, and add any …\nCode executed for each revision in turn (or, if there are …\nThe revision, ignored for incremental compilation since it …\nCoverage reports can describe multiple source files, …\nRepresentation of information to invoke a debugger and …\nLines to insert breakpoints at\nContains the source line number to check and the line …\nGiven debugger output and lines to check, ensure that …\nCheck that the pattern in <code>check_line</code> applies to <code>line</code>. …\nCommands for the debuuger\nSource file name\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdds a list of lookup paths to <code>cmd</code>’s dynamic library …\nThe name of the environment variable that holds dynamic …\nAppend an extension to the path, even if it already has …")