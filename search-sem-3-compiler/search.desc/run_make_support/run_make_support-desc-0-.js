searchState.loadedDescShard("run_make_support", 0, "<code>run-make-support</code> is a support library for run-make tests. …\nCheck that <code>haystack</code> contains <code>needle</code>. Panic otherwise.\nCheck that <code>actual</code> is equal to <code>expected</code>. Panic otherwise.\nCheck that <code>haystack</code> does not contain <code>needle</code>. Panic …\nConstruct the binary name based on platform.\nCopy a directory into another.\nCreates a new symlink to a path on the filesystem, …\nReturn the current working directory.\nUse <code>cygpath -w</code> on a path to get a Windows path string …\nThis module implements “drop bombs” intended for use …\nConstruct the dynamic library name based on the platform.\nImplement common helpers for command wrappers. This …\nRead the contents of a file that cannot simply be read by …\nRead the contents of a file that cannot simply be read by …\nCheck if target uses macOS.\nCheck if target uses msvc.\nCheck if target is windows-like.\nReturns the path for a local test file.\nCheck that all files in <code>dir1</code> exist and have the same …\nThis function is designed for running commands in a …\nGenerate the name a rust library (rlib) would have.\nSet the runtime library path as needed for running the …\nPath to the root rust-lang/rust source checkout.\nConstruct the static library name based on the platform.\n<code>TARGET</code>\nEnsure that the path P is read-only while the test runs, …\nRun <code>uname</code>. This assumes that <code>uname</code> is available on the …\nA platform-specific C compiler invocation builder. The …\nGeneric command argument provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nConstruct a new platform-specific C compiler invocation.\nSet the path where the command will be run.\nSpecify an environment variable.\nRemove an environmental variable.\n<code>EXTRACFLAGS</code>\n<code>EXTRACXXFLAGS</code>\nReturns the argument unchanged.\nSpecify path of the input file.\nInspect what the underlying <code>Command</code> is up to the current …\nCalls <code>U::from(self)</code>.\nAdds directories to the list that the linker searches for …\nConstruct a new platform-specific C compiler invocation.\nSpecify <code>-o</code> or <code>-Fe</code>/<code>-Fo</code> depending on platform/compiler.\nSpecify path of the output binary.\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it does not …\nRun the command but do not check its exit status. Only use …\nA <code>clang</code> invocation builder.\nSpecify architecture.\nGeneric command argument provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nConstruct a new <code>clang</code> invocation. <code>clang</code> is not always …\nSet the path where the command will be run.\nSpecify an environment variable.\nRemove an environmental variable.\nReturns the argument unchanged.\nProvide an input file.\nInspect what the underlying <code>Command</code> is up to the current …\nCalls <code>U::from(self)</code>.\nSpecify LTO settings.\nConstruct a new <code>clang</code> invocation. <code>clang</code> is not always …\nPass <code>-nostdlib</code> to disable linking the C standard library.\nSpecify the name of the executable. The executable will be …\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it does not …\nRun the command but do not check its exit status. Only use …\nSpecify which target triple clang should target.\nSpecify which ld to use.\nThis is a custom command wrapper that simplifies working …\nRepresents the result of an executed process. The various …\nGeneric command argument provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nChecks that <code>stderr</code> contains <code>expected</code>.\nChecks that trimmed <code>stderr</code> matches trimmed <code>expected</code>.\nChecks that <code>stderr</code> does not contain <code>unexpected</code>.\nChecks that <code>stdout</code> contains <code>expected</code>.\nChecks that trimmed <code>stdout</code> matches trimmed <code>expected</code>.\nChecks that <code>stdout</code> does not contain <code>unexpected</code>.\nSet the path where the command will be run.\nSpecify an environment variable.\nRemove an environmental variable.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInspect what the underlying <code>std::process::Command</code> is up to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it does not …\nRun the command but do not check its exit status. Only use …\nSpecify the actual output for the diff from a file.\nSpecify the actual output for the diff from a given text …\nSpecify the expected output for the diff from a file.\nSpecify the expected output for the diff from a given text …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruct a bare <code>diff</code> invocation.\nSpecify a regex that should replace text in the “actual…\nArm a <code>DropBomb</code>. If the value is dropped without being …\nDefuse the <code>DropBomb</code>. This will prevent the drop bomb from …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA wrapper around <code>std::fs::copy</code> which includes the file …\nA wrapper around <code>std::fs::create_dir</code> which includes the …\nA wrapper around <code>std::fs::create_dir_all</code> which includes …\nA wrapper around <code>std::fs::File::create</code> which includes the …\nA wrapper around <code>std::fs::metadata</code> which includes the file …\nA wrapper around <code>std::fs::read</code> which includes the file …\nA wrapper around <code>std::fs::read_dir</code> which includes the file …\nA wrapper around <code>std::fs::read_to_string</code> which includes …\nA wrapper around <code>std::fs::remove_dir_all</code> which includes …\nA wrapper around <code>std::fs::remove_file</code> which includes the …\nA wrapper around <code>std::fs::rename</code> which includes the file …\nA wrapper around <code>std::fs::set_permissions</code> which includes …\nA wrapper around <code>std::fs::write</code> which includes the file …\nA <code>llvm-filecheck</code> invocation builder.\nA <code>llvm-objdump</code> invocation builder.\nA <code>llvm-profdata</code> invocation builder.\nA <code>llvm-readobj</code> invocation builder.\nGeneric command argument provider. Prefer specific helper …\nGeneric command argument provider. Prefer specific helper …\nGeneric command argument provider. Prefer specific helper …\nGeneric command argument provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nSet the path where the command will be run.\nSet the path where the command will be run.\nSet the path where the command will be run.\nSet the path where the command will be run.\nSpecify an environment variable.\nSpecify an environment variable.\nSpecify an environment variable.\nSpecify an environment variable.\nRemove an environmental variable.\nRemove an environmental variable.\nRemove an environmental variable.\nRemove an environmental variable.\nPass <code>--file-header</code> to display file headers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProvide an input file.\nProvide an input file.\nProvide an input file.\nInspect what the underlying <code>Command</code> is up to the current …\nInspect what the underlying <code>Command</code> is up to the current …\nInspect what the underlying <code>Command</code> is up to the current …\nInspect what the underlying <code>Command</code> is up to the current …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate the path to the bin directory of LLVM.\nConstruct a new <code>llvm-filecheck</code> invocation. This assumes …\nConstruct a new <code>llvm-objdump</code> invocation. This assumes that …\nConstruct a new <code>llvm-profdata</code> invocation. This assumes …\nConstruct a new <code>llvm-readobj</code> invocation. This assumes that …\nTake several profile data files generated by PGO …\nConstruct a new <code>llvm-readobj</code> invocation. This assumes that …\nConstruct a new <code>llvm-profdata</code> invocation. This assumes …\nConstruct a new <code>llvm-filecheck</code> invocation. This assumes …\nConstruct a new <code>llvm-objdump</code> invocation. This assumes that …\nSpecify the output file path.\nProvide the patterns that need to be matched.\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it does not …\nRun the constructed command and assert that it does not …\nRun the constructed command and assert that it does not …\nRun the constructed command and assert that it does not …\nRun the command but do not check its exit status. Only use …\nRun the command but do not check its exit status. Only use …\nRun the command but do not check its exit status. Only use …\nRun the command but do not check its exit status. Only use …\nPipe a read file into standard input containing patterns …\nCreate a new custom <code>Command</code>. This should be preferred to …\nRun a built binary and make sure it succeeds.\nRun a built binary and make sure it fails.\nRun a built binary with one or more argument(s) and make …\nA <code>rustc</code> invocation builder.\nGeneric command argument provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nConstruct a new <code>rustc</code> aux-build invocation.\nConfigure the compilation environment.\nSpecify number of codegen units\nSpecify the crate name.\nSpecify the crate type.\nSet the path where the command will be run.\nSpecify the edition year.\nSpecify type(s) of output files to generate.\nSpecify an environment variable.\nRemove an environmental variable.\nSpecify error format to use\nSpecify where an external library is located.\nAdd a suffix in each output filename.\nReturns the argument unchanged.\nSpecify directory path used for incremental cache\nSpecify path to the input file.\nInspect what the underlying <code>Command</code> is up to the current …\nCalls <code>U::from(self)</code>.\nSpecify json messages printed by the compiler\nAdd a directory to the library search path. Equivalent to …\nAdd an extra argument to the linker invocation, via …\nSpecify the linker\nThis flag defers LTO optimizations to the linker.\nConstruct a new <code>rustc</code> invocation.\nConstruct a new <code>rustc</code> invocation with <code>aux_build</code> preset …\nSpecify default optimization level <code>-O</code> (alias for …\nSpecify a specific optimization level.\nSpecify path to the output directory. Equivalent to `–…\nSpecify path to the output file. Equivalent to `-o`` in …\nSpecify what happens when the code panics.\nSpecify the print request.\nSpecify directory path used for profile generation\nSpecify directory path used for profile usage\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it does not …\nRun the command but do not check its exit status. Only use …\nConstruct a new <code>rustc</code> invocation.\nSpecify a stdin input\nOverride the system root. Equivalent to <code>--sysroot</code> in rustc.\nSpecify the target triple, or a path to a custom target …\nGeneric command argument provider. Prefer specific helper …\nGiven a <code>path</code>, pass <code>@{path}</code> to <code>rustdoc</code> as an arg file.\nGeneric command arguments provider. Prefer specific helper …\nConstruct a bare <code>rustdoc</code> invocation.\nConstruct a plain <code>rustdoc</code> invocation with no flags set.\nSpecify the crate name.\nSpecify the crate type.\nSet the path where the command will be run.\nSpecify the edition year.\nSpecify an environment variable.\nRemove an environmental variable.\nSpecify where an external library is located.\nReturns the argument unchanged.\nSpecify path to the input file.\nInspect what the underlying <code>Command</code> is up to the current …\nCalls <code>U::from(self)</code>.\nAdd a directory to the library search path. It corresponds …\nConstruct a <code>rustdoc</code> invocation with <code>-L $(TARGET_RPATH_DIR)</code> …\nSpecify output directory.\nSpecify path to the output folder.\nSpecify the output format.\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it does not …\nRun the command but do not check its exit status. Only use …\nConstruct a new <code>rustdoc</code> invocation with …\nSpecify a stdin input\nSpecify the target triple, or a path to a custom target …")