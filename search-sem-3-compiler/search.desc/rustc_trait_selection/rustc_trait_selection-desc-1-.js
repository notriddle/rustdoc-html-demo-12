searchState.loadedDescShard("rustc_trait_selection", 1, "The node in the specialization graph containing the …\nThe “top-most” (ie. least specialized) specialization …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempt to insert an impl into this set of children, while …\nInsert a local impl into the specialization graph. If an …\nInsert an impl into this set of children without comparing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe associated item described by this <code>LeafDef</code>.\nImpls of the trait.\nAll impls have a parent; the “root” impls have as …\nInsert cached metadata mapping from a child impl back to …\nRemoves an impl from this set of children. Used when …\nThis implements the traversal over the structure of a …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis method traverses the structure of <code>ty</code>, trying to find …\nTracks ADTs previously encountered during search, so that …\nDescribes how to elaborate an obligation into a …\n“Elaboration” is the process of identifying all the …\nA filter around an iterator of predicates that makes it …\nThe inverse of <code>BoundVarReplacer</code>: replaces placeholders …\n“Trait alias expansion” is the process of expanding a …\nStores information about the expansion of a trait via a …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nIf <code>item</code> is a trait alias and its predicate has not yet …\nFilter to only the supertraits of trait predicates, i.e. …\nFilter to only the supertraits of trait predicates that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiate all bound parameters of the impl subject with …\nAdds a predicate to the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdds diagnostic labels to <code>diag</code> for the expansion path of a …\nReturns <code>Some</code> if we <em>were</em> able to replace bound vars. If …\nA specialized variant of <code>elaborate</code> that only elaborates …\nCasts a trait reference into a reference to one of its …\nExecutes <code>f</code> on <code>value</code> after replacing all escaping bound …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTurns option of iterator into an iterator (this is just …\nPrepare the segments for a vtable\nHelper for <code>prepare_vtable_segments</code> that returns <code>ControlFlow</code>…\nGiven a <code>dyn Subtrait</code> and <code>dyn Supertrait</code> trait object, find …\nGiven a trait <code>trait_ref</code>, iterates the vtable entries that …\nControls whether we “elaborate” supertraits and so …\nReturns the requirements for <code>clause</code> to be well-formed.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nPushes all the predicates needed to validate that <code>ty</code> is WF …\nPushes the obligations required for an alias (except …\nPushes the obligations required for an alias (except …\nPushes the obligations required for an inherent alias to …\nPushes the obligations required for <code>trait_ref</code> to be WF …\nPoints the cause span of a super predicate at the relevant …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven an object type like <code>SomeTrait + Send</code>, computes the …\nReturns the set of obligations needed to make <code>arg</code> …\nGiven a set of predicates that apply to an object type, …\nReturns the obligations that make this trait reference …\nCompute the predicates that are required for a type to be …")