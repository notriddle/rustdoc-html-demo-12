searchState.loadedDescShard("cargo_test_support", 0, "Cargo test support.\nAdd a list of arguments as a line\nTest the cargo command\nEnable nightly features for testing\nA cargo project to run tests against.\nCreate a project to run tests against\nThis is the raw output from the process.\nEstablish a process’s test environment\nPath to a debug binary. ex: …\nCreates the project.\nProject’s target dir, ex: …\nCreates a <code>ProcessBuilder</code> to run cargo. Arguments can be …\nChanges the contents of an existing file.\nRoutines for comparing and diffing output.\nSupport for testing using Docker containers.\nSupport for cross-compile tests with the <code>--target</code> flag.\nA simple Myers diff implementation.\nPath to an example built as a library. <code>kind</code> should be one …\nAdds an executable file to the project.\nAdds a file to the project.\nDeclare an expected value for an assert from a file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCopy the test project from a fixed state\nReturns an iterator of paths matching the glob pattern, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the local filesystem has low-resolution …\nThe list of reasons should be why nightly cargo is needed. …\nEnables nightly features for testing\nThe error message for ENOENT.\nCreates a <code>ProcessBuilder</code> to run a program in the project …\nReturns the contents of a path in the project root\nReturns the contents of <code>Cargo.lock</code>.\nPath to a release binary. ex: …\nSafely run a process after <code>cargo build</code>.\nOverrides the crates.io URL for testing.\nHelper to retry a function <code>n</code> times.\nRoot of the project, ex: <code>/path/to/cargo/target/cit/t0/foo</code>\nRoot of the project, ex: <code>/path/to/cargo/target/cit/t0/foo</code>\nRuns the process, checks the expected output, and returns …\nThe rustc host such as <code>x86_64-unknown-linux-gnu</code>.\nThe host triple suitable for use in a cargo environment …\nSome CI setups are much slower then the equipment used by …\nDeclare an expected value from within Rust source\nForward subordinate process stdout/stderr to the terminal. …\nAdds a symlink to a file to the project.\nCreate a symlink to a directory\nPath to a debug binary for a specific target triple. ex: …\nProject’s debug dir, ex: …\nProject’s debug dir, ex: …\nHelper that waits for a thread to finish, up to <code>n</code> tenths …\nHelper that runs some function, and waits up to <code>n</code> tenths …\nCommon executables that can be reused by various tests.\nModifies <code>Cargo.toml</code> to remove all commented lines.\nFile url for root, ex: …\nVerifies the JSON output matches the given JSON.\nVerifies JSON output contains the given objects (in any …\nVerifies the exit code from the process.\nVerifies that stderr is equal to the given lines. See …\nVerifies that stderr contains the given contiguous lines …\nVerifies that stderr is equal to the given lines.\nVerifies that stderr does not contain the given contiguous …\nVerify that a particular line appears in stderr with and …\nVerifies that all of the stderr output is equal to the …\nWrites the given lines to stdin.\nVerifies that stdout is equal to the given lines. See …\nVerifies that stdout contains the given contiguous lines …\nVerifies that stdout contains the given contiguous lines …\nVerifies that stdout is equal to the given lines.\nVerifies that stdout does not contain the given contiguous …\nVerifies that all of the stdout output is equal to the …\nRemoves exit code check for the process.\nA single line string that supports <code>[..]</code> wildcard matching.\nAssertion policy for functional end-to-end tests\nConvenience wrapper around <code>match_exact</code> which will panic on …\nAssertion policy for UI tests\nCompares JSON object for approximate equality. You can use …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks that the given string contains the given contiguous …\nChecks that the given string contains the given contiguous …\nChecks that the given string does not contain the given …\nCompares one string against another, checking that they …\nChecks that the given string of JSON objects match the …\nChecks that the given string of JSON objects match the …\nChecks that the given string contains the given lines, …\nChecks that the given string has a line that contains the …\nNormalizes the output so that it can be compared against …\nNormalizes the expected string so that it can be compared …\nNormalizes text for both actual and expected strings on …\nThis makes it easier to write regex replacements that are …\nA builder for configuring a container to run.\nA handle to a running container.\nBuilder for configuring a file to copy into a container.\nThe host directory that forms the basis of the Docker …\nExecutes a program inside a running container.\nAdds a file to be copied into the container.\nFiles to copy over to the image.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe IP address of the container.\nStarts the container.\nThe name of the container.\nDefines a file to add to the container.\nReturns the mapping of container_port-&gt;host_port for ports …\nPort mappings of container_port to host_port for ports …\nReturns the contents of a file inside the container.\nWhether or not the resulting cross binaries can run on the …\nThe alternate target-triple to build with.\nWhether or not the host can run cross-compiled executables.\nThe arch triple of the test-running host.\nA possible alternate target-triple to build with.\nA target-triple that is neither the host nor the target.\nA single line change to be applied to the original.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdd all files in the working directory to the git index.\nAdd a git submodule to the repository.\nCreate the repository and commit the new files.\nReturns true if gitoxide is globally activated.\nCommit changes to the git repository.\nAdd a file to the repository.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize a new repository at the given path.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new git repository with a project.\nCreate a new git repository with a project. Returns both …\nAdd a file that will be left in the working directory, but …\nCreate a symlink to a directory\nCreate a <code>RepoBuilder</code> to build a new git repository.\nCreate a new tag in the git repository.\nUsed by <code>cargo install</code> tests to assert an executable binary …\nReturns the argument unchanged.\nGet the filename for a library.\nThis is used when running cargo is pre-CARGO_TARGET_TMPDIR …\nCalls <code>U::from(self)</code>.\nReturns a list of all files and directories underneath the …\nReturns the sysroot as queried from rustc.\nConvert to <code>Data</code> with modifiers for <code>expected</code> data\nConvert to <code>Data</code>, applying defaults\nInitialize as <code>format</code> or <code>Error</code>\nInitialize as json or <code>Error</code>\nInitialize as json lines or <code>Error</code>\nRemove default <code>filters</code> from this <code>expected</code> result\nInitialize as Term SVG\nTreat lines and json arrays as unordered\nChecks the result of a crate publish to an alternative …\nChecks the contents of a <code>.crate</code> file.\nChecks the result of a crate publish.\nChecks the result of a crate publish, along with the …\nEntry with data that corresponds to <code>tar::EntryType</code>.\nA helper struct that collects the arguments for …\nA builder for creating a new package in a registry.\nA file to be created in a package.\nA builder for initializing registries.\nRequest to the test http server\nResponse from the test http server\nAdds a custom HTTP response for a specific url\nGets the alternative-registry version of <code>api_path</code>.\nGets the alternative-registry version of <code>dl_path</code>.\nVariant of <code>init</code> that initializes the “alternative” …\nGets the alternative-registry version of <code>registry_path</code>.\nGets the alternative-registry version of <code>registry_url</code>.\nSets whether or not to initialize as an alternative …\nCall with <code>true</code> to publish in an “alternative registry”.\nIf set, configures an alternate registry with the given …\nSets whether or not to initialize as an alternative …\nIf set, config.json includes ‘api’\nGets the path for local web API uploads. Cargo will place …\nReturns the path to the compressed package file.\nChange the artifact to be of the given kind, like “bin”…\nSets this registry to require the authentication token for …\nIf set, the registry requires authorization for all …\nInitializes the registry.\nChanges this to <code>[build-dependencies]</code>.\nAdds a build-dependency. Example:\nWrite the registry in configuration.\nWrite the token in the configuration.\nThe credential provider to configure for this registry.\nCredential provider in configuration\nAPI responders.\nAdds <code>default-features = false</code> if the argument is <code>false</code>.\nConfigures the git index update to be delayed by the given …\nIf nonzero, the git index update to be delayed by the …\nAdds a normal dependency. Example:\nChanges this to <code>[dev-dependencies]</code>.\nAdds a dev-dependency. Example:\nServe the download endpoint\nGets the path where crates can be downloaded using the web …\nAdds <code>features = [ ... ]</code> to this dependency.\nIf <code>true</code>, the file is created in the root of the tarfile, …\nAdds an “extra” file that is not rooted within the …\nAdds an entry in the <code>[features]</code> section.\nAdds a dependency with the given feature. Example:\nAdds a file to the package.\nAdds a file with a specific Unix mode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOperate the api over http\nIf set, serves the API over http.\nOperate the index over http\nIf set, serves the index over http.\nServe the registry index\nInitializes the on-disk registry and sets up the config so …\nReturn an internal server error (HTTP 500)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCauses the JSON line emitted in the index to be invalid, …\nShutdown the server thread and wait for it to stop. <code>Drop</code> …\nCall with <code>true</code> to publish in a “local registry”.\nThe Unix mode for the file. Note that when extracted on …\nCreates a new package builder. Call <code>publish()</code> to finalize …\nThe registry has no api.\nPrevents adding the registry to the configuration.\nPrevents placing a token in the configuration\nNot found response\nHandler for 404 responses.\nRespond OK without doing anything\nChanges this to an optional dependency.\nAdds <code>package = ...</code> to this dependency.\nSpecifies whether or not this is a proc macro.\nChanges this to an public dependency.\nCreates the package and place it in the registry.\nAdds <code>registry = $registry</code> to this dependency.\nAdds a dependency to the alternative registry.\nGets the path to the local index pretending to be …\nThis is a valid PASETO secret key. This one is already …\nRoute the request\nSpecify a minimal Rust version.\nSets the index schema version for this package.\nAdds a symlink to a path to the package.\nChanges this to <code>[target.$target.dependencies]</code>.\nAdds a platform-specific dependency. Example:\nSets the token value\nThe authorization token for the registry.\nUnauthorized response\nSpecifies whether or not the package is “yanked”.\nReturns the path to an executable that prints its …\nReturns a project which builds a cargo-echo simple …\nReturns the path to an executable that works as a wrapper …\nA wrapper around <code>rustc</code> instead of calling <code>clippy</code>.")