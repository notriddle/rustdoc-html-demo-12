searchState.loadedDescShard("rustdoc_json_types", 0, "Rustdoc’s JSON output interface\n&lt;’a, 32, B: Copy, C = u32&gt;\n[u32; 15]\nAn attribute macro <code>#[foo]</code>.\nA bang macro <code>foo!()</code>.\n<code>&amp;&#39;a mut String</code>, <code>&amp;str</code>, etc.\nA <code>Crate</code> is the root of the emitted JSON blob. It contains …\nFor the most part items are private by default. The …\nA derive macro …\nrustdoc format-version.\n<code>type</code>s from an extern block\nRepresents a function (including methods and other …\n<code>extern &quot;ABI&quot; fn</code>\nParameterized types\nAn opaque identifier for an item.\n<code>impl TraitA + TraitB + ...</code>\n<code>_</code>\nFor external (not defined in the local crate) items, you …\nDeclarative macro_rules! macro\nFn(A, B) -&gt; C\n<code>u32 is 1..</code>\nA struct with named fields.\nA variant with no parentheses\nA trait and potential HRTBs\nBuilt in numeric (i*, u*, f*) types, bool, and char\nAssociated types like <code>&lt;Type as Trait&gt;::Name</code> and <code>T::Item</code> …\n<code>*mut u32</code>, <code>*u8</code>, etc.\nStructs, enums, and unions\nFor <code>pub(in path)</code> visibility. <code>parent</code> is the module it’s …\n<code>[u32]</code>\nA variant with named fields.\nA struct with unnamed fields.\nA variant with unnamed fields.\n<code>(String, u32, Box&lt;usize&gt;)</code>\nA struct with no fields and no parentheses.\n<code>use&lt;&#39;a, T&gt;</code> precise-capturing bound syntax\nGeneric arguments to the type\nStringified versions of the attributes on this item (e.g. …\nZero indexed Line and Column of the first character of the …\nCan be used to look up the name and html_root_url of the …\nThis can be used as a key to the <code>external_crates</code> map of …\nThe version string given to <code>--crate-version</code>, if any.\nThe discriminant, if explicitly specified.\nThe full markdown docstring of this item. Absent if there …\nZero indexed Line and Column of the last character of the …\nThe expression that produced the discriminant.\nMaps <code>crate_id</code> of items to a crate name and html_root_url …\nThe path to the source file for this span relative to the …\nA single version number to be used in the future when …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUsed for Higher-Rank Trait Bounds (HRTBs)\nUsed for Higher-Rank Trait Bounds (HRTBs)\nWhether this import uses a glob: <code>use source::*;</code>\nThe unique identifier of this item. Can be used to find …\nThe ID of the item being imported. Will be <code>None</code> in case of …\nWhether or not the output includes private items.\nA collection of all items in the local crate as well as …\nList of argument names and their type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf <code>true</code>, this module is not part of the public API, but it …\nWhether this item is a struct, trait, macro, etc.\nWhether the variant is plain, a tuple-like, or …\nThe lifetime of the whole dyn object\nThis mapping resolves intra-doc links from the docstring …\nSome items such as impls don’t have names.\nMay be different from the last segment of <code>source</code> when …\nThe list of path components for the fully qualified path …\nMaps IDs to fully qualified paths and other info helpful …\nThe id of the root <code>Module</code> item of the local crate.\nThe full path being imported.\nThe source location of this item (absent if it came from a …\nAll the traits implemented. One of them is the vtable, and …\nThe numerical value of the discriminant. Stored as a …\nBy default all documented items are public, but you can …\nUsed for Higher-Rank Trait Bounds (HRTBs)\nThis is normally <code>false</code>, which means that this generic …\ne.g. <code>const X: usize = 5;</code>\ne.g. <code>type X = usize;</code>\n<code>None</code> iff this is an <em>inherent</em> associated type.\nUsed for Higher-Rank Trait Bounds (HRTBs)")