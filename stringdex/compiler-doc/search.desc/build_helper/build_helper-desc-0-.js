searchState.loadedDescShard("build_helper", 0, "Types and functions shared across tools in this workspace.\nThe default set of crates for opt-dist to collect LLVM …\nThe default set of crates for opt-dist to collect rustc …\nThis module implements “drop bombs” intended for use …\nInvokes <code>build_helper::util::detail_exit</code> with <code>cfg!(test)</code>\nMisc filesystem related helpers for use by bootstrap and …\nThe GitHub Actions environment, for Linux (including …\nNot a CI environment.\nObtains the current CI environment.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if running in rust-lang/rust managed CI job.\nA guard that closes the current github actions log group …\nReturns the argument unchanged.\nAll github actions log messages from this call to the Drop …\nCalls <code>U::from(self)</code>.\nArm a <code>DropBomb</code>. If the value is dropped without being …\nDefuse the <code>DropBomb</code>. This will prevent the drop bomb from …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHelper to ignore <code>std::io::ErrorKind::NotFound</code>, but still …\nA wrapper around <code>std::fs::remove_dir_all</code> that can also be …\nThere are local modifications to a certain set of paths. …\nArtifacts should be downloaded from this upstream commit, …\nNo upstream commit was found. This should not happen in …\nRepresents the result of checking whether a set of paths …\nThis function figures out if a set of paths was last …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the most recent (ordered chronologically) commit …\nReturns the files that have been modified in the current …\nReturns the files that haven’t been added to git yet.\nReturns the latest upstream commit that modified …\nReturns true if any of the passed <code>paths</code> have changed since …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRuns a command and returns the output\nResolve the commit SHA of <code>commit_ref</code>.\nRepresents a single bootstrap step, with the accumulated …\nRepresents metadata about bootstrap’s execution in CI.\nBootstrap steps can be generic and thus contain angle …\nWrites build steps into a nice indented table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>BuildStep</code> representing a single invocation of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a Vec with all substeps, ordered by their …\nFull name of a GitHub repository where bootstrap was …\nGitHub run ID of the workflow where bootstrap was executed.\nInstall all the npm deps, and return the path of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf code is not 0 (successful exit status), exit status is …\nReturns the submodule paths from the <code>.gitmodules</code> file in …")